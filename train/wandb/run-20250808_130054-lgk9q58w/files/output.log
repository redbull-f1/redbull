Size of Training Set:  2014
Size of Testing Set:  0
Size of Validation Set:  0
Optimizer Initialized
Loss function initialized
Learning rate of layer 0: 0.0005
GRAD:  conv1.weight
GRAD:  conv1.bias
GRAD:  bn1.weight
GRAD:  bn1.bias
GRAD:  conv2.weight
GRAD:  conv2.bias
GRAD:  bn2.weight
GRAD:  bn2.bias
GRAD:  deconv1.weight
GRAD:  deconv1.bias
GRAD:  deconv2.weight
GRAD:  deconv2.bias
GRAD:  bn4.weight
GRAD:  bn4.bias
GRAD:  bn3.weight
GRAD:  bn3.bias
cuda
Epoch: 0
Using dense features with data: tensor([ 1.0886,  0.4270,  1.1443, -0.9423,  0.6889])
Data length: 5
Using dense features with data: tensor([ 0.6693,  0.7743,  2.2130, -1.4928,  0.5934])
Data length: 5
Using dense features with data: tensor([ 1.1297,  0.3559,  1.3102, -0.9044,  0.6042])
Data length: 5
Using dense features with data: tensor([ 1.0028,  0.5050,  0.8663, -1.0746,  0.8923])
Data length: 5
Using dense features with data: tensor([ 1.3207,  0.8349,  0.8243, -1.3132,  1.0102])
Data length: 5
Using dense features with data: tensor([ 1.0166,  0.5071,  0.9592, -1.1110,  0.8586])
Data length: 5
Using dense features with data: tensor([ 1.0095,  0.8147,  0.4603, -2.3011,  1.3734])
Data length: 5
Using dense features with data: tensor([ 0.4299,  0.5865,  1.6587, -1.2814,  0.6578])
Data length: 5
Using dense features with data: tensor([ 1.0784,  0.4554,  1.3045, -1.1251,  0.7117])
Data length: 5
Using dense features with data: tensor([ 1.3579,  2.0829, -0.0205, -2.7282,  1.5783])
Data length: 5
Using dense features with data: tensor([ 1.6770,  0.3274,  1.2531, -0.8823,  0.6135])
Data length: 5
Using dense features with data: tensor([ 1.2060,  0.5453,  1.3959, -1.1683,  0.6969])
Data length: 5
Using dense features with data: tensor([ 1.4535,  0.3853,  1.7187, -0.1784,  0.1034])
Data length: 5
Using dense features with data: tensor([ 1.1911,  0.6937,  1.3206, -1.3404,  0.7928])
Data length: 5
Using dense features with data: tensor([ 0.9704,  0.6209,  0.4071, -0.7327,  1.0637])
Data length: 5
Using dense features with data: tensor([ 0.6575,  0.9500,  0.2655, -1.4711,  1.3923])
Data length: 5
Using dense features with data: tensor([ 0.9743,  1.4166,  0.5005, -1.6845,  1.2820])
Data length: 5
Using dense features with data: tensor([ 1.2212,  1.2930,  0.4655, -1.8678,  1.3266])
Data length: 5
Using dense features with data: tensor([ 1.2646,  0.5109,  1.4546, -1.1257,  0.6586])
Data length: 5
Using dense features with data: tensor([ 1.1298,  0.5270,  1.0753, -1.0261,  0.7620])
Data length: 5
Using dense features with data: tensor([ 0.9462,  0.7828,  0.6034, -1.4631,  1.1796])
Data length: 5
Using dense features with data: tensor([ 1.0931,  0.1527,  1.7695, -1.3249,  0.6427])
Data length: 5
Using dense features with data: tensor([ 1.1149,  0.7427,  0.5832, -1.1565,  1.1037])
Data length: 5
Using dense features with data: tensor([ 1.2447,  0.4860,  1.1351, -1.1614,  0.7968])
Data length: 5
Using dense features with data: tensor([ 1.1929,  0.4883,  1.1808, -1.1010,  0.7505])
Data length: 5
Using dense features with data: tensor([ 1.6482,  1.0136,  0.9766, -1.3992,  0.9615])
Data length: 5
Using dense features with data: tensor([ 1.0127,  0.9548,  0.6830, -1.4406,  1.1280])
Data length: 5
Using dense features with data: tensor([ 0.8205,  0.7495,  1.6318, -1.6017,  0.7761])
Data length: 5
Using dense features with data: tensor([ 1.0067,  0.5417,  0.7891, -1.1835,  0.9827])
Data length: 5
Using dense features with data: tensor([ 1.6015,  0.2322,  1.9698, -0.8723,  0.4169])
Data length: 5
Using dense features with data: tensor([ 0.5244,  0.5739,  1.4230, -1.5147,  0.8166])
Data length: 5
Using dense features with data: tensor([ 1.2065,  1.2632,  0.4272, -1.8460,  1.3434])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 1: Loss=6582.7686, Heatmap=0.7028, Dense=0.3014, Output_Max=6.9031
Using dense features with data: tensor([ 1.0890,  0.4902,  1.0187, -1.0125,  0.7823])
Data length: 5
Using dense features with data: tensor([ 1.0460,  0.4912,  1.1870, -1.1501,  0.7696])
Data length: 5
Using dense features with data: tensor([ 1.0318,  0.4569,  1.1822, -1.0145,  0.7092])
Data length: 5
Using dense features with data: tensor([ 0.9737,  0.7669,  0.6569, -1.4656,  1.1494])
Data length: 5
Using dense features with data: tensor([ 1.2010,  1.4285,  0.8703, -1.6053,  1.0740])
Data length: 5
Using dense features with data: tensor([ 1.0399,  0.6996,  0.5039, -1.0302,  1.1159])
Data length: 5
Using dense features with data: tensor([ 0.8084,  0.4277,  0.5499, -0.8122,  0.9757])
Data length: 5
Using dense features with data: tensor([ 1.2258,  0.1647,  2.1065, -0.5075,  0.2364])
Data length: 5
Using dense features with data: tensor([ 0.6378,  0.8071,  0.0486, -1.1910,  1.5300])
Data length: 5
Using dense features with data: tensor([ 1.1680,  0.5377,  1.2482, -1.0721,  0.7096])
Data length: 5
Using dense features with data: tensor([ 1.2443,  0.6037,  1.6147, -0.5163,  0.3095])
Data length: 5
Using dense features with data: tensor([ 1.9274, -0.2625,  1.6881,  0.2763, -0.1623])
Data length: 5
Using dense features with data: tensor([ 1.2733,  0.8235,  0.4564, -1.0460,  1.1594])
Data length: 5
Using dense features with data: tensor([ 1.1474,  0.5193,  2.2853, -2.0849,  0.7396])
Data length: 5
Using dense features with data: tensor([ 0.9995,  0.9063,  0.3414, -2.4885,  1.4345])
Data length: 5
Using dense features with data: tensor([ 1.1552,  0.6628,  0.6886, -1.2034,  1.0511])
Data length: 5
Using dense features with data: tensor([ 1.8128,  0.4482,  1.7100, -1.0878,  0.5666])
Data length: 5
Using dense features with data: tensor([ 1.0416,  0.6787,  0.5878, -1.0953,  1.0783])
Data length: 5
Using dense features with data: tensor([ 1.7646,  0.2999,  1.8320, -0.9226,  0.4665])
Data length: 5
Using dense features with data: tensor([ 0.9693,  0.5528,  0.8526, -1.2090,  0.9566])
Data length: 5
Using dense features with data: tensor([ 1.1970,  0.4113,  1.3887, -1.0741,  0.6583])
Data length: 5
Using dense features with data: tensor([ 1.0041,  0.5917,  0.7333, -1.1930,  1.0196])
Data length: 5
Using dense features with data: tensor([ 1.0967,  0.5435,  1.0326, -1.0284,  0.7833])
Data length: 5
Using dense features with data: tensor([ 0.9056,  0.6009,  0.5838, -0.9834,  1.0351])
Data length: 5
Using dense features with data: tensor([ 1.1656,  0.3718,  1.3394, -1.1240,  0.6982])
Data length: 5
Using dense features with data: tensor([ 1.1176,  0.8254,  1.4512, -1.2179,  0.6982])
Data length: 5
Using dense features with data: tensor([ 1.0713,  0.8135,  1.0457, -1.4912,  0.9592])
Data length: 5
Using dense features with data: tensor([ 1.0083,  0.4932,  0.9697, -1.0370,  0.8189])
Data length: 5
Using dense features with data: tensor([ 1.4603, -0.1912,  1.6231,  0.9715, -0.5394])
Data length: 5
Using dense features with data: tensor([ 0.4566,  0.5785,  1.6221, -1.3275,  0.6858])
Data length: 5
Using dense features with data: tensor([ 1.0571,  0.8995,  0.9276, -1.6433,  1.0569])
Data length: 5
Using dense features with data: tensor([ 1.2977,  0.5959,  1.2369, -1.1806,  0.7621])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 2: Loss=6558.0571, Heatmap=0.6996, Dense=0.3005, Output_Max=6.7642
Using dense features with data: tensor([ 1.0378,  0.7420,  0.5555, -1.1264,  1.1126])
Data length: 5
Using dense features with data: tensor([ 1.2338,  0.5472,  1.2917, -1.1967,  0.7472])
Data length: 5
Using dense features with data: tensor([ 1.2765,  0.7035,  1.2160, -1.4396,  0.8694])
Data length: 5
Using dense features with data: tensor([ 1.0778,  1.1032,  0.4408, -2.5195,  1.3976])
Data length: 5
Using dense features with data: tensor([ 1.0986,  0.7409,  1.1857, -1.4740,  0.8934])
Data length: 5
Using dense features with data: tensor([ 0.6122,  0.3692,  1.0619, -1.5190,  0.9607])
Data length: 5
Using dense features with data: tensor([ 0.8902, -0.1506,  1.8919, -0.5248,  0.2706])
Data length: 5
Using dense features with data: tensor([ 0.9702,  0.8301,  0.5501, -1.4655,  1.2117])
Data length: 5
Using dense features with data: tensor([ 0.4404,  0.5536,  1.2699, -2.0410,  1.0142])
Data length: 5
Using dense features with data: tensor([ 1.1459,  0.3716,  1.2644, -1.1351,  0.7316])
Data length: 5
Using dense features with data: tensor([ 0.7887,  0.7686,  0.4345, -1.3256,  1.2541])
Data length: 5
Using dense features with data: tensor([ 0.9852,  0.5734,  0.7671, -1.1705,  0.9906])
Data length: 5
Using dense features with data: tensor([ 0.9789,  0.6383,  1.2247, -1.7710,  0.9658])
Data length: 5
Using dense features with data: tensor([ 1.0784,  0.4554,  1.3027, -1.1616,  0.7282])
Data length: 5
Using dense features with data: tensor([ 1.2189,  1.3266,  0.4920, -1.8343,  1.3087])
Data length: 5
Using dense features with data: tensor([ 1.0804,  0.4902,  1.1109, -1.1265,  0.7923])
Data length: 5
Using dense features with data: tensor([ 1.4099, -0.3505,  1.5488,  1.1847, -0.6530])
Data length: 5
Using dense features with data: tensor([ 0.7398,  0.5437,  1.0856, -1.5859,  0.9705])
Data length: 5
Using dense features with data: tensor([ 1.3589,  0.5786,  1.1929, -1.2983,  0.8277])
Data length: 5
Using dense features with data: tensor([ 0.8937,  0.4900,  0.9163, -1.0404,  0.8487])
Data length: 5
Using dense features with data: tensor([ 1.1631,  1.4639,  0.2659, -2.5929,  1.4686])
Data length: 5
Using dense features with data: tensor([ 0.8744,  0.7123,  0.8181, -1.3797,  1.0355])
Data length: 5
Using dense features with data: tensor([ 1.1960,  0.8214,  1.2689, -1.1569,  0.7393])
Data length: 5
Using dense features with data: tensor([ 0.7622,  0.5353,  0.5133, -1.0742,  1.1250])
Data length: 5
Using dense features with data: tensor([ 0.7428,  0.6276,  1.0060, -2.3157,  1.1610])
Data length: 5
Using dense features with data: tensor([ 1.6419,  0.3275,  1.4783, -0.8185,  0.5057])
Data length: 5
Using dense features with data: tensor([ 1.2298,  0.4365,  1.4369, -1.0607,  0.6359])
Data length: 5
Using dense features with data: tensor([ 1.0668,  0.9227,  0.8120, -1.7034,  1.1260])
Data length: 5
Using dense features with data: tensor([ 1.1218,  0.6665,  0.6688, -2.0041,  1.2487])
Data length: 5
Using dense features with data: tensor([ 1.6383,  0.7135,  1.3687, -1.5813,  0.8573])
Data length: 5
Using dense features with data: tensor([ 0.3592,  0.6957,  0.6645, -1.4860,  1.1503])
Data length: 5
Using dense features with data: tensor([ 1.5548,  0.6923,  1.0316, -1.2404,  0.8770])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 3: Loss=6545.5693, Heatmap=0.6986, Dense=0.2998, Output_Max=6.6080
Using dense features with data: tensor([ 0.9744,  0.9760,  0.6318, -1.7734,  1.2285])
Data length: 5
Using dense features with data: tensor([ 0.8023,  0.7697,  0.6970, -1.4004,  1.1090])
Data length: 5
Using dense features with data: tensor([ 0.6350,  0.3205,  1.1461, -1.4749,  0.9102])
Data length: 5
Using dense features with data: tensor([ 1.1008,  0.5088,  1.0770, -1.0928,  0.7927])
Data length: 5
Using dense features with data: tensor([ 1.1132,  1.2704,  0.0716, -1.6801,  1.5282])
Data length: 5
Using dense features with data: tensor([ 1.0631,  0.4851,  1.1141, -1.1513,  0.8018])
Data length: 5
Using dense features with data: tensor([ 1.1431,  0.4984,  1.4498, -1.1089,  0.6529])
Data length: 5
Using dense features with data: tensor([ 1.3580,  0.4687,  1.0633, -0.9021,  0.7036])
Data length: 5
Using dense features with data: tensor([ 1.2101,  0.5073,  1.3104, -1.1513,  0.7209])
Data length: 5
Using dense features with data: tensor([ 1.6550,  0.8013,  2.1354, -0.5772,  0.2640])
Data length: 5
Using dense features with data: tensor([ 0.6134,  0.6329,  1.2215, -1.9330,  1.0073])
Data length: 5
Using dense features with data: tensor([ 1.7769,  0.5785,  1.5407, -1.2699,  0.6893])
Data length: 5
Using dense features with data: tensor([ 0.9944,  0.7461,  0.9036, -1.5549,  1.0444])
Data length: 5
Using dense features with data: tensor([ 0.9132,  0.3439,  0.9042, -0.8167,  0.7346])
Data length: 5
Using dense features with data: tensor([ 1.1168,  0.9127,  0.4003, -1.1882,  1.2458])
Data length: 5
Using dense features with data: tensor([ 1.1558,  1.2003,  0.1645, -1.5260,  1.4634])
Data length: 5
Using dense features with data: tensor([ 1.0758,  0.3871,  1.1979, -1.0474,  0.7184])
Data length: 5
Using dense features with data: tensor([ 1.2243,  0.3953,  1.2781, -1.1274,  0.7228])
Data length: 5
Using dense features with data: tensor([ 1.3102,  0.5413,  1.2679, -1.1834,  0.7509])
Data length: 5
Using dense features with data: tensor([ 1.5157,  0.6401,  1.3409, -1.0003,  0.6409])
Data length: 5
Using dense features with data: tensor([ 1.0632,  0.5092,  1.0278, -1.1876,  0.8574])
Data length: 5
Using dense features with data: tensor([ 1.1240,  0.5372,  0.9881, -1.1016,  0.8397])
Data length: 5
Using dense features with data: tensor([ 1.0672,  0.4948,  1.1388, -1.1592,  0.7943])
Data length: 5
Using dense features with data: tensor([ 1.3463,  0.4036,  2.3082, -1.5282,  0.5848])
Data length: 5
Using dense features with data: tensor([ 1.1559,  0.4971,  1.3714, -1.1662,  0.7047])
Data length: 5
Using dense features with data: tensor([ 1.2453,  0.4349,  1.3251, -1.1152,  0.6996])
Data length: 5
Using dense features with data: tensor([ 1.4237,  1.2180,  0.9958, -1.5666,  1.0046])
Data length: 5
Using dense features with data: tensor([ 1.0124,  0.7218,  0.1935, -0.4807,  1.1882])
Data length: 5
Using dense features with data: tensor([ 1.0377,  0.6702,  1.0878, -1.3678,  0.8990])
Data length: 5
Using dense features with data: tensor([ 1.3200,  0.5479,  1.3813, -1.2024,  0.7163])
Data length: 5
Using dense features with data: tensor([ 1.8886, -0.2210,  1.7319,  0.3763, -0.2139])
Data length: 5
Using dense features with data: tensor([ 1.1595,  0.5457,  1.2105, -1.0944,  0.7351])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 4: Loss=6534.5830, Heatmap=0.6977, Dense=0.2992, Output_Max=7.7366
Using dense features with data: tensor([ 0.8918,  0.5457,  0.8359, -1.2070,  0.9651])
Data length: 5
Using dense features with data: tensor([ 1.2940,  0.6853,  1.2550, -1.3685,  0.8286])
Data length: 5
Using dense features with data: tensor([ 1.2407,  0.8006,  1.1145, -1.4910,  0.9289])
Data length: 5
Using dense features with data: tensor([ 1.1764,  0.3685,  1.4045, -1.1748,  0.6966])
Data length: 5
Using dense features with data: tensor([ 0.9570,  1.4599,  0.4716, -1.6564,  1.2934])
Data length: 5
Using dense features with data: tensor([ 1.0366,  0.4679,  1.0898, -1.0239,  0.7542])
Data length: 5
Using dense features with data: tensor([ 0.7987,  0.7608,  0.4674, -1.2661,  1.2171])
Data length: 5
Using dense features with data: tensor([ 1.4813,  0.2448,  1.6748,  0.0953, -0.0568])
Data length: 5
Using dense features with data: tensor([ 0.9289,  1.0627,  0.5736, -1.6037,  1.2273])
Data length: 5
Using dense features with data: tensor([ 0.7791,  0.5548,  1.0221, -2.2336,  1.1416])
Data length: 5
Using dense features with data: tensor([ 1.1297,  0.3559,  1.2396, -0.9058,  0.6311])
Data length: 5
Using dense features with data: tensor([ 0.9649,  0.5961,  0.7924, -1.1340,  0.9609])
Data length: 5
Using dense features with data: tensor([ 1.3102,  0.5413,  1.2679, -1.1834,  0.7509])
Data length: 5
Using dense features with data: tensor([ 0.6547,  0.7550,  0.0389, -1.1238,  1.5362])
Data length: 5
Using dense features with data: tensor([ 0.4774,  0.4520,  1.2000, -1.9094,  1.0097])
Data length: 5
Using dense features with data: tensor([ 0.7071,  0.6978,  1.4720, -1.7498,  0.8714])
Data length: 5
Using dense features with data: tensor([ 1.0251,  0.5852,  0.9189, -1.1221,  0.8846])
Data length: 5
Using dense features with data: tensor([ 0.9534,  0.2993,  1.0228, -0.7215,  0.6143])
Data length: 5
Using dense features with data: tensor([ 1.2631,  0.6955,  1.4545, -1.1605,  0.6734])
Data length: 5
Using dense features with data: tensor([ 1.1476,  0.9142,  0.8700, -1.5782,  1.0670])
Data length: 5
Using dense features with data: tensor([ 1.2259,  0.7288,  1.1784, -1.4389,  0.8846])
Data length: 5
Using dense features with data: tensor([ 0.9793,  0.7020,  0.8950, -1.3973,  1.0011])
Data length: 5
Using dense features with data: tensor([ 0.6310,  0.8780,  0.1183, -1.2876,  1.4792])
Data length: 5
Using dense features with data: tensor([ 0.7939,  0.3424,  1.2880, -1.6454,  0.9066])
Data length: 5
Using dense features with data: tensor([ 0.9825,  0.5686,  0.8798, -1.1495,  0.9175])
Data length: 5
Using dense features with data: tensor([ 1.0918,  0.4823,  1.1423, -1.1460,  0.7870])
Data length: 5
Using dense features with data: tensor([ 1.0436,  0.7816,  0.8947, -1.4953,  1.0316])
Data length: 5
Using dense features with data: tensor([ 0.9953,  0.5429,  0.5484, -0.8554,  1.0007])
Data length: 5
Using dense features with data: tensor([ 1.1416,  0.8091,  1.2059, -1.5517,  0.9101])
Data length: 5
Using dense features with data: tensor([ 0.9944,  0.8253,  0.6197, -1.5173,  1.1830])
Data length: 5
Using dense features with data: tensor([ 1.0656,  0.9119,  1.0394, -1.4753,  0.9570])
Data length: 5
Using dense features with data: tensor([ 1.2075,  0.1675,  2.2996, -1.2490,  0.4975])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 5: Loss=6525.3843, Heatmap=0.6968, Dense=0.2988, Output_Max=6.3356
Using dense features with data: tensor([ 0.9948,  0.6237,  0.3950, -0.7393,  1.0801])
Data length: 5
Using dense features with data: tensor([ 1.0065,  0.5176,  0.9007, -1.0788,  0.8751])
Data length: 5
Using dense features with data: tensor([ 1.3846,  0.5742,  1.2493, -1.2693,  0.7933])
Data length: 5
Using dense features with data: tensor([ 1.7822,  0.2988,  1.7943, -1.0010,  0.5089])
Data length: 5
Using dense features with data: tensor([ 1.1364,  0.5194,  1.1588, -1.2339,  0.8167])
Data length: 5
Using dense features with data: tensor([ 1.3467,  0.5389,  1.8231, -0.4727,  0.2537])
Data length: 5
Using dense features with data: tensor([ 1.0284,  0.5544,  0.9886, -1.1400,  0.8564])
Data length: 5
Using dense features with data: tensor([ 1.0864,  0.1626,  1.4114, -0.3897,  0.2694])
Data length: 5
Using dense features with data: tensor([ 0.6199,  0.3437,  1.0443, -1.5311,  0.9722])
Data length: 5
Using dense features with data: tensor([ 1.0841,  1.3160,  0.1195, -1.8336,  1.5057])
Data length: 5
Using dense features with data: tensor([ 0.7440,  0.7697,  1.3451, -2.4522,  1.0691])
Data length: 5
Using dense features with data: tensor([ 0.9307,  0.9525,  0.6278, -1.5558,  1.1872])
Data length: 5
Using dense features with data: tensor([ 1.3878,  0.6646,  1.2359, -1.4492,  0.8647])
Data length: 5
Using dense features with data: tensor([ 0.9120,  0.5182,  0.3689, -0.5992,  1.0189])
Data length: 5
Using dense features with data: tensor([ 0.9592,  0.8008,  0.5184, -1.4770,  1.2332])
Data length: 5
Using dense features with data: tensor([ 1.0508,  0.4210,  1.2073, -1.0127,  0.6979])
Data length: 5
Using dense features with data: tensor([ 1.0702,  0.5421,  0.9888, -1.0895,  0.8338])
Data length: 5
Using dense features with data: tensor([ 0.9905,  0.5806,  0.8339, -1.2706,  0.9900])
Data length: 5
Using dense features with data: tensor([ 0.8918,  0.5457,  0.8974, -1.2589,  0.9515])
Data length: 5
Using dense features with data: tensor([ 0.8968,  0.6867,  0.5336, -1.0425,  1.0977])
Data length: 5
Using dense features with data: tensor([ 1.0751,  0.5577,  2.4794, -0.8744,  0.3390])
Data length: 5
Using dense features with data: tensor([ 0.9705,  0.7865,  1.3482, -2.0656,  0.9925])
Data length: 5
Using dense features with data: tensor([ 1.0329,  0.4649,  1.1782, -1.0022,  0.7049])
Data length: 5
Using dense features with data: tensor([ 0.7973,  0.5952,  0.9958, -1.7515,  1.0539])
Data length: 5
Using dense features with data: tensor([ 0.9026,  0.9899,  0.6957, -1.5713,  1.1540])
Data length: 5
Using dense features with data: tensor([ 1.1047,  1.1883,  0.3861, -2.5423,  1.4201])
Data length: 5
Using dense features with data: tensor([ 1.1459,  0.3716,  1.3656, -1.0921,  0.6746])
Data length: 5
Using dense features with data: tensor([ 0.9852,  0.5734,  0.7311, -1.1934,  1.0212])
Data length: 5
Using dense features with data: tensor([ 0.8991,  0.7035,  0.7348, -1.4630,  1.1053])
Data length: 5
Using dense features with data: tensor([ 1.6672,  0.2976,  1.1922, -0.7863,  0.5831])
Data length: 5
Using dense features with data: tensor([ 1.1408,  0.4511,  1.1041, -1.0483,  0.7594])
Data length: 5
Using dense features with data: tensor([ 0.9985,  0.5564,  0.8082, -1.2309,  0.9898])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 6: Loss=6517.6240, Heatmap=0.6960, Dense=0.2984, Output_Max=5.7055
Using dense features with data: tensor([ 0.4867,  0.5967,  1.6830, -1.2066,  0.6220])
Data length: 5
Using dense features with data: tensor([ 1.0239,  0.6066,  0.6214, -1.0506,  1.0367])
Data length: 5
Using dense features with data: tensor([ 1.5896,  0.2431,  1.1959, -0.7502,  0.5603])
Data length: 5
Using dense features with data: tensor([ 1.0804,  0.4902,  1.1398, -1.0973,  0.7664])
Data length: 5
Using dense features with data: tensor([ 1.0203,  0.4767,  0.9273, -1.0363,  0.8409])
Data length: 5
Using dense features with data: tensor([ 1.4350,  0.8778,  1.8039, -0.7633,  0.4003])
Data length: 5
Using dense features with data: tensor([ 1.2756,  1.3799,  0.6336, -1.8622,  1.2428])
Data length: 5
Using dense features with data: tensor([ 1.1383,  0.6831,  1.6955, -1.8793,  0.8368])
Data length: 5
Using dense features with data: tensor([ 1.1037,  0.5356,  1.1924, -1.1880,  0.7836])
Data length: 5
Using dense features with data: tensor([ 0.7768,  0.5008,  0.5505, -1.0505,  1.0881])
Data length: 5
Using dense features with data: tensor([ 1.1865,  0.7672,  1.3116, -1.4690,  0.8419])
Data length: 5
Using dense features with data: tensor([ 0.8721,  0.3826,  1.1849, -1.8773,  1.0078])
Data length: 5
Using dense features with data: tensor([ 0.9787,  0.7161,  0.9127, -1.3858,  0.9884])
Data length: 5
Using dense features with data: tensor([ 0.8903,  0.7016,  2.4328, -1.2114,  0.4620])
Data length: 5
Using dense features with data: tensor([ 0.8521,  0.7048,  0.4317, -1.2263,  1.2323])
Data length: 5
Using dense features with data: tensor([ 0.3127,  0.5270,  1.4547, -1.4590,  0.7869])
Data length: 5
Using dense features with data: tensor([ 0.9294,  0.6840,  2.4026, -1.2015,  0.4637])
Data length: 5
Using dense features with data: tensor([ 1.0151,  0.6668,  0.6015, -1.1009,  1.0708])
Data length: 5
Using dense features with data: tensor([ 0.9649,  0.5961,  0.7619, -1.1867,  1.0001])
Data length: 5
Using dense features with data: tensor([ 1.3294,  0.6933,  0.8218, -1.7916,  1.1408])
Data length: 5
Using dense features with data: tensor([ 0.5427,  0.7294,  1.8002, -1.7429,  0.7692])
Data length: 5
Using dense features with data: tensor([ 1.1680,  1.2809,  0.1939, -1.8527,  1.4665])
Data length: 5
Using dense features with data: tensor([ 1.3524,  0.8600,  0.8675, -1.3251,  0.9911])
Data length: 5
Using dense features with data: tensor([ 1.0688,  0.3567,  1.1260, -0.9641,  0.7081])
Data length: 5
Using dense features with data: tensor([ 0.9551,  1.0257,  0.6002, -1.6178,  1.2156])
Data length: 5
Using dense features with data: tensor([ 1.2894,  0.4289,  1.5300, -1.0209,  0.5884])
Data length: 5
Using dense features with data: tensor([ 0.9428,  0.7220,  0.2710, -0.6267,  1.1626])
Data length: 5
Using dense features with data: tensor([ 0.9153,  0.1169,  1.8689, -1.2098,  0.5745])
Data length: 5
Using dense features with data: tensor([ 1.0416,  0.6787,  0.5641, -1.1265,  1.1065])
Data length: 5
Using dense features with data: tensor([ 1.0201,  0.7807,  2.1478, -2.2966,  0.8189])
Data length: 5
Using dense features with data: tensor([ 1.2076,  0.6671,  1.8066, -1.7727,  0.7759])
Data length: 5
Using dense features with data: tensor([ 1.2671,  0.3706,  1.3580, -0.9347,  0.6028])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 7: Loss=6510.2275, Heatmap=0.6952, Dense=0.2981, Output_Max=5.4583
Using dense features with data: tensor([ 0.8999,  0.6976,  0.7500, -1.4877,  1.1038])
Data length: 5
Using dense features with data: tensor([ 1.0208,  0.9952,  0.5794, -1.7033,  1.2429])
Data length: 5
Using dense features with data: tensor([ 0.7960,  0.7508,  0.4830, -1.3539,  1.2281])
Data length: 5
Using dense features with data: tensor([ 1.7725,  0.3055,  1.7931, -1.0032,  0.5101])
Data length: 5
Using dense features with data: tensor([ 0.9254,  0.6910,  0.8471, -1.4473,  1.0413])
Data length: 5
Using dense features with data: tensor([ 1.2722,  0.4755,  1.5474, -0.7854,  0.4697])
Data length: 5
Using dense features with data: tensor([ 0.8455,  0.8098,  0.7125, -1.4476,  1.1134])
Data length: 5
Using dense features with data: tensor([ 1.1122,  0.8752,  1.1729, -1.3136,  0.8419])
Data length: 5
Using dense features with data: tensor([ 0.9384,  0.5493,  1.5008, -2.1812,  0.9681])
Data length: 5
Using dense features with data: tensor([ 0.9295,  0.8407,  0.7148, -1.6031,  1.1513])
Data length: 5
Using dense features with data: tensor([ 1.2971,  0.7418,  1.1908, -1.3386,  0.8438])
Data length: 5
Using dense features with data: tensor([ 0.9148,  0.8631,  1.0015, -1.3776,  0.9422])
Data length: 5
Using dense features with data: tensor([ 1.2044,  0.7632,  1.1528, -1.4405,  0.8959])
Data length: 5
Using dense features with data: tensor([ 1.6214,  0.2484,  1.9824, -0.8434,  0.4022])
Data length: 5
Using dense features with data: tensor([ 1.0326,  0.5599,  0.8540, -1.1437,  0.9295])
Data length: 5
Using dense features with data: tensor([ 1.2367,  0.3483,  1.4089, -0.9629,  0.5995])
Data length: 5
Using dense features with data: tensor([ 1.1344,  0.5303,  1.1794, -1.1278,  0.7631])
Data length: 5
Using dense features with data: tensor([ 1.0062,  0.8583,  0.8271, -1.5754,  1.0873])
Data length: 5
Using dense features with data: tensor([ 1.3315,  0.4780,  1.4977, -0.8765,  0.5295])
Data length: 5
Using dense features with data: tensor([ 1.1040,  0.7998,  1.0162, -1.5573,  0.9926])
Data length: 5
Using dense features with data: tensor([ 1.1061,  0.5261,  1.1836, -1.1522,  0.7720])
Data length: 5
Using dense features with data: tensor([ 0.9253,  0.6798,  0.8388, -1.3759,  1.0233])
Data length: 5
Using dense features with data: tensor([ 1.2800,  0.4651,  1.4544, -1.1260,  0.6588])
Data length: 5
Using dense features with data: tensor([ 1.1512,  0.5597,  1.3507, -1.2730,  0.7558])
Data length: 5
Using dense features with data: tensor([ 0.9584,  0.9751,  0.4106, -1.5330,  1.3091])
Data length: 5
Using dense features with data: tensor([ 0.9831,  0.1059,  2.2550, -1.1957,  0.4875])
Data length: 5
Using dense features with data: tensor([ 0.8722,  0.5468,  1.2327, -1.7655,  0.9613])
Data length: 5
Using dense features with data: tensor([ 0.9693,  0.5722,  1.7443, -2.2386,  0.9089])
Data length: 5
Using dense features with data: tensor([ 1.1160,  0.4835,  1.3667, -1.1186,  0.6859])
Data length: 5
Using dense features with data: tensor([ 0.8651,  0.5056,  1.2252, -1.4414,  0.8663])
Data length: 5
Using dense features with data: tensor([ 0.5901,  0.6204,  1.2830, -1.8486,  0.9641])
Data length: 5
Using dense features with data: tensor([ 1.4364,  0.4532,  1.7187, -0.1784,  0.1034])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 8: Loss=6501.7236, Heatmap=0.6945, Dense=0.2976, Output_Max=5.9299
Using dense features with data: tensor([ 0.9875,  0.5564,  0.9033, -1.1480,  0.9041])
Data length: 5
Using dense features with data: tensor([ 0.9997,  0.8228,  0.5350, -2.3577,  1.3477])
Data length: 5
Using dense features with data: tensor([ 0.9072,  0.6710,  0.4489, -1.1883,  1.2096])
Data length: 5
Using dense features with data: tensor([ 1.7681, -0.6991,  1.4311,  0.4088, -0.2782])
Data length: 5
Using dense features with data: tensor([ 1.1955,  0.5658,  1.3804, -1.1949,  0.7135])
Data length: 5
Using dense features with data: tensor([ 1.6606,  0.6337,  1.8883, -0.3030,  0.1591])
Data length: 5
Using dense features with data: tensor([ 0.9913,  0.6253,  0.7013, -1.2290,  1.0523])
Data length: 5
Using dense features with data: tensor([ 1.1907,  1.5431,  0.0755, -2.6235,  1.5420])
Data length: 5
Using dense features with data: tensor([ 1.3325,  0.6838,  1.5496, -1.0288,  0.5861])
Data length: 5
Using dense features with data: tensor([ 1.6081,  0.7305,  1.2409, -1.6862,  0.9364])
Data length: 5
Using dense features with data: tensor([ 1.2318,  0.5866,  0.8671, -1.0771,  0.8930])
Data length: 5
Using dense features with data: tensor([ 0.9295,  0.7577,  0.8467, -1.4334,  1.0373])
Data length: 5
Using dense features with data: tensor([ 1.0087,  0.5911,  0.7261, -1.2327,  1.0385])
Data length: 5
Using dense features with data: tensor([ 1.3433,  0.5241,  1.4051, -1.1037,  0.6658])
Data length: 5
Using dense features with data: tensor([ 0.8366,  0.8250,  0.6952, -1.3539,  1.0964])
Data length: 5
Using dense features with data: tensor([ 1.0600,  0.4695,  0.9368, -1.0620,  0.8480])
Data length: 5
Using dense features with data: tensor([ 1.0426,  0.4265,  1.1401, -0.9611,  0.7004])
Data length: 5
Using dense features with data: tensor([ 0.6381,  0.8370,  0.0508, -1.2027,  1.5286])
Data length: 5
Using dense features with data: tensor([ 0.8193,  0.2600,  1.5355, -1.3732,  0.7296])
Data length: 5
Using dense features with data: tensor([ 1.0991,  0.7218,  0.3170, -0.7761,  1.1830])
Data length: 5
Using dense features with data: tensor([ 1.1349,  0.3508,  1.2965, -0.8642,  0.5879])
Data length: 5
Using dense features with data: tensor([ 0.6155,  0.2119,  1.2403, -1.4284,  0.8558])
Data length: 5
Using dense features with data: tensor([ 1.2143,  1.8103, -0.1290, -2.8538,  1.6160])
Data length: 5
Using dense features with data: tensor([ 0.8993,  0.7045,  0.7331, -1.5309,  1.1242])
Data length: 5
Using dense features with data: tensor([ 1.3293,  0.5008,  1.8709, -0.5087,  0.2655])
Data length: 5
Using dense features with data: tensor([ 1.5385,  0.2725,  1.2141, -0.7951,  0.5798])
Data length: 5
Using dense features with data: tensor([ 1.0104,  0.2767,  1.2487, -0.5397,  0.4080])
Data length: 5
Using dense features with data: tensor([ 0.9913,  0.0996,  1.9054, -1.1892,  0.5580])
Data length: 5
Using dense features with data: tensor([ 0.6493,  0.6648,  1.3450, -1.8492,  0.9420])
Data length: 5
Using dense features with data: tensor([ 1.1323,  0.3738,  1.2700, -0.9600,  0.6472])
Data length: 5
Using dense features with data: tensor([ 1.4126,  1.2071,  1.0822, -1.5082,  0.9484])
Data length: 5
Using dense features with data: tensor([ 1.1378,  0.5543,  1.3864, -1.2609,  0.7380])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 9: Loss=6494.9902, Heatmap=0.6935, Dense=0.2974, Output_Max=6.3053
Using dense features with data: tensor([ 1.5896,  0.2431,  1.2052, -0.7781,  0.5733])
Data length: 5
Using dense features with data: tensor([ 0.9859,  0.7258,  0.2047, -0.4760,  1.1648])
Data length: 5
Using dense features with data: tensor([ 1.0193,  0.6610,  0.7892, -1.3733,  1.0492])
Data length: 5
Using dense features with data: tensor([ 1.1250,  0.3856,  1.3107, -1.0813,  0.6898])
Data length: 5
Using dense features with data: tensor([ 0.9856,  0.5780,  0.6877, -1.1558,  1.0341])
Data length: 5
Using dense features with data: tensor([ 1.2236,  1.8817, -0.0935, -2.8552,  1.6035])
Data length: 5
Using dense features with data: tensor([ 1.1415,  1.2567,  0.1092, -1.5838,  1.5019])
Data length: 5
Using dense features with data: tensor([ 1.0136,  0.9492,  0.7000, -1.4621,  1.1243])
Data length: 5
Using dense features with data: tensor([ 0.8713,  0.5420,  0.8040, -1.2764,  1.0087])
Data length: 5
Using dense features with data: tensor([ 1.2384,  1.0939,  0.7343, -1.5410,  1.1261])
Data length: 5
Using dense features with data: tensor([ 1.6568,  0.7420,  1.4548, -1.0881,  0.6422])
Data length: 5
Using dense features with data: tensor([ 1.2469,  0.5807,  0.8537, -1.0878,  0.9054])
Data length: 5
Using dense features with data: tensor([ 1.0931,  0.4893,  1.0469, -0.9964,  0.7607])
Data length: 5
Using dense features with data: tensor([ 1.3567,  0.8407,  0.7866, -1.3595,  1.0463])
Data length: 5
Using dense features with data: tensor([ 1.1949,  0.5480,  1.3959, -1.1683,  0.6969])
Data length: 5
Using dense features with data: tensor([ 1.0180,  0.5785,  2.4518, -0.9490,  0.3693])
Data length: 5
Using dense features with data: tensor([ 0.8521,  0.7048,  0.4788, -1.2087,  1.1936])
Data length: 5
Using dense features with data: tensor([ 1.0277,  0.4346,  1.0884, -0.9780,  0.7320])
Data length: 5
Using dense features with data: tensor([ 1.2149,  0.3792,  1.4305, -0.9885,  0.6047])
Data length: 5
Using dense features with data: tensor([ 0.8160,  0.7700,  0.6970, -1.4004,  1.1090])
Data length: 5
Using dense features with data: tensor([ 1.0109,  0.9478,  0.7684, -1.5401,  1.1080])
Data length: 5
Using dense features with data: tensor([ 1.2612,  0.5849,  0.9852, -1.1262,  0.8521])
Data length: 5
Using dense features with data: tensor([ 1.0887,  0.7603,  0.9334, -1.5361,  1.0248])
Data length: 5
Using dense features with data: tensor([ 1.8500, -0.4329,  1.6047,  0.3273, -0.2012])
Data length: 5
Using dense features with data: tensor([ 1.0541,  0.5775,  1.3158, -1.2521,  0.7606])
Data length: 5
Using dense features with data: tensor([ 1.5111,  0.7656,  1.0657, -1.6854,  1.0070])
Data length: 5
Using dense features with data: tensor([ 1.2774,  0.6935,  1.2793, -1.2992,  0.7931])
Data length: 5
Using dense features with data: tensor([ 1.2241,  0.7702,  1.0461, -1.5084,  0.9645])
Data length: 5
Using dense features with data: tensor([ 1.0973,  0.8659,  1.1687, -1.5800,  0.9339])
Data length: 5
Using dense features with data: tensor([ 1.3088,  0.7059,  1.1057, -1.3793,  0.8951])
Data length: 5
Using dense features with data: tensor([ 1.0118,  0.4907,  0.9398, -1.0441,  0.8379])
Data length: 5
Using dense features with data: tensor([ 1.0354,  0.5095,  1.1093, -1.2131,  0.8300])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 10: Loss=6487.3633, Heatmap=0.6928, Dense=0.2970, Output_Max=5.9846
Using dense features with data: tensor([ 1.0809,  0.9332,  0.7869, -1.5802,  1.1088])
Data length: 5
Using dense features with data: tensor([ 0.9263,  0.7249,  0.3844, -0.9149,  1.1730])
Data length: 5
Using dense features with data: tensor([ 1.6696,  0.6533,  1.0628, -1.2487,  0.8656])
Data length: 5
Using dense features with data: tensor([ 0.9520,  0.7472,  0.4150, -0.9468,  1.1577])
Data length: 5
Using dense features with data: tensor([ 1.3081,  0.5154,  1.3113, -1.1492,  0.7196])
Data length: 5
Using dense features with data: tensor([ 0.9358,  0.6925,  0.8585, -1.3637,  1.0089])
Data length: 5
Using dense features with data: tensor([ 1.3436,  0.7170,  1.2405, -1.3990,  0.8454])
Data length: 5
Using dense features with data: tensor([ 1.8055, -0.6454,  1.5053,  0.5194, -0.3322])
Data length: 5
Using dense features with data: tensor([ 0.8753,  0.6065,  0.6791, -1.1580,  1.0404])
Data length: 5
Using dense features with data: tensor([ 1.1262,  0.6194,  1.3528, -1.1715,  0.7137])
Data length: 5
Using dense features with data: tensor([ 0.9672,  0.9795,  0.6085, -1.7673,  1.2392])
Data length: 5
Using dense features with data: tensor([ 1.2516,  0.7871,  0.6204, -1.2481,  1.1095])
Data length: 5
Using dense features with data: tensor([ 1.0652,  0.9281,  0.8533, -1.5405,  1.0649])
Data length: 5
Using dense features with data: tensor([ 1.0336,  0.4969,  0.9143, -1.1004,  0.8775])
Data length: 5
Using dense features with data: tensor([ 0.9782,  0.9705,  0.7762, -1.6098,  1.1215])
Data length: 5
Using dense features with data: tensor([ 1.1033,  0.4779,  1.0060, -0.9281,  0.7451])
Data length: 5
Using dense features with data: tensor([ 1.2416,  0.4264,  1.5550, -1.0349,  0.5872])
Data length: 5
Using dense features with data: tensor([ 1.0065,  0.5176,  0.9587, -1.0273,  0.8199])
Data length: 5
Using dense features with data: tensor([ 0.6234,  0.7472,  2.0510, -1.5215,  0.6383])
Data length: 5
Using dense features with data: tensor([ 0.7949,  0.7274,  0.7686, -1.4423,  1.0812])
Data length: 5
Using dense features with data: tensor([ 1.0511,  0.4619,  0.9969, -1.0098,  0.7918])
Data length: 5
Using dense features with data: tensor([ 1.0203,  0.4767,  0.8554, -1.1111,  0.9147])
Data length: 5
Using dense features with data: tensor([ 0.8817,  0.5173,  1.1710, -2.1432,  1.0707])
Data length: 5
Using dense features with data: tensor([ 0.9923,  0.2361,  1.1575, -0.5744,  0.4606])
Data length: 5
Using dense features with data: tensor([ 1.0156,  0.5532,  0.8040, -1.1425,  0.9575])
Data length: 5
Using dense features with data: tensor([ 0.9229,  0.6226,  0.7148, -1.4409,  1.1103])
Data length: 5
Using dense features with data: tensor([ 1.1907,  0.5598,  1.3576, -1.0742,  0.6694])
Data length: 5
Using dense features with data: tensor([ 1.0372,  0.4638,  1.0518, -1.0656,  0.7919])
Data length: 5
Using dense features with data: tensor([ 1.3394,  0.5188,  1.3387, -1.1157,  0.6948])
Data length: 5
Using dense features with data: tensor([ 1.3517,  0.3703,  2.4799, -1.5773,  0.5665])
Data length: 5
Using dense features with data: tensor([ 1.0739,  0.4981,  0.9648, -0.9699,  0.7880])
Data length: 5
Using dense features with data: tensor([ 0.8742,  0.8092,  0.6215, -1.4874,  1.1750])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 11: Loss=6480.6123, Heatmap=0.6921, Dense=0.2967, Output_Max=6.0981
Using dense features with data: tensor([ 1.1849,  1.1388,  0.2363, -1.5336,  1.4179])
Data length: 5
Using dense features with data: tensor([ 0.2453,  0.6381,  0.6278, -1.5558,  1.1872])
Data length: 5
Using dense features with data: tensor([ 1.0256,  0.7555,  0.5826, -1.1126,  1.0884])
Data length: 5
Using dense features with data: tensor([ 1.0682,  0.8841,  0.9398, -1.7259,  1.0722])
Data length: 5
Using dense features with data: tensor([ 1.0354,  0.7027,  1.0844, -1.4665,  0.9341])
Data length: 5
Using dense features with data: tensor([ 1.2133,  1.3047,  0.4508, -1.8714,  1.3344])
Data length: 5
Using dense features with data: tensor([ 1.2449,  0.3625,  1.3580, -0.9347,  0.6028])
Data length: 5
Using dense features with data: tensor([ 1.3692, -0.3391,  1.3434,  1.0084, -0.6439])
Data length: 5
Using dense features with data: tensor([ 1.0541,  0.3999,  1.2353, -1.0192,  0.6898])
Data length: 5
Using dense features with data: tensor([ 1.2646,  0.5109,  1.4291, -1.1823,  0.6912])
Data length: 5
Using dense features with data: tensor([ 1.2623,  1.0354,  1.5604, -1.1820,  0.6483])
Data length: 5
Using dense features with data: tensor([ 0.9702,  0.7492,  0.9103, -1.5737,  1.0464])
Data length: 5
Using dense features with data: tensor([ 0.5447,  0.5062,  0.8135, -1.8727,  1.1610])
Data length: 5
Using dense features with data: tensor([ 1.3708,  0.5762,  1.2084, -1.3082,  0.8250])
Data length: 5
Using dense features with data: tensor([ 1.2545,  0.3217,  1.9739, -0.7013,  0.3414])
Data length: 5
Using dense features with data: tensor([ 1.2671,  1.9681, -0.1473, -2.7243,  1.6248])
Data length: 5
Using dense features with data: tensor([ 1.2756,  0.4747,  1.2534, -1.2047,  0.7656])
Data length: 5
Using dense features with data: tensor([ 1.1680,  0.5377,  1.2585, -1.0388,  0.6901])
Data length: 5
Using dense features with data: tensor([ 1.1309,  0.6833,  0.6092, -1.1874,  1.0968])
Data length: 5
Using dense features with data: tensor([ 1.0151,  0.5180,  0.8844, -1.1340,  0.9084])
Data length: 5
Using dense features with data: tensor([ 1.9053, -0.4912,  1.6439,  0.2701, -0.1629])
Data length: 5
Using dense features with data: tensor([ 1.0918,  0.4170,  1.1115, -0.9807,  0.7230])
Data length: 5
Using dense features with data: tensor([ 1.1170,  0.0523,  2.4083, -0.4271,  0.1755])
Data length: 5
Using dense features with data: tensor([ 0.8762,  1.0956,  0.6794, -1.4613,  1.1356])
Data length: 5
Using dense features with data: tensor([ 1.0020,  0.8166,  0.7182, -1.5217,  1.1298])
Data length: 5
Using dense features with data: tensor([ 0.9229,  0.6226,  0.7148, -1.4409,  1.1103])
Data length: 5
Using dense features with data: tensor([ 0.9293,  0.7804,  1.5438, -1.9072,  0.8903])
Data length: 5
Using dense features with data: tensor([ 1.2992,  0.4236,  1.3501, -1.0764,  0.6731])
Data length: 5
Using dense features with data: tensor([ 0.6766,  0.7407,  0.0220, -1.1343,  1.5514])
Data length: 5
Using dense features with data: tensor([ 0.9902,  0.5494,  0.8159, -1.1652,  0.9599])
Data length: 5
Using dense features with data: tensor([ 1.1028,  1.3542,  0.0532, -1.8242,  1.5417])
Data length: 5
Using dense features with data: tensor([ 1.1759,  0.8423,  1.1091, -1.5218,  0.9410])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 12: Loss=6474.4790, Heatmap=0.6914, Dense=0.2964, Output_Max=6.6853
Using dense features with data: tensor([ 1.2861,  0.5059,  1.2445, -1.2186,  0.7749])
Data length: 5
Using dense features with data: tensor([ 1.2917,  0.7349,  1.3925, -0.9730,  0.6099])
Data length: 5
Using dense features with data: tensor([ 0.8817,  0.8102,  0.7647, -1.5378,  1.1094])
Data length: 5
Using dense features with data: tensor([ 0.4938,  0.6696,  1.5194, -1.9287,  0.9035])
Data length: 5
Using dense features with data: tensor([ 0.4611,  0.3163,  1.1167, -1.6879,  0.9863])
Data length: 5
Using dense features with data: tensor([ 0.7588,  0.5705,  1.0356, -1.6748,  1.0170])
Data length: 5
Using dense features with data: tensor([ 1.1454,  0.4874,  0.9914, -1.0530,  0.8155])
Data length: 5
Using dense features with data: tensor([ 1.1921,  1.2604,  0.3755, -1.8323,  1.3687])
Data length: 5
Using dense features with data: tensor([ 0.8650,  0.8076,  1.7794, -2.4109,  0.9350])
Data length: 5
Using dense features with data: tensor([ 0.9008,  0.6892,  0.3970, -0.8378,  1.1283])
Data length: 5
Using dense features with data: tensor([ 0.9585,  0.8075,  0.6034, -1.4631,  1.1796])
Data length: 5
Using dense features with data: tensor([ 1.0770,  0.4879,  1.1145, -0.9784,  0.7205])
Data length: 5
Using dense features with data: tensor([ 1.0013,  0.4789,  1.0474, -0.9748,  0.7495])
Data length: 5
Using dense features with data: tensor([ 1.2365,  0.7053,  2.5959, -1.6233,  0.5588])
Data length: 5
Using dense features with data: tensor([ 1.1946,  0.4374,  1.3004, -1.1326,  0.7165])
Data length: 5
Using dense features with data: tensor([ 0.7336,  0.5445,  1.1329, -1.5524,  0.9404])
Data length: 5
Using dense features with data: tensor([ 1.0067,  0.9127,  0.4534, -2.4705,  1.3893])
Data length: 5
Using dense features with data: tensor([ 0.8972,  0.8115,  0.6221, -1.5376,  1.1863])
Data length: 5
Using dense features with data: tensor([ 1.1908,  0.5658,  1.3804, -1.1949,  0.7135])
Data length: 5
Using dense features with data: tensor([ 1.2933,  0.6691,  1.3654, -1.4094,  0.8012])
Data length: 5
Using dense features with data: tensor([ 1.2229,  1.2801,  0.3689, -1.8893,  1.3780])
Data length: 5
Using dense features with data: tensor([ 1.2177,  1.2679,  0.3600, -1.8588,  1.3795])
Data length: 5
Using dense features with data: tensor([ 1.1751,  0.7794,  1.4668, -0.7698,  0.4833])
Data length: 5
Using dense features with data: tensor([ 0.7972,  0.7608,  2.4922, -1.4389,  0.5236])
Data length: 5
Using dense features with data: tensor([ 0.4484,  0.6305,  0.6069, -1.2424,  1.1164])
Data length: 5
Using dense features with data: tensor([ 1.1729,  0.7319,  1.2934, -1.3916,  0.8220])
Data length: 5
Using dense features with data: tensor([ 0.6955,  0.7427,  0.1055, -1.1408,  1.4786])
Data length: 5
Using dense features with data: tensor([ 1.0415,  0.4824,  0.9587, -1.0346,  0.8235])
Data length: 5
Using dense features with data: tensor([ 1.3708,  0.5762,  1.2936, -1.2018,  0.7487])
Data length: 5
Using dense features with data: tensor([ 1.0331,  0.6069,  0.9189, -1.1221,  0.8846])
Data length: 5
Using dense features with data: tensor([ 0.9909,  0.6546,  0.7339, -1.2099,  1.0256])
Data length: 5
Using dense features with data: tensor([ 0.9315,  0.7860,  0.6485, -1.3757,  1.1303])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 13: Loss=6466.2007, Heatmap=0.6907, Dense=0.2960, Output_Max=6.5015
Using dense features with data: tensor([ 0.8161,  0.7260,  0.3400, -1.2200,  1.2990])
Data length: 5
Using dense features with data: tensor([ 1.0178,  0.9765,  0.6752, -1.6265,  1.1773])
Data length: 5
Using dense features with data: tensor([ 1.1834,  0.3118,  1.4414, -1.1350,  0.6670])
Data length: 5
Using dense features with data: tensor([ 1.0355,  0.4230,  1.1828, -1.0095,  0.7065])
Data length: 5
Using dense features with data: tensor([ 1.1854,  0.8517,  1.2680, -1.2221,  0.7670])
Data length: 5
Using dense features with data: tensor([ 1.0539,  0.9288,  0.9777, -1.4647,  0.9822])
Data length: 5
Using dense features with data: tensor([ 0.8842,  0.4932,  0.4421, -0.6494,  0.9731])
Data length: 5
Using dense features with data: tensor([ 1.1208,  1.2837,  0.0602, -1.6231,  1.5337])
Data length: 5
Using dense features with data: tensor([ 1.0899,  0.7260,  1.0244, -1.5585,  0.9893])
Data length: 5
Using dense features with data: tensor([ 0.4961,  0.5961,  1.6159, -1.2950,  0.6756])
Data length: 5
Using dense features with data: tensor([ 1.6732,  0.7102,  1.3629, -1.5863,  0.8610])
Data length: 5
Using dense features with data: tensor([ 0.9056,  0.6009,  0.5838, -0.9834,  1.0351])
Data length: 5
Using dense features with data: tensor([ 1.0141,  0.4948,  0.8831, -1.0468,  0.8700])
Data length: 5
Using dense features with data: tensor([ 1.0109,  0.5379,  0.8977, -1.1235,  0.8967])
Data length: 5
Using dense features with data: tensor([ 1.0985,  0.7263,  0.5311, -1.1075,  1.1236])
Data length: 5
Using dense features with data: tensor([ 0.9911,  0.8351,  0.4438, -2.3712,  1.3858])
Data length: 5
Using dense features with data: tensor([ 1.2405,  1.3474,  0.5438, -1.8828,  1.2896])
Data length: 5
Using dense features with data: tensor([ 0.9689,  0.6664,  0.5169, -1.1585,  1.1511])
Data length: 5
Using dense features with data: tensor([ 1.0976,  0.7745,  1.1237, -1.4646,  0.9164])
Data length: 5
Using dense features with data: tensor([ 0.9285,  0.7085,  0.7954, -1.4764,  1.0766])
Data length: 5
Using dense features with data: tensor([ 1.1665,  1.1666,  0.2692, -1.5282,  1.3964])
Data length: 5
Using dense features with data: tensor([ 1.3200,  0.5479,  1.3813, -1.2024,  0.7163])
Data length: 5
Using dense features with data: tensor([ 1.3500,  0.3230,  2.5811, -1.4055,  0.4986])
Data length: 5
Using dense features with data: tensor([ 0.5450,  0.5872,  1.5328, -1.4036,  0.7414])
Data length: 5
Using dense features with data: tensor([ 0.9885,  0.8541,  0.5012, -1.5040,  1.2491])
Data length: 5
Using dense features with data: tensor([ 1.1162,  0.5363,  1.1824, -1.2393,  0.8089])
Data length: 5
Using dense features with data: tensor([ 0.6433,  0.7909,  0.0486, -1.1910,  1.5300])
Data length: 5
Using dense features with data: tensor([ 1.7450,  0.6226,  1.5426, -1.2676,  0.6878])
Data length: 5
Using dense features with data: tensor([ 0.9753,  0.7584,  0.5945, -1.4509,  1.1819])
Data length: 5
Using dense features with data: tensor([ 1.4745,  0.1736,  1.5965,  0.4291, -0.2626])
Data length: 5
Using dense features with data: tensor([ 1.3149,  0.7314,  1.2556, -1.4061,  0.8419])
Data length: 5
Using dense features with data: tensor([ 1.3164,  0.5997,  1.3809, -1.1520,  0.6953])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 14: Loss=6460.5239, Heatmap=0.6900, Dense=0.2958, Output_Max=5.6316
Using dense features with data: tensor([ 1.1621,  1.0379,  0.3768, -1.6623,  1.3479])
Data length: 5
Using dense features with data: tensor([ 1.1334,  1.2847,  0.0253, -1.6039,  1.5550])
Data length: 5
Using dense features with data: tensor([ 1.0991,  0.7955,  1.0162, -1.5573,  0.9926])
Data length: 5
Using dense features with data: tensor([ 1.7154, -0.8790,  1.5579,  0.3118, -0.1975])
Data length: 5
Using dense features with data: tensor([ 1.0292,  0.7714,  0.6677, -1.1937,  1.0608])
Data length: 5
Using dense features with data: tensor([ 1.0912,  0.6490,  1.1825, -1.4439,  0.8846])
Data length: 5
Using dense features with data: tensor([ 1.1352,  0.4800,  1.0363, -1.1107,  0.8200])
Data length: 5
Using dense features with data: tensor([ 0.9745,  0.6663,  0.4740, -1.1767,  1.1878])
Data length: 5
Using dense features with data: tensor([ 0.8990,  0.5852,  0.7898, -1.4757,  1.0794])
Data length: 5
Using dense features with data: tensor([ 0.9858,  0.5688,  1.5815, -2.0861,  0.9221])
Data length: 5
Using dense features with data: tensor([ 1.0955,  0.7344,  0.6369, -1.1509,  1.0654])
Data length: 5
Using dense features with data: tensor([ 1.2667,  0.4200,  1.4305, -0.9885,  0.6047])
Data length: 5
Using dense features with data: tensor([ 1.1340, -0.0308,  2.2460, -0.6199,  0.2693])
Data length: 5
Using dense features with data: tensor([ 1.1940,  0.4120,  1.3523, -1.0607,  0.6651])
Data length: 5
Using dense features with data: tensor([ 0.9905,  0.5806,  0.8339, -1.2706,  0.9900])
Data length: 5
Using dense features with data: tensor([ 1.1091,  0.4710,  1.0065, -1.0080,  0.7861])
Data length: 5
Using dense features with data: tensor([ 1.1340,  1.3177,  0.3994, -2.5403,  1.4148])
Data length: 5
Using dense features with data: tensor([ 1.3846,  0.5742,  1.1409, -1.3442,  0.8670])
Data length: 5
Using dense features with data: tensor([ 0.7368,  0.5228,  1.1519, -1.5863,  0.9427])
Data length: 5
Using dense features with data: tensor([ 1.1168,  0.4495,  1.1135, -1.0296,  0.7463])
Data length: 5
Using dense features with data: tensor([ 0.9734,  0.5689,  0.5065, -0.8812,  1.0491])
Data length: 5
Using dense features with data: tensor([ 1.1466,  0.5115,  0.9559, -1.0787,  0.8457])
Data length: 5
Using dense features with data: tensor([ 1.0784,  0.4853,  1.1292, -1.1539,  0.7962])
Data length: 5
Using dense features with data: tensor([ 1.1231,  0.4590,  2.5551, -0.6194,  0.2378])
Data length: 5
Using dense features with data: tensor([ 1.4800,  0.0416,  1.5890,  0.4559, -0.2794])
Data length: 5
Using dense features with data: tensor([ 1.1090,  0.9612,  0.8607, -1.6543,  1.0910])
Data length: 5
Using dense features with data: tensor([ 1.0823,  0.4831,  1.0777, -0.9821,  0.7390])
Data length: 5
Using dense features with data: tensor([ 1.3187,  0.7045,  1.3194, -1.3465,  0.7955])
Data length: 5
Using dense features with data: tensor([ 1.1121,  0.3860,  1.2626, -1.0961,  0.7149])
Data length: 5
Using dense features with data: tensor([ 0.9204,  1.0129,  0.3862, -1.6534,  1.3413])
Data length: 5
Using dense features with data: tensor([ 0.7292,  0.7652,  1.2218, -2.5159,  1.1187])
Data length: 5
Using dense features with data: tensor([ 0.9582,  0.5492,  0.2975, -0.5461,  1.0720])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 15: Loss=6454.0396, Heatmap=0.6892, Dense=0.2955, Output_Max=5.1387
Using dense features with data: tensor([ 0.8926,  0.5238,  1.3630, -2.2382,  1.0238])
Data length: 5
Using dense features with data: tensor([ 1.0105,  0.6216,  0.6076, -1.0399,  1.0420])
Data length: 5
Using dense features with data: tensor([ 1.1364,  0.5194,  1.1910, -1.1460,  0.7661])
Data length: 5
Using dense features with data: tensor([ 1.2043, -0.0163,  2.1642, -0.9606,  0.4177])
Data length: 5
Using dense features with data: tensor([ 0.9636,  0.6539,  0.8768, -1.4088,  1.0141])
Data length: 5
Using dense features with data: tensor([ 1.1269,  0.9480,  0.8317, -1.6691,  1.1085])
Data length: 5
Using dense features with data: tensor([ 0.7635,  0.5784,  1.0639, -1.6570,  1.0000])
Data length: 5
Using dense features with data: tensor([ 1.3123,  0.6510,  1.5280, -0.6400,  0.3966])
Data length: 5
Using dense features with data: tensor([ 1.1780,  0.8199,  0.7115, -1.9248,  1.2167])
Data length: 5
Using dense features with data: tensor([ 1.1240,  0.5372,  0.9881, -1.1016,  0.8397])
Data length: 5
Using dense features with data: tensor([ 0.5865,  0.4282,  1.1271, -1.4712,  0.9171])
Data length: 5
Using dense features with data: tensor([ 1.2581,  0.6568,  0.8269, -1.2346,  0.9806])
Data length: 5
Using dense features with data: tensor([ 0.9596,  0.0843,  2.1096, -1.2249,  0.5261])
Data length: 5
Using dense features with data: tensor([ 1.0065,  0.5376,  0.8330, -1.0871,  0.9170])
Data length: 5
Using dense features with data: tensor([ 1.0965,  1.2915,  0.1946, -1.8272,  1.4647])
Data length: 5
Using dense features with data: tensor([ 1.1827,  0.6171,  0.7831, -1.2105,  0.9966])
Data length: 5
Using dense features with data: tensor([ 0.9988,  0.5351,  0.8781, -1.1620,  0.9237])
Data length: 5
Using dense features with data: tensor([ 1.2745,  0.7909,  1.1781, -1.4582,  0.8912])
Data length: 5
Using dense features with data: tensor([ 1.1942,  0.4710,  2.4074, -1.9426,  0.6790])
Data length: 5
Using dense features with data: tensor([ 1.0655,  0.7196,  0.6961, -2.1198,  1.2535])
Data length: 5
Using dense features with data: tensor([ 1.8273, -0.6607,  1.5967,  0.3714, -0.2286])
Data length: 5
Using dense features with data: tensor([ 1.0265,  0.7753,  0.5642, -2.2183,  1.3217])
Data length: 5
Using dense features with data: tensor([ 1.1357,  0.3960,  1.2767, -1.0373,  0.6823])
Data length: 5
Using dense features with data: tensor([ 0.9595,  0.9649,  0.5120, -1.5122,  1.2443])
Data length: 5
Using dense features with data: tensor([ 0.5728,  0.4494,  1.1856, -1.4245,  0.8767])
Data length: 5
Using dense features with data: tensor([ 1.0899,  0.3870,  1.2060, -0.9044,  0.6434])
Data length: 5
Using dense features with data: tensor([ 1.6606,  0.6337,  1.8883, -0.3030,  0.1591])
Data length: 5
Using dense features with data: tensor([ 1.7314, -0.5830,  1.7459, -0.0944,  0.0540])
Data length: 5
Using dense features with data: tensor([ 0.4484,  0.6305,  0.5691, -1.1393,  1.1075])
Data length: 5
Using dense features with data: tensor([ 1.0251,  0.5852,  0.9060, -1.1325,  0.8960])
Data length: 5
Using dense features with data: tensor([ 1.3177,  0.5819,  1.4036, -1.1412,  0.6826])
Data length: 5
Using dense features with data: tensor([ 1.1656,  0.6483,  0.6908, -1.2031,  1.0496])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 16: Loss=6446.6450, Heatmap=0.6886, Dense=0.2951, Output_Max=5.7383
Using dense features with data: tensor([ 0.8990,  0.5852,  0.8127, -1.4410,  1.0573])
Data length: 5
Using dense features with data: tensor([ 0.8709,  0.6867,  0.4800, -1.1701,  1.1815])
Data length: 5
Using dense features with data: tensor([ 0.8544,  0.4160,  1.2431, -1.8393,  0.9765])
Data length: 5
Using dense features with data: tensor([ 1.0657,  1.0660,  0.4666, -2.5322,  1.3886])
Data length: 5
Using dense features with data: tensor([ 1.0483,  0.7655,  0.4941, -2.2350,  1.3532])
Data length: 5
Using dense features with data: tensor([ 1.2253,  0.7285,  1.1784, -1.4389,  0.8846])
Data length: 5
Using dense features with data: tensor([ 1.2846,  0.7260,  1.2105, -1.2934,  0.8185])
Data length: 5
Using dense features with data: tensor([ 0.9540,  0.9920,  0.6047, -1.7802,  1.2434])
Data length: 5
Using dense features with data: tensor([ 0.7343,  0.0472,  1.5839, -1.0909,  0.6031])
Data length: 5
Using dense features with data: tensor([ 0.6539,  0.2340,  1.5325, -1.3512,  0.7226])
Data length: 5
Using dense features with data: tensor([ 1.4738, -0.0816,  1.6416,  0.6961, -0.4011])
Data length: 5
Using dense features with data: tensor([ 1.1233,  1.2942,  0.2520, -1.8075,  1.4323])
Data length: 5
Using dense features with data: tensor([ 0.9339,  0.8280,  0.8048, -1.5599,  1.0945])
Data length: 5
Using dense features with data: tensor([ 1.1454,  0.4874,  0.9914, -1.0530,  0.8155])
Data length: 5
Using dense features with data: tensor([ 1.1527,  0.5195,  1.0327, -1.1046,  0.8190])
Data length: 5
Using dense features with data: tensor([ 0.8111,  0.7663,  0.7169, -1.4687,  1.1167])
Data length: 5
Using dense features with data: tensor([ 0.3326,  0.6790,  0.6091, -1.4872,  1.1821])
Data length: 5
Using dense features with data: tensor([ 0.9292,  0.9555,  0.5000, -1.5078,  1.2506])
Data length: 5
Using dense features with data: tensor([ 1.2701,  0.6511,  2.5946, -1.5301,  0.5328])
Data length: 5
Using dense features with data: tensor([ 0.9120,  0.6185,  0.6627, -1.1624,  1.0526])
Data length: 5
Using dense features with data: tensor([ 0.8026,  0.7389,  0.4249, -1.1930,  1.2286])
Data length: 5
Using dense features with data: tensor([ 1.1658,  1.0840,  0.3243, -1.5961,  1.3703])
Data length: 5
Using dense features with data: tensor([ 1.0918,  0.4823,  1.1224, -1.1397,  0.7930])
Data length: 5
Using dense features with data: tensor([ 1.1865,  0.4766,  1.2267, -1.0761,  0.7201])
Data length: 5
Using dense features with data: tensor([ 1.0369,  0.5970,  0.8985, -1.2646,  0.9531])
Data length: 5
Using dense features with data: tensor([ 1.2871,  0.5501,  1.9980, -1.7435,  0.7175])
Data length: 5
Using dense features with data: tensor([ 1.3557,  1.0763,  1.6700, -1.0922,  0.5792])
Data length: 5
Using dense features with data: tensor([ 0.8551,  0.5030,  0.8053, -1.2734,  1.0069])
Data length: 5
Using dense features with data: tensor([ 1.4738, -0.0816,  1.6097,  0.7668, -0.4445])
Data length: 5
Using dense features with data: tensor([ 1.0278,  0.9573,  0.4838, -2.5351,  1.3822])
Data length: 5
Using dense features with data: tensor([ 1.0194,  0.9224,  0.8846, -1.5011,  1.0383])
Data length: 5
Using dense features with data: tensor([ 1.2118,  0.5845,  0.8230, -1.1731,  0.9590])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 17: Loss=6440.4648, Heatmap=0.6880, Dense=0.2948, Output_Max=6.8805
Using dense features with data: tensor([ 1.0501,  0.4765,  1.0083, -1.1423,  0.8476])
Data length: 5
Using dense features with data: tensor([ 1.1350,  0.4647,  1.3109, -1.1819,  0.7337])
Data length: 5
Using dense features with data: tensor([ 0.9067,  0.8076,  0.4245, -1.0871,  1.1985])
Data length: 5
Using dense features with data: tensor([ 1.1284,  0.7878,  0.9439, -1.4923,  1.0068])
Data length: 5
Using dense features with data: tensor([ 1.2723,  0.3624,  1.9700, -0.7963,  0.3842])
Data length: 5
Using dense features with data: tensor([ 0.8334,  0.4863,  0.7230, -1.1058,  0.9917])
Data length: 5
Using dense features with data: tensor([ 1.1378,  0.5543,  1.3158, -1.2521,  0.7606])
Data length: 5
Using dense features with data: tensor([ 1.2770,  0.5835,  1.0554, -1.2267,  0.8603])
Data length: 5
Using dense features with data: tensor([ 0.8937,  0.4900,  0.9337, -1.0345,  0.8366])
Data length: 5
Using dense features with data: tensor([ 0.9258,  1.0466,  0.3878, -1.5818,  1.3304])
Data length: 5
Using dense features with data: tensor([ 0.9787,  0.5577,  1.8198, -2.1778,  0.8747])
Data length: 5
Using dense features with data: tensor([ 1.4219,  0.3878,  1.1072, -0.8915,  0.6779])
Data length: 5
Using dense features with data: tensor([ 1.3054,  0.7254,  1.1541, -1.3228,  0.8534])
Data length: 5
Using dense features with data: tensor([ 0.9598,  0.9923,  0.6387, -1.6691,  1.2054])
Data length: 5
Using dense features with data: tensor([ 0.2617,  0.6253,  0.7144, -1.3670,  1.0892])
Data length: 5
Using dense features with data: tensor([ 0.9925,  0.6581,  0.5074, -1.1695,  1.1615])
Data length: 5
Using dense features with data: tensor([ 0.3645,  0.7099,  0.4435, -1.2204,  1.2223])
Data length: 5
Using dense features with data: tensor([ 1.3580,  0.4687,  1.0972, -1.0017,  0.7399])
Data length: 5
Using dense features with data: tensor([ 1.9053, -0.4912,  1.6044,  0.3367, -0.2069])
Data length: 5
Using dense features with data: tensor([ 1.1344,  0.5303,  1.1794, -1.1278,  0.7631])
Data length: 5
Using dense features with data: tensor([ 1.0537,  0.4146,  1.2073, -1.0127,  0.6979])
Data length: 5
Using dense features with data: tensor([ 0.9860,  0.8705,  0.5363, -1.5897,  1.2454])
Data length: 5
Using dense features with data: tensor([ 1.2118,  0.5845,  0.8331, -1.0854,  0.9161])
Data length: 5
Using dense features with data: tensor([ 0.6880,  0.9841,  0.4160, -1.4558,  1.2924])
Data length: 5
Using dense features with data: tensor([ 1.0985,  0.7263,  0.6465, -1.1421,  1.0557])
Data length: 5
Using dense features with data: tensor([ 1.0053,  0.6230,  0.6945, -1.2329,  1.0578])
Data length: 5
Using dense features with data: tensor([ 0.5805,  0.7386,  1.9679, -1.6275,  0.6910])
Data length: 5
Using dense features with data: tensor([ 1.3198,  0.7057,  0.8796, -1.2143,  0.9439])
Data length: 5
Using dense features with data: tensor([ 1.3461,  1.0698,  1.6011, -1.1909,  0.6395])
Data length: 5
Using dense features with data: tensor([ 0.9130,  0.7004,  0.7505, -1.4375,  1.0897])
Data length: 5
Using dense features with data: tensor([ 1.1938,  0.5587,  1.3879, -1.1974,  0.7119])
Data length: 5
Using dense features with data: tensor([ 0.9661,  0.8700,  0.7902, -1.5597,  1.1019])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 18: Loss=6433.6523, Heatmap=0.6871, Dense=0.2945, Output_Max=5.2964
Using dense features with data: tensor([ 1.8948,  0.0036,  1.7567,  0.2350, -0.1330])
Data length: 5
Using dense features with data: tensor([ 1.2671,  0.3706,  1.4086, -0.9083,  0.5727])
Data length: 5
Using dense features with data: tensor([ 1.2879,  0.4541,  1.9845, -0.9454,  0.4446])
Data length: 5
Using dense features with data: tensor([ 1.3162,  0.6508,  0.8423, -1.1839,  0.9524])
Data length: 5
Using dense features with data: tensor([ 1.3140,  0.4606,  1.3985, -1.0405,  0.6397])
Data length: 5
Using dense features with data: tensor([ 1.3413,  0.5643,  1.4257, -1.0632,  0.6407])
Data length: 5
Using dense features with data: tensor([ 0.8506,  0.7653,  1.6274, -1.6558,  0.7940])
Data length: 5
Using dense features with data: tensor([ 0.9834,  1.1862,  1.0358, -1.5126,  0.9704])
Data length: 5
Using dense features with data: tensor([ 1.0080,  0.6045,  0.7377, -1.2399,  1.0341])
Data length: 5
Using dense features with data: tensor([ 0.9912,  0.9017,  0.6573, -1.4206,  1.1374])
Data length: 5
Using dense features with data: tensor([ 1.1121,  0.3860,  1.2626, -1.0961,  0.7149])
Data length: 5
Using dense features with data: tensor([ 0.7205,  0.6575,  0.2640, -1.1726,  1.3494])
Data length: 5
Using dense features with data: tensor([ 1.0148,  0.7937,  0.3505, -2.3203,  1.4209])
Data length: 5
Using dense features with data: tensor([ 1.1834,  0.6076,  0.7831, -1.2105,  0.9966])
Data length: 5
Using dense features with data: tensor([ 0.8050,  0.7858,  0.5422, -1.3239,  1.1821])
Data length: 5
Using dense features with data: tensor([ 1.4121,  0.9938,  1.9221, -0.8802,  0.4295])
Data length: 5
Using dense features with data: tensor([ 1.1176,  0.7382,  0.6901, -1.0876,  1.0054])
Data length: 5
Using dense features with data: tensor([ 1.0187,  0.0848,  2.3014, -1.1541,  0.4648])
Data length: 5
Using dense features with data: tensor([ 0.7812,  0.5059,  1.2333, -1.5502,  0.8988])
Data length: 5
Using dense features with data: tensor([ 1.0141,  0.4948,  0.8424, -1.0798,  0.9083])
Data length: 5
Using dense features with data: tensor([ 1.3293,  0.8586,  0.8320, -1.3322,  1.0125])
Data length: 5
Using dense features with data: tensor([ 0.9352,  0.9804,  0.3476, -1.6619,  1.3646])
Data length: 5
Using dense features with data: tensor([ 0.6976,  0.7283,  1.1062, -2.4492,  1.1466])
Data length: 5
Using dense features with data: tensor([ 1.5978,  1.0442,  0.8506, -1.5630,  1.0724])
Data length: 5
Using dense features with data: tensor([ 0.8635,  0.6564,  0.7295, -1.4859,  1.1144])
Data length: 5
Using dense features with data: tensor([ 1.0057,  0.5399,  0.8147, -1.2252,  0.9840])
Data length: 5
Using dense features with data: tensor([ 1.3320, -0.3258,  1.4739,  0.7510, -0.4712])
Data length: 5
Using dense features with data: tensor([ 0.9367,  0.4476,  1.3242, -1.5390,  0.8603])
Data length: 5
Using dense features with data: tensor([ 1.2432,  0.6272,  0.8269, -1.2346,  0.9806])
Data length: 5
Using dense features with data: tensor([ 1.1007,  0.4735,  1.1156, -1.0307,  0.7459])
Data length: 5
Using dense features with data: tensor([ 1.3048,  0.7898,  0.8147, -1.3111,  1.0148])
Data length: 5
Using dense features with data: tensor([ 1.4570,  0.2537,  2.3054, -0.9816,  0.4025])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 19: Loss=6426.9331, Heatmap=0.6865, Dense=0.2942, Output_Max=5.6631
Using dense features with data: tensor([ 0.7142,  0.6468,  1.0341, -2.3032,  1.1488])
Data length: 5
Using dense features with data: tensor([ 1.0177,  0.6257,  0.9334, -1.1076,  0.8706])
Data length: 5
Using dense features with data: tensor([ 1.4641,  2.2067, -0.0734, -2.6908,  1.5981])
Data length: 5
Using dense features with data: tensor([ 1.1213,  0.4270,  1.2789, -1.0261,  0.6761])
Data length: 5
Using dense features with data: tensor([ 1.3289,  0.7236,  1.4767, -1.1310,  0.6536])
Data length: 5
Using dense features with data: tensor([ 0.9920,  0.5689,  0.8040, -1.1425,  0.9575])
Data length: 5
Using dense features with data: tensor([ 0.8559,  0.4854,  0.5873, -0.8198,  0.9492])
Data length: 5
Using dense features with data: tensor([ 1.0786,  1.3158,  0.1492, -1.7824,  1.4873])
Data length: 5
Using dense features with data: tensor([ 1.0679,  0.4960,  1.0533, -1.1410,  0.8253])
Data length: 5
Using dense features with data: tensor([ 1.0732,  0.9167,  1.0222, -1.4340,  0.9515])
Data length: 5
Using dense features with data: tensor([ 1.2461,  0.7280,  1.2618, -1.4382,  0.8506])
Data length: 5
Using dense features with data: tensor([ 1.3594,  0.6660,  1.2871, -1.3563,  0.8115])
Data length: 5
Using dense features with data: tensor([ 0.6371,  0.8941,  0.2083, -1.4572,  1.4288])
Data length: 5
Using dense features with data: tensor([ 0.3995,  0.6857,  0.5905, -1.4704,  1.1889])
Data length: 5
Using dense features with data: tensor([ 0.8990,  0.9730,  0.3851, -1.6734,  1.3446])
Data length: 5
Using dense features with data: tensor([ 0.8321,  1.0769,  0.6327, -1.3517,  1.1330])
Data length: 5
Using dense features with data: tensor([ 0.9432,  0.4959,  0.3134, -0.5176,  1.0263])
Data length: 5
Using dense features with data: tensor([ 0.9437,  0.1624,  1.7498, -1.3500,  0.6571])
Data length: 5
Using dense features with data: tensor([ 0.9923,  0.2361,  1.1575, -0.5744,  0.4606])
Data length: 5
Using dense features with data: tensor([ 0.9370,  0.1219,  1.8497, -1.2388,  0.5901])
Data length: 5
Using dense features with data: tensor([ 1.1550,  0.0575,  2.0575, -0.4040,  0.1939])
Data length: 5
Using dense features with data: tensor([ 1.0153,  0.6835,  1.0197, -1.4193,  0.9478])
Data length: 5
Using dense features with data: tensor([ 0.6409,  0.8584, -0.0057, -1.2261,  1.5754])
Data length: 5
Using dense features with data: tensor([ 1.1282,  0.4799,  1.0607, -1.0259,  0.7687])
Data length: 5
Using dense features with data: tensor([ 0.5168,  0.5747,  1.3149, -1.6095,  0.8858])
Data length: 5
Using dense features with data: tensor([ 1.7236, -0.8439,  1.5359,  0.2727, -0.1757])
Data length: 5
Using dense features with data: tensor([ 1.0166,  0.5071,  0.9592, -1.1110,  0.8586])
Data length: 5
Using dense features with data: tensor([ 0.9646,  0.8524,  0.5907, -1.4496,  1.1838])
Data length: 5
Using dense features with data: tensor([ 0.9428,  0.5067,  1.2157, -1.5640,  0.9101])
Data length: 5
Using dense features with data: tensor([ 1.1764,  0.3685,  1.4683, -1.0940,  0.6404])
Data length: 5
Using dense features with data: tensor([ 0.9304,  0.7290,  0.4150, -0.9468,  1.1577])
Data length: 5
Using dense features with data: tensor([ 1.1410,  1.1684,  1.4163, -1.3763,  0.7711])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 20: Loss=6420.3545, Heatmap=0.6857, Dense=0.2939, Output_Max=6.9647
Using dense features with data: tensor([ 1.0770,  0.4879,  1.0766, -1.0199,  0.7584])
Data length: 5
Using dense features with data: tensor([ 1.0553,  0.5508,  0.9911, -1.0891,  0.8325])
Data length: 5
Using dense features with data: tensor([ 1.1224,  0.8329,  1.2059, -1.5517,  0.9101])
Data length: 5
Using dense features with data: tensor([ 0.9924,  0.7943,  0.6206, -1.4378,  1.1633])
Data length: 5
Using dense features with data: tensor([ 0.8298,  0.4299,  0.4256, -0.6033,  0.9565])
Data length: 5
Using dense features with data: tensor([ 1.0277,  0.4346,  1.1401, -0.9611,  0.7004])
Data length: 5
Using dense features with data: tensor([ 0.9148,  0.8631,  1.0015, -1.3776,  0.9422])
Data length: 5
Using dense features with data: tensor([ 0.8412,  0.7077,  0.3854, -1.1935,  1.2584])
Data length: 5
Using dense features with data: tensor([ 1.0464,  0.5524,  1.0822, -0.9968,  0.7443])
Data length: 5
Using dense features with data: tensor([ 1.0460,  0.4912,  1.2622, -1.0825,  0.7089])
Data length: 5
Using dense features with data: tensor([ 1.1311,  0.4885,  1.4498, -1.1089,  0.6529])
Data length: 5
Using dense features with data: tensor([ 1.3109,  0.6479,  1.4004, -1.1556,  0.6899])
Data length: 5
Using dense features with data: tensor([ 0.9235,  0.6589,  0.5338, -1.1127,  1.1235])
Data length: 5
Using dense features with data: tensor([ 1.0297,  0.5068,  0.8734, -1.1739,  0.9311])
Data length: 5
Using dense features with data: tensor([ 1.2659,  0.4615,  2.4615, -1.8598,  0.6470])
Data length: 5
Using dense features with data: tensor([ 0.8890, -0.1635,  1.9002, -0.3830,  0.1989])
Data length: 5
Using dense features with data: tensor([ 1.0726,  0.3916,  1.1979, -1.0474,  0.7184])
Data length: 5
Using dense features with data: tensor([ 1.6176,  0.6477,  1.0640, -1.2373,  0.8606])
Data length: 5
Using dense features with data: tensor([ 0.9740,  0.8909,  0.4452, -1.4809,  1.2787])
Data length: 5
Using dense features with data: tensor([ 1.1008,  0.5088,  1.1054, -1.0640,  0.7663])
Data length: 5
Using dense features with data: tensor([ 1.1168,  0.4495,  1.1333, -1.0078,  0.7268])
Data length: 5
Using dense features with data: tensor([ 1.3335,  0.5147,  1.3414, -1.1448,  0.7065])
Data length: 5
Using dense features with data: tensor([ 1.1478,  0.8023,  1.2764, -1.4943,  0.8639])
Data length: 5
Using dense features with data: tensor([ 1.1550,  0.7045,  0.8573, -1.1365,  0.9245])
Data length: 5
Using dense features with data: tensor([ 0.3246,  0.6513,  0.6286, -1.4085,  1.1510])
Data length: 5
Using dense features with data: tensor([ 0.9028,  0.4579,  0.9909, -1.0435,  0.8112])
Data length: 5
Using dense features with data: tensor([ 0.9809,  0.4275,  0.8951, -1.0642,  0.8715])
Data length: 5
Using dense features with data: tensor([ 0.8086,  0.7463,  0.4249, -1.1930,  1.2286])
Data length: 5
Using dense features with data: tensor([ 1.1790,  0.5448,  1.3694, -1.0805,  0.6680])
Data length: 5
Using dense features with data: tensor([ 1.2371,  0.5506,  1.1584, -1.1300,  0.7730])
Data length: 5
Using dense features with data: tensor([ 0.7753,  0.5924,  0.9833, -1.7604,  1.0614])
Data length: 5
Using dense features with data: tensor([ 1.0430,  0.9211,  0.7963, -1.5754,  1.1028])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 21: Loss=6413.1738, Heatmap=0.6850, Dense=0.2936, Output_Max=5.7329
Using dense features with data: tensor([ 0.8559,  0.4854,  0.5530, -0.8433,  0.9904])
Data length: 5
Using dense features with data: tensor([ 0.9879,  0.2393,  1.0552, -0.6843,  0.5754])
Data length: 5
Using dense features with data: tensor([ 0.8055,  0.4983,  1.1220, -2.0582,  1.0717])
Data length: 5
Using dense features with data: tensor([ 1.7231,  0.6696,  1.0628, -1.2487,  0.8656])
Data length: 5
Using dense features with data: tensor([ 1.0354,  0.5095,  1.1726, -1.1595,  0.7798])
Data length: 5
Using dense features with data: tensor([ 0.2617,  0.6253,  0.7936, -1.4384,  1.0666])
Data length: 5
Using dense features with data: tensor([ 1.3692, -0.3391,  1.4119,  1.0573, -0.6428])
Data length: 5
Using dense features with data: tensor([ 0.9664,  0.3349,  1.6243, -1.4213,  0.7188])
Data length: 5
Using dense features with data: tensor([ 1.0046,  0.5583,  0.9304, -1.3009,  0.9499])
Data length: 5
Using dense features with data: tensor([ 1.1103,  0.6806,  0.7148, -1.9881,  1.2257])
Data length: 5
Using dense features with data: tensor([ 1.1240,  0.5245,  1.1819, -1.1470,  0.7704])
Data length: 5
Using dense features with data: tensor([ 0.9879,  0.2393,  1.1019, -0.6479,  0.5316])
Data length: 5
Using dense features with data: tensor([ 1.3081,  0.5154,  1.2671, -1.2279,  0.7697])
Data length: 5
Using dense features with data: tensor([ 0.7596,  0.5884,  1.0902, -2.2011,  1.1109])
Data length: 5
Using dense features with data: tensor([ 1.0724,  0.7445,  0.9386, -1.5017,  1.0122])
Data length: 5
Using dense features with data: tensor([ 1.0209,  0.4916,  1.0329, -1.0293,  0.7837])
Data length: 5
Using dense features with data: tensor([ 0.9386, -0.1788,  1.9056, -0.3551,  0.1842])
Data length: 5
Using dense features with data: tensor([ 1.2453,  0.4349,  1.3105, -1.1324,  0.7126])
Data length: 5
Using dense features with data: tensor([ 1.0245,  0.9615,  0.6752, -1.6265,  1.1773])
Data length: 5
Using dense features with data: tensor([ 0.9085,  0.9295,  0.4548, -1.5542,  1.2861])
Data length: 5
Using dense features with data: tensor([ 1.2484,  0.5607,  1.0554, -1.2267,  0.8603])
Data length: 5
Using dense features with data: tensor([ 1.0544,  0.6548,  1.1745, -1.3428,  0.8522])
Data length: 5
Using dense features with data: tensor([ 0.3235,  0.6706,  0.5467, -1.5861,  1.2389])
Data length: 5
Using dense features with data: tensor([ 1.0034,  0.5664,  0.8359, -1.2070,  0.9651])
Data length: 5
Using dense features with data: tensor([ 0.7389,  0.6216,  0.3132, -1.0477,  1.2803])
Data length: 5
Using dense features with data: tensor([ 0.9177,  1.0169,  0.3189, -1.5903,  1.3729])
Data length: 5
Using dense features with data: tensor([ 1.0022,  0.5773,  0.8121, -1.2280,  0.9865])
Data length: 5
Using dense features with data: tensor([ 1.1316,  0.5127,  1.1963, -1.1976,  0.7860])
Data length: 5
Using dense features with data: tensor([ 1.2822,  0.7295,  1.1781, -1.4582,  0.8912])
Data length: 5
Using dense features with data: tensor([ 1.0756,  0.5462,  1.0172, -1.1555,  0.8490])
Data length: 5
Using dense features with data: tensor([ 0.8693,  0.7987,  0.5032, -1.2421,  1.1859])
Data length: 5
Using dense features with data: tensor([ 1.1323,  0.3738,  1.2637, -0.9683,  0.6538])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 22: Loss=6407.3496, Heatmap=0.6843, Dense=0.2933, Output_Max=6.0219
Using dense features with data: tensor([ 1.2754, -0.2451,  1.4464,  0.5214, -0.3459])
Data length: 5
Using dense features with data: tensor([ 1.0309,  1.0005,  0.7037, -1.6558,  1.1689])
Data length: 5
Using dense features with data: tensor([ 0.9993,  0.5421,  1.9732, -2.3557,  0.8735])
Data length: 5
Using dense features with data: tensor([ 1.0647,  0.7705,  0.8693, -1.5428,  1.0577])
Data length: 5
Using dense features with data: tensor([ 1.0397,  0.7141,  0.5519, -1.1282,  1.1158])
Data length: 5
Using dense features with data: tensor([ 0.8412,  0.7077,  0.4566, -1.1681,  1.1981])
Data length: 5
Using dense features with data: tensor([ 1.1026,  0.5140,  1.0202, -1.1578,  0.8485])
Data length: 5
Using dense features with data: tensor([ 1.1798,  0.8441,  0.1859, -0.5278,  1.2322])
Data length: 5
Using dense features with data: tensor([ 1.0626,  1.2865,  0.5491, -1.6472,  1.2490])
Data length: 5
Using dense features with data: tensor([ 1.3788,  0.4698,  2.3816, -1.4716,  0.5535])
Data length: 5
Using dense features with data: tensor([ 1.4822,  2.1947, -0.0231, -2.5987,  1.5797])
Data length: 5
Using dense features with data: tensor([ 1.2502,  0.3775,  1.4867, -0.9760,  0.5809])
Data length: 5
Using dense features with data: tensor([ 0.9642,  0.9371,  0.4810, -1.5330,  1.2668])
Data length: 5
Using dense features with data: tensor([ 1.3922,  1.3291,  0.7604, -1.7543,  1.1618])
Data length: 5
Using dense features with data: tensor([ 1.3107,  0.6876,  1.3949, -1.4089,  0.7904])
Data length: 5
Using dense features with data: tensor([ 1.3044,  0.4669,  1.4977, -0.8765,  0.5295])
Data length: 5
Using dense features with data: tensor([ 0.6266,  0.8250, -0.0055, -1.2037,  1.5754])
Data length: 5
Using dense features with data: tensor([ 1.2304,  0.7848,  1.2709, -1.4302,  0.8443])
Data length: 5
Using dense features with data: tensor([ 1.3589,  0.5786,  1.1029, -1.3312,  0.8789])
Data length: 5
Using dense features with data: tensor([ 0.7731,  1.0627,  0.4982, -1.4356,  1.2368])
Data length: 5
Using dense features with data: tensor([ 1.1385,  0.8820,  0.2255, -0.6103,  1.2169])
Data length: 5
Using dense features with data: tensor([ 1.0398,  0.8062,  0.6852, -1.6312,  1.1731])
Data length: 5
Using dense features with data: tensor([ 1.1350,  0.4647,  1.1851, -1.2447,  0.8099])
Data length: 5
Using dense features with data: tensor([ 1.0288,  0.6615,  1.0443, -1.4013,  0.9304])
Data length: 5
Using dense features with data: tensor([ 1.0101,  0.5537,  0.9322, -1.1861,  0.9047])
Data length: 5
Using dense features with data: tensor([ 1.1352,  0.4800,  1.0363, -1.1107,  0.8200])
Data length: 5
Using dense features with data: tensor([ 0.8358,  0.4453,  0.5151, -0.8348,  1.0179])
Data length: 5
Using dense features with data: tensor([ 1.2912,  0.7177,  1.1720, -1.3968,  0.8727])
Data length: 5
Using dense features with data: tensor([ 1.0098,  0.6840,  0.8275, -1.3505,  1.0211])
Data length: 5
Using dense features with data: tensor([ 1.1970,  1.2421,  0.4511, -1.8388,  1.3302])
Data length: 5
Using dense features with data: tensor([ 0.8714,  0.6646,  0.6035, -1.2117,  1.1087])
Data length: 5
Using dense features with data: tensor([ 1.0223,  0.9543,  0.7764, -1.6031,  1.1198])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 23: Loss=6400.3848, Heatmap=0.6837, Dense=0.2930, Output_Max=5.3590
Using dense features with data: tensor([ 1.3329,  0.5401,  1.8019, -0.5478,  0.2951])
Data length: 5
Using dense features with data: tensor([ 0.9118,  0.6850,  0.8653, -1.3714,  1.0079])
Data length: 5
Using dense features with data: tensor([ 1.6805,  0.6475,  1.0693, -1.2345,  0.8570])
Data length: 5
Using dense features with data: tensor([ 1.6770,  0.3274,  1.1948, -0.8474,  0.6169])
Data length: 5
Using dense features with data: tensor([ 1.2263,  0.4875,  1.1043, -1.1818,  0.8193])
Data length: 5
Using dense features with data: tensor([ 1.3315,  0.4780,  1.8349, -0.6652,  0.3478])
Data length: 5
Using dense features with data: tensor([ 1.4991,  0.2113,  2.0527, -0.8647,  0.3987])
Data length: 5
Using dense features with data: tensor([ 1.1176,  0.7382,  0.6676, -1.1016,  1.0260])
Data length: 5
Using dense features with data: tensor([ 0.2489,  0.7501,  0.5150, -1.2372,  1.1763])
Data length: 5
Using dense features with data: tensor([ 1.0005,  0.5847,  0.8050, -1.1301,  0.9519])
Data length: 5
Using dense features with data: tensor([ 1.3147,  0.5319,  1.2644, -1.2005,  0.7595])
Data length: 5
Using dense features with data: tensor([ 1.0028,  0.5050,  0.8445, -1.0917,  0.9124])
Data length: 5
Using dense features with data: tensor([ 1.6339,  0.8508,  1.3005, -1.3260,  0.7951])
Data length: 5
Using dense features with data: tensor([ 0.8599,  0.4015,  0.7243, -0.9691,  0.9290])
Data length: 5
Using dense features with data: tensor([ 1.1146,  0.5128,  1.0903, -1.1051,  0.7921])
Data length: 5
Using dense features with data: tensor([ 1.4634,  1.1952,  1.1449, -1.4841,  0.9137])
Data length: 5
Using dense features with data: tensor([ 1.1026,  0.5140,  1.0939, -1.0885,  0.7829])
Data length: 5
Using dense features with data: tensor([ 1.0228,  0.5006,  0.9963, -1.0401,  0.8069])
Data length: 5
Using dense features with data: tensor([ 0.4597,  0.5961,  1.4249, -1.9446,  0.9384])
Data length: 5
Using dense features with data: tensor([ 0.9715,  0.2589,  1.6253, -1.4201,  0.7181])
Data length: 5
Using dense features with data: tensor([ 0.8026,  0.7389,  0.3847, -1.2066,  1.2621])
Data length: 5
Using dense features with data: tensor([ 0.9425,  1.0225,  0.3791, -1.6708,  1.3477])
Data length: 5
Using dense features with data: tensor([ 1.2288,  0.5012,  1.3104, -1.1513,  0.7209])
Data length: 5
Using dense features with data: tensor([ 1.1590, -0.0439,  2.2240, -0.6172,  0.2707])
Data length: 5
Using dense features with data: tensor([ 1.0877,  0.6613,  1.1826, -1.3746,  0.8603])
Data length: 5
Using dense features with data: tensor([ 1.0132,  0.6558,  0.8417, -1.3088,  0.9993])
Data length: 5
Using dense features with data: tensor([ 1.0115,  0.9451,  0.6294, -1.4648,  1.1650])
Data length: 5
Using dense features with data: tensor([ 1.2174,  0.4183,  1.3177, -1.1612,  0.7223])
Data length: 5
Using dense features with data: tensor([ 1.2963,  0.6282,  1.9664, -1.1940,  0.5457])
Data length: 5
Using dense features with data: tensor([ 0.6880,  0.9841,  0.3187, -1.4801,  1.3587])
Data length: 5
Using dense features with data: tensor([ 1.2088,  0.4847,  1.2772, -1.0010,  0.6647])
Data length: 5
Using dense features with data: tensor([ 1.0297,  0.5068,  0.9034, -1.1510,  0.9053])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 24: Loss=6393.9482, Heatmap=0.6829, Dense=0.2927, Output_Max=5.8614
Using dense features with data: tensor([ 1.0442,  0.8294,  0.8332, -1.5834,  1.0864])
Data length: 5
Using dense features with data: tensor([ 0.9917,  0.5477,  1.4775, -1.5060,  0.7950])
Data length: 5
Using dense features with data: tensor([ 1.1282,  0.4799,  1.1302, -1.0632,  0.7549])
Data length: 5
Using dense features with data: tensor([ 1.0370,  0.4466,  0.9909, -1.0435,  0.8112])
Data length: 5
Using dense features with data: tensor([ 1.1893,  0.2125,  2.0642, -0.5288,  0.2508])
Data length: 5
Using dense features with data: tensor([ 1.7135, -0.8514,  1.5174,  0.3130, -0.2035])
Data length: 5
Using dense features with data: tensor([ 1.0784,  0.4853,  1.1320, -1.1302,  0.7846])
Data length: 5
Using dense features with data: tensor([ 1.0801,  1.1661,  1.3014, -1.5382,  0.8686])
Data length: 5
Using dense features with data: tensor([ 1.3287,  0.3246,  2.2934, -1.4124,  0.5520])
Data length: 5
Using dense features with data: tensor([ 1.0335,  0.4281,  1.1659, -1.0072,  0.7125])
Data length: 5
Using dense features with data: tensor([ 1.7392, -0.8185,  1.5639,  0.4264, -0.2662])
Data length: 5
Using dense features with data: tensor([ 1.7141, -0.8450,  1.6973,  0.1819, -0.1068])
Data length: 5
Using dense features with data: tensor([ 1.0281,  0.5336,  0.8723, -1.1093,  0.9044])
Data length: 5
Using dense features with data: tensor([ 0.8207,  0.8020,  1.6403, -2.5076,  0.9915])
Data length: 5
Using dense features with data: tensor([ 1.4163,  0.8154,  0.8780, -1.3520,  0.9948])
Data length: 5
Using dense features with data: tensor([ 0.9456,  0.6477,  2.4519, -1.0974,  0.4208])
Data length: 5
Using dense features with data: tensor([ 0.9239,  0.9546,  0.6161, -1.5316,  1.1884])
Data length: 5
Using dense features with data: tensor([ 1.2097,  1.2744,  0.3670, -1.8813,  1.3781])
Data length: 5
Using dense features with data: tensor([ 1.3698,  0.4254,  2.2320, -1.6376,  0.6330])
Data length: 5
Using dense features with data: tensor([ 1.0861,  0.5025,  1.0826, -1.0946,  0.7909])
Data length: 5
Using dense features with data: tensor([ 1.1338,  0.1575,  2.3960, -0.5963,  0.2439])
Data length: 5
Using dense features with data: tensor([ 1.1222,  1.2734,  0.0602, -1.6231,  1.5337])
Data length: 5
Using dense features with data: tensor([ 0.9920,  0.5689,  0.8104, -1.1380,  0.9520])
Data length: 5
Using dense features with data: tensor([ 0.8334,  0.6567,  0.7546, -1.4368,  1.0872])
Data length: 5
Using dense features with data: tensor([ 1.1654,  0.3714,  1.2637, -0.9028,  0.6203])
Data length: 5
Using dense features with data: tensor([ 0.3447,  0.7010,  0.5331, -1.5025,  1.2298])
Data length: 5
Using dense features with data: tensor([ 0.7077,  0.7040,  0.0736, -1.1897,  1.5090])
Data length: 5
Using dense features with data: tensor([ 1.2172,  0.2217,  2.3036, -1.2439,  0.4951])
Data length: 5
Using dense features with data: tensor([ 1.2944,  1.3829,  0.6919, -1.7768,  1.1994])
Data length: 5
Using dense features with data: tensor([ 1.0816,  0.4546,  1.2463, -1.0213,  0.6865])
Data length: 5
Using dense features with data: tensor([ 1.1322,  0.8821,  0.8858, -1.5694,  1.0570])
Data length: 5
Using dense features with data: tensor([ 1.2825,  0.4724,  1.5313, -0.8163,  0.4898])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 25: Loss=6387.8232, Heatmap=0.6823, Dense=0.2924, Output_Max=6.7217
Using dense features with data: tensor([ 1.0739,  0.9697,  0.7802, -1.6761,  1.1351])
Data length: 5
Using dense features with data: tensor([ 1.2770,  0.5835,  1.1208, -1.2241,  0.8294])
Data length: 5
Using dense features with data: tensor([ 1.3346,  0.5530,  1.4658, -1.0072,  0.6020])
Data length: 5
Using dense features with data: tensor([ 0.5132,  0.6995,  1.7228, -1.8195,  0.8127])
Data length: 5
Using dense features with data: tensor([ 1.0499,  1.0349,  0.5474, -2.5456,  1.3590])
Data length: 5
Using dense features with data: tensor([ 0.8903,  0.6802,  0.6286, -1.4085,  1.1510])
Data length: 5
Using dense features with data: tensor([ 1.1371,  0.4025,  1.1633, -0.9853,  0.7028])
Data length: 5
Using dense features with data: tensor([ 0.5366,  0.1980,  1.2151, -1.4498,  0.8732])
Data length: 5
Using dense features with data: tensor([ 1.2946,  0.6506,  1.2914, -1.1857,  0.7427])
Data length: 5
Using dense features with data: tensor([ 1.0591,  0.7462,  0.4881, -2.2036,  1.3528])
Data length: 5
Using dense features with data: tensor([ 1.1834,  0.6076,  0.8230, -1.1731,  0.9590])
Data length: 5
Using dense features with data: tensor([ 1.0600,  0.4695,  0.9676, -1.0339,  0.8185])
Data length: 5
Using dense features with data: tensor([ 0.5375,  0.6497,  1.6237, -1.1179,  0.6030])
Data length: 5
Using dense features with data: tensor([ 1.2862,  0.7400,  1.2722, -1.3768,  0.8249])
Data length: 5
Using dense features with data: tensor([ 1.2906,  0.6933,  1.2411, -1.3759,  0.8369])
Data length: 5
Using dense features with data: tensor([ 1.2904,  0.2666,  2.2201, -1.3876,  0.5586])
Data length: 5
Using dense features with data: tensor([ 1.1599,  0.6046,  1.2848, -1.2458,  0.7700])
Data length: 5
Using dense features with data: tensor([ 0.3766,  0.7182,  0.7736, -1.5171,  1.0992])
Data length: 5
Using dense features with data: tensor([ 0.9933,  0.8663,  0.6512, -1.5449,  1.1718])
Data length: 5
Using dense features with data: tensor([ 1.0018,  0.4852,  1.0182, -1.0367,  0.7944])
Data length: 5
Using dense features with data: tensor([ 1.1448,  0.7251,  0.7550, -1.1385,  0.9852])
Data length: 5
Using dense features with data: tensor([ 1.3461,  0.3809,  2.2158, -1.5761,  0.6183])
Data length: 5
Using dense features with data: tensor([ 1.7890,  0.4868,  1.6484, -1.1672,  0.6161])
Data length: 5
Using dense features with data: tensor([ 1.1399,  0.4366,  1.2645, -1.1640,  0.7440])
Data length: 5
Using dense features with data: tensor([ 1.2818,  0.6161,  0.8084, -1.1235,  0.9471])
Data length: 5
Using dense features with data: tensor([ 1.0139,  0.6939,  0.7892, -1.3733,  1.0492])
Data length: 5
Using dense features with data: tensor([ 1.1696, -0.0306,  2.3175, -0.5540,  0.2347])
Data length: 5
Using dense features with data: tensor([ 1.4084,  2.1609, -0.1038, -2.6929,  1.6093])
Data length: 5
Using dense features with data: tensor([ 0.8313,  0.7224,  0.4173, -1.2347,  1.2449])
Data length: 5
Using dense features with data: tensor([ 1.2898, -0.2711,  1.4395,  0.5402, -0.3590])
Data length: 5
Using dense features with data: tensor([ 1.1153,  0.7473,  1.1276, -1.5480,  0.9412])
Data length: 5
Using dense features with data: tensor([ 1.6959,  0.8450,  0.9852, -1.3794,  0.9506])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 26: Loss=6379.2612, Heatmap=0.6815, Dense=0.2920, Output_Max=6.4542
Using dense features with data: tensor([ 0.9518,  1.4465,  0.3022, -1.6955,  1.3944])
Data length: 5
Using dense features with data: tensor([ 0.9106,  0.8043,  1.9267, -2.2948,  0.8724])
Data length: 5
Using dense features with data: tensor([ 1.3505,  1.3700,  0.6008, -1.7944,  1.2477])
Data length: 5
Using dense features with data: tensor([ 1.1977,  1.4088,  0.7648, -1.6922,  1.1463])
Data length: 5
Using dense features with data: tensor([ 1.3297,  1.3577,  0.6992, -1.8086,  1.2019])
Data length: 5
Using dense features with data: tensor([ 1.0946,  0.7512,  2.2505, -2.0759,  0.7451])
Data length: 5
Using dense features with data: tensor([ 1.7573,  0.6496,  2.0431, -0.3339,  0.1620])
Data length: 5
Using dense features with data: tensor([ 1.1662,  0.8488,  1.1091, -1.5218,  0.9410])
Data length: 5
Using dense features with data: tensor([ 0.8973,  1.0462,  0.3892, -1.5659,  1.3272])
Data length: 5
Using dense features with data: tensor([ 1.2308,  0.7445,  1.2632, -1.5335,  0.8817])
Data length: 5
Using dense features with data: tensor([ 1.1065,  0.5289,  1.1047, -0.9735,  0.7224])
Data length: 5
Using dense features with data: tensor([ 1.3176,  1.3615,  0.6042, -1.8426,  1.2539])
Data length: 5
Using dense features with data: tensor([ 1.3062,  0.4983,  1.2841, -1.1732,  0.7403])
Data length: 5
Using dense features with data: tensor([ 0.6804,  0.7183,  0.0799, -1.1429,  1.5010])
Data length: 5
Using dense features with data: tensor([ 0.6563,  0.1285,  1.4506, -1.2493,  0.7110])
Data length: 5
Using dense features with data: tensor([ 1.0054,  0.5095,  0.8608, -1.0966,  0.9052])
Data length: 5
Using dense features with data: tensor([ 1.0991,  0.4874,  1.1004, -1.0441,  0.7592])
Data length: 5
Using dense features with data: tensor([ 1.2106,  0.5734,  0.9167, -1.2418,  0.9349])
Data length: 5
Using dense features with data: tensor([ 1.0483,  0.7485,  1.5471, -2.0627,  0.9273])
Data length: 5
Using dense features with data: tensor([ 1.3320,  0.5386,  2.1537, -1.8540,  0.7107])
Data length: 5
Using dense features with data: tensor([ 0.9107,  0.4693,  0.3413, -0.4996,  0.9715])
Data length: 5
Using dense features with data: tensor([ 0.9567,  0.8590,  1.0542, -1.2354,  0.8644])
Data length: 5
Using dense features with data: tensor([ 1.2977,  0.5959,  1.2369, -1.1806,  0.7621])
Data length: 5
Using dense features with data: tensor([ 1.1342,  0.4675,  1.3059, -1.1156,  0.7070])
Data length: 5
Using dense features with data: tensor([ 0.8946,  0.5597,  0.8345, -1.4237,  1.0406])
Data length: 5
Using dense features with data: tensor([ 0.9545,  0.7282,  0.3844, -0.9149,  1.1730])
Data length: 5
Using dense features with data: tensor([ 1.3162,  0.6508,  0.9455, -1.1033,  0.8623])
Data length: 5
Using dense features with data: tensor([ 1.1230,  0.4784,  1.0724, -1.0797,  0.7888])
Data length: 5
Using dense features with data: tensor([ 1.1657,  0.8440,  1.0761, -1.4098,  0.9188])
Data length: 5
Using dense features with data: tensor([ 1.0295,  0.7452,  0.6013, -1.2451,  1.1209])
Data length: 5
Using dense features with data: tensor([ 1.0053,  0.6230,  0.6945, -1.2329,  1.0578])
Data length: 5
Using dense features with data: tensor([ 1.1970,  0.4113,  1.3658, -1.0432,  0.6523])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 27: Loss=6372.9150, Heatmap=0.6808, Dense=0.2917, Output_Max=6.4792
Using dense features with data: tensor([ 0.9800,  0.9089,  0.4284, -1.5485,  1.3009])
Data length: 5
Using dense features with data: tensor([ 1.0151,  0.6668,  0.5534, -1.1258,  1.1139])
Data length: 5
Using dense features with data: tensor([ 0.8358,  0.4453,  0.5187, -0.8325,  1.0135])
Data length: 5
Using dense features with data: tensor([ 1.3214,  0.3001,  2.2488, -1.3941,  0.5549])
Data length: 5
Using dense features with data: tensor([ 1.2314,  0.6254,  1.3184, -1.2569,  0.7615])
Data length: 5
Using dense features with data: tensor([ 0.9861,  0.6618,  1.0027, -1.3565,  0.9343])
Data length: 5
Using dense features with data: tensor([ 1.2594,  0.6657,  0.7172, -1.2541,  1.0513])
Data length: 5
Using dense features with data: tensor([ 1.1406,  0.7542,  1.2438, -1.4292,  0.8546])
Data length: 5
Using dense features with data: tensor([ 1.1170,  0.6023,  1.2755, -1.3740,  0.8226])
Data length: 5
Using dense features with data: tensor([ 1.2258,  0.4451,  1.2860, -1.1747,  0.7402])
Data length: 5
Using dense features with data: tensor([ 0.9044,  0.8428,  0.4284, -1.5297,  1.2977])
Data length: 5
Using dense features with data: tensor([ 1.0864,  0.1626,  1.4077, -0.4029,  0.2788])
Data length: 5
Using dense features with data: tensor([ 1.1650,  1.4458,  0.6888, -1.7525,  1.1963])
Data length: 5
Using dense features with data: tensor([ 1.2612,  0.5849,  0.9888, -1.1231,  0.8489])
Data length: 5
Using dense features with data: tensor([ 1.3108,  0.7183,  0.8447, -1.2050,  0.9594])
Data length: 5
Using dense features with data: tensor([ 1.0367,  0.4728,  0.9935, -1.0091,  0.7932])
Data length: 5
Using dense features with data: tensor([ 1.0119,  0.4606,  1.0395, -0.9952,  0.7636])
Data length: 5
Using dense features with data: tensor([ 0.7396,  0.6016,  0.3503, -1.0681,  1.2539])
Data length: 5
Using dense features with data: tensor([ 1.0440,  0.4893,  1.0445, -1.0909,  0.8071])
Data length: 5
Using dense features with data: tensor([ 0.9760,  0.9029,  0.5196, -1.4887,  1.2350])
Data length: 5
Using dense features with data: tensor([ 1.2722,  0.4755,  1.5145, -0.8152,  0.4938])
Data length: 5
Using dense features with data: tensor([ 0.6378,  0.8071,  0.0367, -1.2349,  1.5411])
Data length: 5
Using dense features with data: tensor([ 1.0474,  0.2167,  1.3151, -0.4504,  0.3299])
Data length: 5
Using dense features with data: tensor([ 0.8833,  0.8243,  0.4593, -1.2590,  1.2210])
Data length: 5
Using dense features with data: tensor([ 0.9990,  0.4840,  0.9347, -1.0607,  0.8485])
Data length: 5
Using dense features with data: tensor([ 0.9803,  0.5776,  1.7084, -1.9835,  0.8598])
Data length: 5
Using dense features with data: tensor([ 1.2592,  0.4374,  1.2781, -1.1274,  0.7228])
Data length: 5
Using dense features with data: tensor([ 1.1480, -0.0194,  2.3374, -0.4626,  0.1954])
Data length: 5
Using dense features with data: tensor([ 1.1799, -0.0440,  2.2115, -0.6606,  0.2903])
Data length: 5
Using dense features with data: tensor([ 1.1208,  0.1182,  2.3875, -1.0868,  0.4272])
Data length: 5
Using dense features with data: tensor([ 0.9831, -0.1846,  1.8929, -0.1299,  0.0685])
Data length: 5
Using dense features with data: tensor([ 1.1907,  0.7836,  1.1823, -1.5749,  0.9268])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 28: Loss=6367.7544, Heatmap=0.6801, Dense=0.2915, Output_Max=6.0271
Using dense features with data: tensor([ 1.2058,  0.4433,  1.2989, -1.1374,  0.7192])
Data length: 5
Using dense features with data: tensor([ 0.9861,  0.5508,  0.8573, -1.1827,  0.9436])
Data length: 5
Using dense features with data: tensor([ 1.0690,  0.5377,  1.1674, -1.1380,  0.7727])
Data length: 5
Using dense features with data: tensor([ 1.0254,  0.6088,  0.8423, -1.2549,  0.9796])
Data length: 5
Using dense features with data: tensor([ 1.7142, -0.8477,  1.6474,  0.3119, -0.1871])
Data length: 5
Using dense features with data: tensor([ 0.9997,  0.7987,  0.6206, -1.4378,  1.1633])
Data length: 5
Using dense features with data: tensor([ 1.1484,  1.2385,  0.1010, -1.5844,  1.5071])
Data length: 5
Using dense features with data: tensor([ 1.1107,  0.6407,  1.2071, -1.3967,  0.8581])
Data length: 5
Using dense features with data: tensor([ 0.9394,  0.9886,  0.5717, -1.6039,  1.2284])
Data length: 5
Using dense features with data: tensor([ 0.9800,  0.2473,  1.2270, -0.5241,  0.4037])
Data length: 5
Using dense features with data: tensor([ 1.9251,  0.1822,  1.7670,  0.1282, -0.0724])
Data length: 5
Using dense features with data: tensor([ 0.9919,  1.1066,  1.0932, -1.5800,  0.9655])
Data length: 5
Using dense features with data: tensor([ 0.9606,  0.2690,  1.1789, -0.5572,  0.4415])
Data length: 5
Using dense features with data: tensor([ 1.6941,  0.4239,  1.2914, -0.9962,  0.6570])
Data length: 5
Using dense features with data: tensor([ 1.3366,  0.6506,  1.6272, -0.9010,  0.5057])
Data length: 5
Using dense features with data: tensor([ 1.3253,  0.9454,  0.9494, -1.4186,  0.9810])
Data length: 5
Using dense features with data: tensor([ 1.2221,  0.6715,  1.1926, -1.3215,  0.8366])
Data length: 5
Using dense features with data: tensor([ 1.0065,  0.5376,  0.7656, -1.1148,  0.9690])
Data length: 5
Using dense features with data: tensor([ 0.6239,  0.1537,  1.5558, -1.2106,  0.6613])
Data length: 5
Using dense features with data: tensor([ 1.0599,  0.3310,  1.2861, -0.8951,  0.6080])
Data length: 5
Using dense features with data: tensor([ 0.1242,  0.6026,  0.8069, -1.4124,  1.0517])
Data length: 5
Using dense features with data: tensor([ 1.2340,  0.5194,  1.1632, -1.1180,  0.7656])
Data length: 5
Using dense features with data: tensor([ 1.2212,  0.4880,  1.1416, -1.1468,  0.7877])
Data length: 5
Using dense features with data: tensor([ 1.0690,  0.5377,  1.1093, -1.2131,  0.8300])
Data length: 5
Using dense features with data: tensor([ 0.9239,  0.9938,  0.6561, -1.5868,  1.1787])
Data length: 5
Using dense features with data: tensor([ 1.1295,  0.4864,  1.1302, -1.0632,  0.7549])
Data length: 5
Using dense features with data: tensor([ 1.1933,  0.5199,  1.5190, -1.1188,  0.6348])
Data length: 5
Using dense features with data: tensor([ 0.9110,  0.6942,  0.3911, -0.8573,  1.1428])
Data length: 5
Using dense features with data: tensor([ 1.1417,  0.4857,  1.2526, -1.1008,  0.7210])
Data length: 5
Using dense features with data: tensor([ 1.1399,  0.4366,  1.2681, -1.0693,  0.7005])
Data length: 5
Using dense features with data: tensor([ 1.1098,  0.6625,  1.1700, -1.3547,  0.8585])
Data length: 5
Using dense features with data: tensor([ 0.4435,  0.3785,  1.2472, -1.7783,  0.9592])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 29: Loss=6361.4062, Heatmap=0.6794, Dense=0.2912, Output_Max=6.3247
Using dense features with data: tensor([ 1.0892,  0.3520,  1.3559, -0.9312,  0.6018])
Data length: 5
Using dense features with data: tensor([ 0.6330,  0.2246,  1.6851, -1.2466,  0.6369])
Data length: 5
Using dense features with data: tensor([ 1.1181,  0.7369,  0.7160, -1.1140,  0.9995])
Data length: 5
Using dense features with data: tensor([ 1.0279,  0.4732,  1.0846, -0.9892,  0.7394])
Data length: 5
Using dense features with data: tensor([ 1.0236,  0.7274,  0.5555, -1.1264,  1.1126])
Data length: 5
Using dense features with data: tensor([ 1.3184,  0.5443,  1.2649, -1.2302,  0.7715])
Data length: 5
Using dense features with data: tensor([ 1.6271,  0.2482,  1.1699, -0.7901,  0.5940])
Data length: 5
Using dense features with data: tensor([ 0.8188,  0.7457,  2.4619, -1.3567,  0.5037])
Data length: 5
Using dense features with data: tensor([ 0.8586,  0.5212,  1.0568, -2.2017,  1.1233])
Data length: 5
Using dense features with data: tensor([ 1.2910,  0.5551,  1.9185, -1.1412,  0.5366])
Data length: 5
Using dense features with data: tensor([ 1.1829,  0.5315,  1.3520, -1.1878,  0.7208])
Data length: 5
Using dense features with data: tensor([ 1.0447,  0.9282,  0.8846, -1.5011,  1.0383])
Data length: 5
Using dense features with data: tensor([ 1.0284,  0.5544,  1.0280, -1.1045,  0.8212])
Data length: 5
Using dense features with data: tensor([ 0.9663,  0.3010,  1.1827, -0.5363,  0.4258])
Data length: 5
Using dense features with data: tensor([ 1.3710,  0.7058,  0.9449, -1.6661,  1.0549])
Data length: 5
Using dense features with data: tensor([ 1.2363,  0.4460,  1.2601, -1.1343,  0.7329])
Data length: 5
Using dense features with data: tensor([ 1.0795,  0.4971,  2.5133, -0.7716,  0.2979])
Data length: 5
Using dense features with data: tensor([ 0.9964,  0.5735,  0.8452, -1.2342,  0.9703])
Data length: 5
Using dense features with data: tensor([ 1.1897,  0.7938,  0.9896, -1.5571,  1.0047])
Data length: 5
Using dense features with data: tensor([ 1.5443,  1.0507,  1.1709, -1.4472,  0.8905])
Data length: 5
Using dense features with data: tensor([ 0.9509,  1.4757,  0.5249, -1.6721,  1.2666])
Data length: 5
Using dense features with data: tensor([ 1.0336,  0.4969,  0.9365, -1.0816,  0.8572])
Data length: 5
Using dense features with data: tensor([ 0.6817,  0.7483,  2.2679, -1.5307,  0.5937])
Data length: 5
Using dense features with data: tensor([ 1.1162,  0.5363,  1.2159, -1.2063,  0.7814])
Data length: 5
Using dense features with data: tensor([ 1.3894,  0.5771,  1.2427, -1.2875,  0.8031])
Data length: 5
Using dense features with data: tensor([ 1.2908,  0.5898,  1.0629, -1.2748,  0.8758])
Data length: 5
Using dense features with data: tensor([ 1.1298,  1.2798,  0.0607, -1.6029,  1.5330])
Data length: 5
Using dense features with data: tensor([ 0.8701,  0.8500,  0.7780, -1.4361,  1.0743])
Data length: 5
Using dense features with data: tensor([ 1.0013,  0.5778,  0.7540, -1.1790,  1.0018])
Data length: 5
Using dense features with data: tensor([ 0.4727,  0.3521,  1.1513, -1.7276,  0.9830])
Data length: 5
Using dense features with data: tensor([ 0.9949,  1.1005,  1.2210, -1.4835,  0.8822])
Data length: 5
Using dense features with data: tensor([ 1.1298,  0.5270,  1.2088, -1.0700,  0.7245])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 30: Loss=6353.6162, Heatmap=0.6787, Dense=0.2908, Output_Max=6.1281
Using dense features with data: tensor([ 1.0554,  0.6577,  1.0826, -1.4448,  0.9277])
Data length: 5
Using dense features with data: tensor([ 1.1350,  0.4221,  1.2291, -1.0934,  0.7270])
Data length: 5
Using dense features with data: tensor([ 1.0087,  0.5911,  0.7261, -1.2327,  1.0385])
Data length: 5
Using dense features with data: tensor([ 1.2072,  1.7896, -0.0298, -2.7834,  1.5815])
Data length: 5
Using dense features with data: tensor([ 1.1186,  1.3059,  0.1611, -1.8179,  1.4824])
Data length: 5
Using dense features with data: tensor([ 0.9189,  0.7365,  0.5829, -1.2540,  1.1357])
Data length: 5
Using dense features with data: tensor([ 1.2054,  0.8310,  1.1141, -1.4964,  0.9308])
Data length: 5
Using dense features with data: tensor([ 1.1929,  0.4834,  1.0704, -1.1405,  0.8171])
Data length: 5
Using dense features with data: tensor([ 0.9957,  0.1036,  2.1104, -1.2311,  0.5281])
Data length: 5
Using dense features with data: tensor([ 0.8208,  0.4582,  0.8105, -1.1276,  0.9476])
Data length: 5
Using dense features with data: tensor([ 1.3527,  1.2760,  1.0532, -1.5083,  0.9613])
Data length: 5
Using dense features with data: tensor([ 1.7290, -0.8189,  1.5057,  0.3828, -0.2490])
Data length: 5
Using dense features with data: tensor([ 1.0268,  0.9521,  0.7446, -1.5959,  1.1342])
Data length: 5
Using dense features with data: tensor([ 1.9046,  0.2898,  1.8503,  0.0996, -0.0538])
Data length: 5
Using dense features with data: tensor([ 1.1175, -0.0456,  2.0521, -0.2256,  0.1095])
Data length: 5
Using dense features with data: tensor([ 1.0914,  0.6728,  1.1172, -1.4282,  0.9070])
Data length: 5
Using dense features with data: tensor([ 1.0415,  0.4824,  0.9587, -1.0346,  0.8235])
Data length: 5
Using dense features with data: tensor([ 1.1608,  0.4961,  1.0014, -1.1331,  0.8470])
Data length: 5
Using dense features with data: tensor([ 1.2330,  1.1156,  1.4704, -1.2488,  0.7041])
Data length: 5
Using dense features with data: tensor([ 0.9242,  1.0069,  0.4545, -1.8243,  1.3266])
Data length: 5
Using dense features with data: tensor([ 0.8131,  0.4287,  0.6498, -0.8382,  0.9114])
Data length: 5
Using dense features with data: tensor([ 0.9622,  0.7125,  0.8768, -1.4088,  1.0141])
Data length: 5
Using dense features with data: tensor([ 1.3755,  2.1017,  0.0533, -2.7278,  1.5513])
Data length: 5
Using dense features with data: tensor([ 0.5512,  0.7556,  1.8990, -1.6347,  0.7107])
Data length: 5
Using dense features with data: tensor([ 0.9865,  0.8544,  1.0723, -1.2198,  0.8497])
Data length: 5
Using dense features with data: tensor([ 0.8086,  0.7463,  0.4462, -1.2771,  1.2347])
Data length: 5
Using dense features with data: tensor([ 1.3576,  2.0564, -0.0891, -2.7268,  1.6034])
Data length: 5
Using dense features with data: tensor([ 1.2770,  0.6866,  1.2084, -1.3654,  0.8463])
Data length: 5
Using dense features with data: tensor([ 0.6601,  0.7458, -0.0421, -1.1237,  1.6083])
Data length: 5
Using dense features with data: tensor([ 1.1005,  0.8834,  1.0297, -1.5842,  0.9944])
Data length: 5
Using dense features with data: tensor([ 0.4348,  0.3959,  1.1012, -1.9680,  1.0607])
Data length: 5
Using dense features with data: tensor([ 1.3081,  0.3028,  2.2835, -1.3366,  0.5296])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 31: Loss=6347.9219, Heatmap=0.6781, Dense=0.2906, Output_Max=5.9541
Using dense features with data: tensor([ 1.0166,  0.5284,  0.9508, -1.1431,  0.8770])
Data length: 5
Using dense features with data: tensor([ 1.3562,  0.6134,  1.7303, -0.7400,  0.4042])
Data length: 5
Using dense features with data: tensor([ 1.0239,  0.6066,  0.7106, -1.1608,  1.0215])
Data length: 5
Using dense features with data: tensor([ 1.0020,  0.9385,  0.5030, -1.5474,  1.2565])
Data length: 5
Using dense features with data: tensor([ 1.2158,  0.4474,  1.4028, -1.0880,  0.6597])
Data length: 5
Using dense features with data: tensor([ 0.9040,  0.9781,  0.4520, -1.5668,  1.2899])
Data length: 5
Using dense features with data: tensor([ 0.8991,  1.0615,  0.3007, -1.5853,  1.3834])
Data length: 5
Using dense features with data: tensor([ 0.9346,  0.8408,  0.3736, -1.5564,  1.3352])
Data length: 5
Using dense features with data: tensor([ 1.1760,  1.5976,  0.0599, -2.6239,  1.5480])
Data length: 5
Using dense features with data: tensor([ 1.2493,  0.4800,  1.2627, -1.0705,  0.7032])
Data length: 5
Using dense features with data: tensor([ 0.4270,  0.4746,  1.0377, -2.0327,  1.0988])
Data length: 5
Using dense features with data: tensor([ 1.0140,  0.6964,  0.9855, -1.4262,  0.9662])
Data length: 5
Using dense features with data: tensor([ 1.1676,  0.5401,  1.1819, -1.1470,  0.7704])
Data length: 5
Using dense features with data: tensor([ 1.2379, -0.1408,  1.3729,  0.0080, -0.0058])
Data length: 5
Using dense features with data: tensor([ 0.9563,  0.2837,  1.1864, -0.5563,  0.4384])
Data length: 5
Using dense features with data: tensor([ 1.0627,  0.7927,  0.9307, -1.4732,  1.0074])
Data length: 5
Using dense features with data: tensor([ 1.1044,  0.5362,  1.0006, -1.0587,  0.8136])
Data length: 5
Using dense features with data: tensor([ 1.1160,  0.4835,  1.3207, -1.2066,  0.7403])
Data length: 5
Using dense features with data: tensor([ 0.3865,  0.7078,  0.7834, -1.4572,  1.0775])
Data length: 5
Using dense features with data: tensor([ 0.9218,  0.5989,  0.4039, -0.7205,  1.0599])
Data length: 5
Using dense features with data: tensor([ 0.6371,  0.8941,  0.1746, -1.3096,  1.4383])
Data length: 5
Using dense features with data: tensor([ 1.8948,  0.0036,  1.8656,  0.2344, -0.1250])
Data length: 5
Using dense features with data: tensor([ 0.7960,  0.7508,  0.4260, -1.2840,  1.2504])
Data length: 5
Using dense features with data: tensor([ 1.5157,  0.6401,  1.2054, -1.2402,  0.7996])
Data length: 5
Using dense features with data: tensor([ 1.0890,  0.4902,  1.0586, -0.9707,  0.7421])
Data length: 5
Using dense features with data: tensor([ 0.9759,  0.6648,  0.4927, -0.8764,  1.0586])
Data length: 5
Using dense features with data: tensor([ 1.1501,  0.5999,  1.3530, -1.2997,  0.7653])
Data length: 5
Using dense features with data: tensor([ 1.0105,  0.6216,  0.6076, -1.0399,  1.0420])
Data length: 5
Using dense features with data: tensor([ 1.0257,  0.8779,  0.5284, -1.5923,  1.2504])
Data length: 5
Using dense features with data: tensor([ 1.1500,  0.4260,  1.2561, -1.0895,  0.7145])
Data length: 5
Using dense features with data: tensor([ 1.5842,  0.2432,  1.9615, -0.8909,  0.4263])
Data length: 5
Using dense features with data: tensor([ 0.9168,  0.7335,  0.6739, -1.4920,  1.1466])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 32: Loss=6342.6992, Heatmap=0.6774, Dense=0.2904, Output_Max=6.5118
Using dense features with data: tensor([ 1.3320, -0.3258,  1.4534,  0.7794, -0.4923])
Data length: 5
Using dense features with data: tensor([ 1.4733,  0.3133,  1.6762,  0.0651, -0.0388])
Data length: 5
Using dense features with data: tensor([ 0.7205,  0.6575,  0.2195, -1.1935,  1.3889])
Data length: 5
Using dense features with data: tensor([ 0.8713,  0.5420,  0.8207, -1.2657,  0.9955])
Data length: 5
Using dense features with data: tensor([ 1.0025,  0.6676,  0.6866, -1.2941,  1.0830])
Data length: 5
Using dense features with data: tensor([ 1.2271,  0.7206,  2.4958, -1.7735,  0.6178])
Data length: 5
Using dense features with data: tensor([ 0.9549,  1.4761,  0.4182, -1.7020,  1.3299])
Data length: 5
Using dense features with data: tensor([ 1.1429,  0.6343,  1.2033, -1.4195,  0.8676])
Data length: 5
Using dense features with data: tensor([ 0.6101,  0.2164,  1.6641, -1.2151,  0.6307])
Data length: 5
Using dense features with data: tensor([ 1.0042,  0.5288,  0.8061, -1.1072,  0.9415])
Data length: 5
Using dense features with data: tensor([ 0.4771,  0.3009,  1.0317, -1.7411,  1.0359])
Data length: 5
Using dense features with data: tensor([ 1.6941,  0.4239,  1.1603, -1.0013,  0.7120])
Data length: 5
Using dense features with data: tensor([ 1.0632,  0.8266,  0.9488, -1.5330,  1.0166])
Data length: 5
Using dense features with data: tensor([ 1.3710,  0.4590,  2.2919, -1.6076,  0.6117])
Data length: 5
Using dense features with data: tensor([ 0.9706,  0.2982,  1.2080, -0.5497,  0.4271])
Data length: 5
Using dense features with data: tensor([ 1.0002,  0.6479,  0.8417, -1.3088,  0.9993])
Data length: 5
Using dense features with data: tensor([ 0.9204,  1.0183,  0.3667, -1.5066,  1.3320])
Data length: 5
Using dense features with data: tensor([ 0.8050,  0.7858,  0.5163, -1.2959,  1.1916])
Data length: 5
Using dense features with data: tensor([ 0.9875,  0.5774,  0.7044, -1.1457,  1.0195])
Data length: 5
Using dense features with data: tensor([ 1.0260,  0.8502,  0.7784, -1.6021,  1.1185])
Data length: 5
Using dense features with data: tensor([ 1.7634,  0.4918,  1.9119, -0.0438,  0.0229])
Data length: 5
Using dense features with data: tensor([ 1.1284,  0.9484,  0.4039, -1.5328,  1.3131])
Data length: 5
Using dense features with data: tensor([ 1.2410,  0.7907,  1.1141, -1.4964,  0.9308])
Data length: 5
Using dense features with data: tensor([ 1.1440,  1.3014,  0.3208, -1.8609,  1.4001])
Data length: 5
Using dense features with data: tensor([ 1.1703,  0.4295,  1.3523, -1.0607,  0.6651])
Data length: 5
Using dense features with data: tensor([ 1.2338,  0.5472,  1.3520, -1.1878,  0.7208])
Data length: 5
Using dense features with data: tensor([ 0.9606,  0.2690,  1.1961, -0.5193,  0.4096])
Data length: 5
Using dense features with data: tensor([ 1.2667,  0.7793,  0.6204, -1.2481,  1.1095])
Data length: 5
Using dense features with data: tensor([ 1.2446,  0.8601,  0.8167, -1.8826,  1.1615])
Data length: 5
Using dense features with data: tensor([ 1.2981,  0.7022,  1.1730, -1.4127,  0.8778])
Data length: 5
Using dense features with data: tensor([ 0.8955,  0.8121,  0.4055, -1.1461,  1.2307])
Data length: 5
Using dense features with data: tensor([ 1.1522,  0.5008,  1.3354, -1.0692,  0.6751])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 33: Loss=6335.7236, Heatmap=0.6767, Dense=0.2900, Output_Max=7.3230
Using dense features with data: tensor([ 0.4972,  0.2875,  1.1324, -1.5779,  0.9483])
Data length: 5
Using dense features with data: tensor([ 0.7987,  0.7608,  0.3978, -1.2943,  1.2726])
Data length: 5
Using dense features with data: tensor([ 1.1008,  0.7409,  0.6369, -1.1509,  1.0654])
Data length: 5
Using dense features with data: tensor([ 1.8098,  0.4708,  1.7087, -1.0898,  0.5678])
Data length: 5
Using dense features with data: tensor([ 1.0254,  0.6088,  0.7988, -1.2830,  1.0139])
Data length: 5
Using dense features with data: tensor([ 1.0894,  0.5338,  1.1215, -0.9357,  0.6953])
Data length: 5
Using dense features with data: tensor([ 1.2158,  0.4474,  1.4397, -1.0701,  0.6392])
Data length: 5
Using dense features with data: tensor([ 1.2161,  1.2843,  0.3691, -1.8585,  1.3748])
Data length: 5
Using dense features with data: tensor([ 1.0179, -0.1927,  1.9587, -0.0387,  0.0198])
Data length: 5
Using dense features with data: tensor([ 1.3293,  0.5008,  1.8349, -0.6652,  0.3478])
Data length: 5
Using dense features with data: tensor([ 1.3991,  0.7056,  0.8857, -1.6983,  1.0901])
Data length: 5
Using dense features with data: tensor([ 0.4758,  0.6448,  1.4253, -1.9993,  0.9515])
Data length: 5
Using dense features with data: tensor([ 1.0894,  0.5338,  0.9878, -1.0608,  0.8210])
Data length: 5
Using dense features with data: tensor([ 1.2499,  0.5159,  1.2366, -1.2019,  0.7712])
Data length: 5
Using dense features with data: tensor([ 1.0095,  0.5922,  0.7106, -1.1608,  1.0215])
Data length: 5
Using dense features with data: tensor([ 0.7722,  0.4521,  1.5880, -1.1677,  0.6340])
Data length: 5
Using dense features with data: tensor([ 1.0001,  0.9504,  0.7458, -1.4838,  1.1050])
Data length: 5
Using dense features with data: tensor([ 1.0095,  0.5922,  0.7321, -1.1906,  1.0195])
Data length: 5
Using dense features with data: tensor([ 0.9903,  0.5890,  0.3472, -0.6536,  1.0825])
Data length: 5
Using dense features with data: tensor([ 1.1170,  0.6023,  1.2755, -1.3740,  0.8226])
Data length: 5
Using dense features with data: tensor([ 0.7252,  0.6432,  0.2478, -1.1175,  1.3526])
Data length: 5
Using dense features with data: tensor([ 1.0318,  0.4569,  1.1897, -1.0057,  0.7018])
Data length: 5
Using dense features with data: tensor([ 0.7971,  0.5918,  1.0486, -1.7546,  1.0321])
Data length: 5
Using dense features with data: tensor([ 0.9735,  0.4344,  1.0182, -1.0367,  0.7944])
Data length: 5
Using dense features with data: tensor([ 1.7321,  0.2778,  1.8852, -0.8950,  0.4433])
Data length: 5
Using dense features with data: tensor([ 1.0497,  0.5740,  0.9810, -1.2380,  0.9007])
Data length: 5
Using dense features with data: tensor([ 0.9978,  0.9185,  0.4748, -1.5243,  1.2688])
Data length: 5
Using dense features with data: tensor([ 1.1146,  0.8553,  1.1476, -1.5011,  0.9181])
Data length: 5
Using dense features with data: tensor([ 1.2986,  0.4583,  2.5421, -1.7479,  0.6023])
Data length: 5
Using dense features with data: tensor([ 1.2945,  0.7472,  1.3577, -1.0593,  0.6626])
Data length: 5
Using dense features with data: tensor([ 1.1807,  0.8639,  1.0167, -1.5491,  0.9900])
Data length: 5
Using dense features with data: tensor([ 0.8932,  0.6997,  0.7922, -1.4028,  1.0567])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 34: Loss=6328.4434, Heatmap=0.6760, Dense=0.2897, Output_Max=4.5448
Using dense features with data: tensor([ 0.9187,  0.5129,  0.3155, -0.5359,  1.0388])
Data length: 5
Using dense features with data: tensor([ 0.9120,  0.9746,  0.4520, -1.5668,  1.2899])
Data length: 5
Using dense features with data: tensor([ 0.9253,  0.4192,  1.4921, -1.4916,  0.7852])
Data length: 5
Using dense features with data: tensor([ 1.0823,  0.4831,  1.0181, -1.0282,  0.7903])
Data length: 5
Using dense features with data: tensor([ 0.9210,  0.9943,  0.6017, -1.6306,  1.2173])
Data length: 5
Using dense features with data: tensor([ 0.9218,  0.5989,  0.4822, -0.9043,  1.0809])
Data length: 5
Using dense features with data: tensor([ 1.3098,  0.8244,  0.8359, -1.3059,  1.0014])
Data length: 5
Using dense features with data: tensor([ 1.0332,  1.1756,  1.3014, -1.5382,  0.8686])
Data length: 5
Using dense features with data: tensor([ 1.0819, -0.1336,  2.0078, -0.0784,  0.0390])
Data length: 5
Using dense features with data: tensor([ 0.9021,  1.0460,  0.2766, -1.5748,  1.3969])
Data length: 5
Using dense features with data: tensor([ 1.0331,  0.6069,  0.9457, -1.0995,  0.8604])
Data length: 5
Using dense features with data: tensor([ 1.7972, -0.7436,  1.5800,  0.4370, -0.2698])
Data length: 5
Using dense features with data: tensor([ 1.0097,  0.8500,  0.6319, -1.5529,  1.1843])
Data length: 5
Using dense features with data: tensor([ 0.9787,  0.9376,  0.6880, -1.4223,  1.1202])
Data length: 5
Using dense features with data: tensor([ 1.3062,  0.4983,  1.2250, -1.2498,  0.7954])
Data length: 5
Using dense features with data: tensor([ 1.6865,  0.2605,  1.8949, -0.9161,  0.4503])
Data length: 5
Using dense features with data: tensor([ 1.0026,  0.9999,  0.6037, -1.6173,  1.2135])
Data length: 5
Using dense features with data: tensor([ 1.0958,  0.3040,  1.2826, -0.8437,  0.5818])
Data length: 5
Using dense features with data: tensor([ 0.4453,  0.5575,  1.2344, -2.0707,  1.0332])
Data length: 5
Using dense features with data: tensor([ 1.3890,  0.5738,  1.2427, -1.2875,  0.8031])
Data length: 5
Using dense features with data: tensor([ 1.1458,  0.5254,  0.9955, -1.0855,  0.8286])
Data length: 5
Using dense features with data: tensor([ 1.0958,  0.3040,  1.2703, -0.9024,  0.6177])
Data length: 5
Using dense features with data: tensor([ 0.8379,  0.5424,  1.0847, -2.0525,  1.0846])
Data length: 5
Using dense features with data: tensor([ 0.8056,  0.5783,  0.9187, -1.8259,  1.1046])
Data length: 5
Using dense features with data: tensor([ 0.9215,  0.8168,  0.7671, -1.6193,  1.1284])
Data length: 5
Using dense features with data: tensor([ 1.1050,  0.7651,  1.1174, -1.5264,  0.9389])
Data length: 5
Using dense features with data: tensor([ 1.2640,  0.5997,  0.8177, -1.1151,  0.9381])
Data length: 5
Using dense features with data: tensor([ 1.3512, -0.3418,  1.4135,  0.8496, -0.5412])
Data length: 5
Using dense features with data: tensor([ 0.9946,  0.6409,  0.7581, -1.2405,  1.0222])
Data length: 5
Using dense features with data: tensor([ 0.9282,  0.5285,  0.2992, -0.5143,  1.0439])
Data length: 5
Using dense features with data: tensor([ 1.1070,  0.4612,  1.1976, -1.0715,  0.7299])
Data length: 5
Using dense features with data: tensor([ 0.9988,  0.5351,  0.9007, -1.0788,  0.8751])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 35: Loss=6323.4629, Heatmap=0.6753, Dense=0.2895, Output_Max=5.8655
Using dense features with data: tensor([ 0.9689,  0.6664,  0.5032, -1.1645,  1.1629])
Data length: 5
Using dense features with data: tensor([ 1.0118,  0.4907,  0.9697, -1.0370,  0.8189])
Data length: 5
Using dense features with data: tensor([ 1.0462, -0.2004,  1.9970,  0.0153, -0.0077])
Data length: 5
Using dense features with data: tensor([ 1.1965,  1.2673,  0.4863, -1.8541,  1.3143])
Data length: 5
Using dense features with data: tensor([ 1.1357,  0.3960,  1.2702, -1.0363,  0.6844])
Data length: 5
Using dense features with data: tensor([ 1.1295,  0.4864,  1.1750, -1.0552,  0.7317])
Data length: 5
Using dense features with data: tensor([ 0.9863,  0.7711,  1.4514, -1.9945,  0.9417])
Data length: 5
Using dense features with data: tensor([ 1.1520,  0.4539,  1.3369, -1.0863,  0.6823])
Data length: 5
Using dense features with data: tensor([ 1.2744,  0.6902,  1.4378, -1.3746,  0.7629])
Data length: 5
Using dense features with data: tensor([ 0.8212,  0.6021,  1.1304, -1.7030,  0.9848])
Data length: 5
Using dense features with data: tensor([ 1.0369,  0.5970,  0.8985, -1.2646,  0.9531])
Data length: 5
Using dense features with data: tensor([ 0.6295,  0.2427,  1.5873, -1.3139,  0.6914])
Data length: 5
Using dense features with data: tensor([ 0.9543,  0.9817,  0.4530, -1.5210,  1.2813])
Data length: 5
Using dense features with data: tensor([ 0.9786,  0.5771,  0.2149, -0.3965,  1.0741])
Data length: 5
Using dense features with data: tensor([ 0.7252,  0.6432,  0.2078, -1.1838,  1.3970])
Data length: 5
Using dense features with data: tensor([ 0.9897,  0.2728,  1.1961, -0.5193,  0.4096])
Data length: 5
Using dense features with data: tensor([ 0.6835,  0.6880,  1.3826, -1.8212,  0.9214])
Data length: 5
Using dense features with data: tensor([ 0.9231,  0.7485,  0.5829, -1.2540,  1.1357])
Data length: 5
Using dense features with data: tensor([ 1.0322,  0.8949,  0.5565, -1.4136,  1.1958])
Data length: 5
Using dense features with data: tensor([ 1.2645, -0.2155,  1.4027,  0.2516, -0.1775])
Data length: 5
Using dense features with data: tensor([ 1.3109,  0.6479,  1.4140, -1.2306,  0.7161])
Data length: 5
Using dense features with data: tensor([ 1.4647,  1.1695,  1.1449, -1.4841,  0.9137])
Data length: 5
Using dense features with data: tensor([ 0.8946,  0.5597,  0.8373, -1.2526,  0.9815])
Data length: 5
Using dense features with data: tensor([ 0.8949,  0.8588,  0.8082, -1.4193,  1.0531])
Data length: 5
Using dense features with data: tensor([ 0.9644,  0.8669,  0.3736, -1.5564,  1.3352])
Data length: 5
Using dense features with data: tensor([ 1.2560,  0.3981,  1.5377, -1.0845,  0.6142])
Data length: 5
Using dense features with data: tensor([ 1.1981,  1.6737,  0.0528, -2.6241,  1.5507])
Data length: 5
Using dense features with data: tensor([ 0.2663,  0.7013,  0.5054, -1.2053,  1.1738])
Data length: 5
Using dense features with data: tensor([ 1.1685, -0.0376,  2.1696, -0.7637,  0.3385])
Data length: 5
Using dense features with data: tensor([ 0.7434,  0.7592,  2.4311, -1.4317,  0.5322])
Data length: 5
Using dense features with data: tensor([ 0.3592,  0.6957,  0.6437, -1.4951,  1.1643])
Data length: 5
Using dense features with data: tensor([ 1.2437,  0.5423,  1.1313, -1.1505,  0.7938])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 36: Loss=6316.0615, Heatmap=0.6746, Dense=0.2891, Output_Max=5.6931
Using dense features with data: tensor([ 0.9455,  1.0918,  1.0213, -1.5070,  0.9752])
Data length: 5
Using dense features with data: tensor([ 1.1037,  0.5356,  1.1832, -1.1972,  0.7913])
Data length: 5
Using dense features with data: tensor([ 0.9128,  0.9823,  0.4522, -1.6366,  1.3012])
Data length: 5
Using dense features with data: tensor([ 1.2371,  0.5506,  1.0931, -1.1933,  0.8292])
Data length: 5
Using dense features with data: tensor([ 0.9737,  0.8752,  0.4863, -1.4999,  1.2572])
Data length: 5
Using dense features with data: tensor([ 1.3464,  0.5748,  1.1647, -1.2774,  0.8315])
Data length: 5
Using dense features with data: tensor([ 0.7025,  0.6630,  0.1080, -1.2270,  1.4830])
Data length: 5
Using dense features with data: tensor([ 0.9727,  0.6438,  0.6068, -1.0683,  1.0542])
Data length: 5
Using dense features with data: tensor([ 1.0076,  0.9248,  0.6830, -1.4406,  1.1280])
Data length: 5
Using dense features with data: tensor([ 1.3321,  0.6255,  1.6813, -0.7957,  0.4420])
Data length: 5
Using dense features with data: tensor([ 1.0557,  0.8562,  1.2236, -1.2354,  0.7902])
Data length: 5
Using dense features with data: tensor([ 1.0456,  0.6907,  0.5549, -1.1296,  1.1141])
Data length: 5
Using dense features with data: tensor([ 1.0392,  0.4398,  1.1718, -0.9964,  0.7047])
Data length: 5
Using dense features with data: tensor([ 1.2788,  0.4540,  1.2824, -1.2074,  0.7553])
Data length: 5
Using dense features with data: tensor([ 1.0166,  0.5284,  0.8973, -1.1960,  0.9271])
Data length: 5
Using dense features with data: tensor([ 0.9895,  0.6550,  0.8275, -1.3505,  1.0211])
Data length: 5
Using dense features with data: tensor([ 1.2637,  0.6955,  1.1910, -1.4392,  0.8795])
Data length: 5
Using dense features with data: tensor([ 1.0200,  0.9662,  0.7066, -1.5172,  1.1349])
Data length: 5
Using dense features with data: tensor([ 1.4800,  0.0416,  1.5632,  0.5378, -0.3313])
Data length: 5
Using dense features with data: tensor([ 0.8483,  0.7909,  0.7442, -1.3907,  1.0795])
Data length: 5
Using dense features with data: tensor([ 1.1907,  0.5598,  1.3517, -1.0816,  0.6749])
Data length: 5
Using dense features with data: tensor([ 1.1149,  0.7427,  0.6568, -1.1164,  1.0390])
Data length: 5
Using dense features with data: tensor([ 1.1153,  0.8779,  0.3305, -0.9029,  1.2199])
Data length: 5
Using dense features with data: tensor([ 1.0180,  0.5157,  1.0685, -1.0115,  0.7580])
Data length: 5
Using dense features with data: tensor([ 1.4603, -0.1912,  1.6332,  0.9544, -0.5288])
Data length: 5
Using dense features with data: tensor([ 1.2287,  0.2401,  2.2789, -1.3364,  0.5304])
Data length: 5
Using dense features with data: tensor([ 1.0683,  0.5226,  1.1868, -1.0738,  0.7355])
Data length: 5
Using dense features with data: tensor([ 1.1213,  0.4270,  1.2789, -1.0261,  0.6761])
Data length: 5
Using dense features with data: tensor([ 0.5919,  0.4030,  1.1049, -1.4880,  0.9321])
Data length: 5
Using dense features with data: tensor([ 1.2306,  0.3549,  1.3260, -0.9734,  0.6332])
Data length: 5
Using dense features with data: tensor([ 1.1559,  0.4971,  1.2455, -1.2507,  0.7875])
Data length: 5
Using dense features with data: tensor([ 1.0474,  0.2167,  1.3444, -0.4212,  0.3036])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 37: Loss=6311.2227, Heatmap=0.6740, Dense=0.2890, Output_Max=5.4637
Using dense features with data: tensor([ 1.3195,  0.5137,  1.3290, -1.1264,  0.7031])
Data length: 5
Using dense features with data: tensor([ 0.7373,  0.5665,  0.3154, -1.0112,  1.2685])
Data length: 5
Using dense features with data: tensor([ 1.6672,  0.2976,  1.1922, -0.7863,  0.5831])
Data length: 5
Using dense features with data: tensor([ 1.5982,  1.0408,  0.9758, -1.4810,  0.9882])
Data length: 5
Using dense features with data: tensor([ 1.7886, -0.7240,  1.4913,  0.4639, -0.3016])
Data length: 5
Using dense features with data: tensor([ 1.0717,  0.7088,  0.5802, -1.0826,  1.0788])
Data length: 5
Using dense features with data: tensor([ 1.3123,  0.6510,  1.5280, -0.6400,  0.3966])
Data length: 5
Using dense features with data: tensor([ 1.2226,  0.5012,  1.2506, -1.0341,  0.6909])
Data length: 5
Using dense features with data: tensor([ 1.1767,  0.4613,  1.2340, -1.1361,  0.7441])
Data length: 5
Using dense features with data: tensor([ 0.7507,  0.5706,  1.1088, -1.6644,  0.9831])
Data length: 5
Using dense features with data: tensor([ 1.0828,  0.4775,  1.1186, -1.0924,  0.7736])
Data length: 5
Using dense features with data: tensor([ 1.0791,  1.4617,  0.6682, -1.6868,  1.1937])
Data length: 5
Using dense features with data: tensor([ 0.9888,  0.9359,  0.4643, -1.5252,  1.2753])
Data length: 5
Using dense features with data: tensor([ 1.0037,  0.9123,  0.6804, -1.4473,  1.1313])
Data length: 5
Using dense features with data: tensor([ 1.1108,  0.8847,  0.8798, -1.5274,  1.0482])
Data length: 5
Using dense features with data: tensor([ 0.3729,  0.5442,  1.5333, -1.3503,  0.7220])
Data length: 5
Using dense features with data: tensor([ 1.5294,  0.7367,  0.9765, -1.2834,  0.9204])
Data length: 5
Using dense features with data: tensor([ 1.0403,  0.2759,  1.2711, -0.5098,  0.3814])
Data length: 5
Using dense features with data: tensor([ 1.1991,  1.7384, -0.0756, -2.7825,  1.5980])
Data length: 5
Using dense features with data: tensor([ 1.0765,  1.0839,  1.3230, -1.4674,  0.8371])
Data length: 5
Using dense features with data: tensor([ 0.4365,  0.5335,  1.1641, -2.1031,  1.0653])
Data length: 5
Using dense features with data: tensor([ 1.2258,  0.4451,  1.1544, -1.1865,  0.7991])
Data length: 5
Using dense features with data: tensor([ 1.0258,  0.9010,  0.4750, -1.5562,  1.2745])
Data length: 5
Using dense features with data: tensor([ 1.0775,  0.7727,  0.9488, -1.4687,  0.9972])
Data length: 5
Using dense features with data: tensor([ 0.9432,  0.4959,  0.3794, -0.5740,  0.9867])
Data length: 5
Using dense features with data: tensor([ 1.1470,  0.5169,  1.3197, -0.9828,  0.6401])
Data length: 5
Using dense features with data: tensor([ 1.3562,  0.6134,  1.7611, -0.6634,  0.3603])
Data length: 5
Using dense features with data: tensor([ 1.0129,  0.6636,  1.0164, -1.4043,  0.9443])
Data length: 5
Using dense features with data: tensor([ 0.9713,  0.8203,  0.5383, -1.4857,  1.2232])
Data length: 5
Using dense features with data: tensor([ 1.0071,  0.8494,  1.1777, -1.2454,  0.8133])
Data length: 5
Using dense features with data: tensor([ 1.1703,  0.4295,  1.3369, -1.0863,  0.6823])
Data length: 5
Using dense features with data: tensor([ 1.3733,  0.5988,  1.3598, -1.2097,  0.7271])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 38: Loss=6303.0806, Heatmap=0.6733, Dense=0.2885, Output_Max=6.2043
Using dense features with data: tensor([ 1.4927,  0.3153,  1.1383, -0.8830,  0.6598])
Data length: 5
Using dense features with data: tensor([ 1.4436,  0.8337,  0.8897, -1.3443,  0.9862])
Data length: 5
Using dense features with data: tensor([ 0.4522,  0.3700,  1.1248, -1.8581,  1.0265])
Data length: 5
Using dense features with data: tensor([ 0.9439,  0.5451,  0.2223, -0.3923,  1.0552])
Data length: 5
Using dense features with data: tensor([ 1.1024,  0.5328,  1.1394, -1.1209,  0.7772])
Data length: 5
Using dense features with data: tensor([ 1.2464,  1.9267, -0.0517, -2.8562,  1.5889])
Data length: 5
Using dense features with data: tensor([ 1.1895,  0.8472,  1.1934, -1.2346,  0.8024])
Data length: 5
Using dense features with data: tensor([ 1.7124, -0.7906,  1.7333,  0.0240, -0.0138])
Data length: 5
Using dense features with data: tensor([ 1.1949,  0.5480,  1.4361, -1.1174,  0.6612])
Data length: 5
Using dense features with data: tensor([ 0.9730,  0.2624,  1.0357, -0.7012,  0.5952])
Data length: 5
Using dense features with data: tensor([ 1.8323,  0.3102,  1.8624,  0.1185, -0.0636])
Data length: 5
Using dense features with data: tensor([ 1.0444,  0.8227,  0.5257, -1.4253,  1.2174])
Data length: 5
Using dense features with data: tensor([ 1.2145,  0.4147,  1.3536, -1.1180,  0.6904])
Data length: 5
Using dense features with data: tensor([ 1.0049,  1.0220,  0.4678, -1.6617,  1.2963])
Data length: 5
Using dense features with data: tensor([ 1.0899,  0.3870,  1.1912, -0.9581,  0.6774])
Data length: 5
Using dense features with data: tensor([ 0.9117,  0.9803,  0.3851, -1.6734,  1.3446])
Data length: 5
Using dense features with data: tensor([ 0.3564,  0.5450,  1.4401, -1.4734,  0.7968])
Data length: 5
Using dense features with data: tensor([ 0.6576,  0.2516,  1.5326, -1.3772,  0.7320])
Data length: 5
Using dense features with data: tensor([ 1.7160,  0.7341,  0.9424, -1.3493,  0.9611])
Data length: 5
Using dense features with data: tensor([ 0.8029,  0.7215,  0.7877, -1.4232,  1.0653])
Data length: 5
Using dense features with data: tensor([ 1.7003,  0.7206,  1.0798, -1.2476,  0.8574])
Data length: 5
Using dense features with data: tensor([ 1.2898,  1.3711,  0.5870, -1.8142,  1.2579])
Data length: 5
Using dense features with data: tensor([ 0.9599,  0.2759,  1.0228, -0.7215,  0.6143])
Data length: 5
Using dense features with data: tensor([ 1.1171,  0.5123,  2.1736, -2.2011,  0.7917])
Data length: 5
Using dense features with data: tensor([ 0.9560,  0.6297,  0.6524, -1.0410,  1.0109])
Data length: 5
Using dense features with data: tensor([ 1.1342,  0.4675,  1.3027, -1.1616,  0.7282])
Data length: 5
Using dense features with data: tensor([ 1.7291e+00,  1.0866e-03,  1.5865e+00, -5.8167e-01,  3.5143e-01])
Data length: 5
Using dense features with data: tensor([ 0.7476,  0.5650,  0.4609, -1.1059,  1.1759])
Data length: 5
Using dense features with data: tensor([ 1.3382,  0.9010,  0.7946, -1.7428,  1.1430])
Data length: 5
Using dense features with data: tensor([ 1.2431,  0.2970,  2.0476, -0.5899,  0.2805])
Data length: 5
Using dense features with data: tensor([ 1.2891,  0.7729,  0.8707, -1.2205,  0.9511])
Data length: 5
Using dense features with data: tensor([ 1.5896,  0.7442,  1.2570, -1.6742,  0.9268])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 39: Loss=6296.9053, Heatmap=0.6726, Dense=0.2883, Output_Max=5.9741
Using dense features with data: tensor([ 0.8878,  1.0361,  0.3508, -1.5600,  1.3496])
Data length: 5
Using dense features with data: tensor([ 1.3146,  0.5810,  1.1892, -1.2547,  0.8122])
Data length: 5
Using dense features with data: tensor([ 0.3766,  0.7182,  0.8450, -1.4792,  1.0518])
Data length: 5
Using dense features with data: tensor([ 0.9749,  0.8360,  0.4452, -1.4809,  1.2787])
Data length: 5
Using dense features with data: tensor([ 1.1033,  0.4779,  1.0060, -0.9281,  0.7451])
Data length: 5
Using dense features with data: tensor([ 0.9534,  0.2993,  0.9345, -0.8186,  0.7194])
Data length: 5
Using dense features with data: tensor([ 0.3779,  0.7187,  0.4565, -1.2156,  1.2116])
Data length: 5
Using dense features with data: tensor([ 1.0627,  0.8736,  1.0867, -1.6374,  0.9849])
Data length: 5
Using dense features with data: tensor([ 1.5391,  1.0755,  1.1646, -1.4021,  0.8777])
Data length: 5
Using dense features with data: tensor([ 0.9694,  0.6990,  0.6129, -1.2680,  1.1206])
Data length: 5
Using dense features with data: tensor([ 1.1355,  0.3772,  2.4691, -0.6272,  0.2488])
Data length: 5
Using dense features with data: tensor([ 1.3186,  0.9562,  1.6799, -0.9430,  0.5115])
Data length: 5
Using dense features with data: tensor([ 1.1654,  0.3714,  1.2637, -0.9028,  0.6203])
Data length: 5
Using dense features with data: tensor([ 0.9582,  0.5492,  0.3653, -0.6532,  1.0609])
Data length: 5
Using dense features with data: tensor([ 1.2314,  0.6254,  1.2961, -1.2202,  0.7553])
Data length: 5
Using dense features with data: tensor([ 0.9111,  0.8001,  0.3615, -0.9386,  1.2031])
Data length: 5
Using dense features with data: tensor([ 0.4356,  0.4981,  1.1153, -1.9911,  1.0602])
Data length: 5
Using dense features with data: tensor([ 0.7181,  0.7573,  1.0925, -2.5747,  1.1695])
Data length: 5
Using dense features with data: tensor([ 1.0380,  0.7877,  0.6075, -1.2421,  1.1159])
Data length: 5
Using dense features with data: tensor([ 1.1349,  0.1057,  1.3998, -0.2798,  0.1973])
Data length: 5
Using dense features with data: tensor([ 1.0022,  0.5773,  0.8121, -1.2280,  0.9865])
Data length: 5
Using dense features with data: tensor([ 1.1434,  0.6752,  0.5887, -1.1978,  1.1140])
Data length: 5
Using dense features with data: tensor([ 1.1183,  0.4808,  1.0695, -1.0167,  0.7601])
Data length: 5
Using dense features with data: tensor([ 1.4440,  0.7291,  0.9836, -1.6482,  1.0328])
Data length: 5
Using dense features with data: tensor([ 1.0219,  0.7551,  0.5976, -1.2469,  1.1239])
Data length: 5
Using dense features with data: tensor([ 1.1146,  0.5128,  1.0485, -1.1449,  0.8293])
Data length: 5
Using dense features with data: tensor([ 1.0073,  0.6489,  0.7401, -1.3369,  1.0652])
Data length: 5
Using dense features with data: tensor([ 1.0016,  0.9522,  0.5965, -1.4630,  1.1836])
Data length: 5
Using dense features with data: tensor([ 0.7265,  0.0847,  1.4630, -1.2347,  0.7010])
Data length: 5
Using dense features with data: tensor([ 0.8915,  0.7782,  1.4504, -1.9791,  0.9384])
Data length: 5
Using dense features with data: tensor([ 1.1658,  1.0167,  1.5604, -1.1820,  0.6483])
Data length: 5
Using dense features with data: tensor([ 1.2554,  0.7629,  1.1145, -1.4910,  0.9289])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 40: Loss=6289.8340, Heatmap=0.6719, Dense=0.2879, Output_Max=6.2969
Using dense features with data: tensor([ 1.2565,  0.4868,  1.2985, -1.1647,  0.7311])
Data length: 5
Using dense features with data: tensor([ 0.8654,  0.5930,  0.9878, -2.0643,  1.1245])
Data length: 5
Using dense features with data: tensor([ 0.9140,  0.7692,  0.8518, -1.4270,  1.0327])
Data length: 5
Using dense features with data: tensor([ 1.2645, -0.2155,  1.3797,  0.3569, -0.2531])
Data length: 5
Using dense features with data: tensor([ 0.6082,  0.4314,  1.7472, -0.8499,  0.4527])
Data length: 5
Using dense features with data: tensor([ 1.3186,  0.9562,  1.6553, -0.9856,  0.5371])
Data length: 5
Using dense features with data: tensor([ 1.0816,  0.4546,  1.2463, -1.0213,  0.6865])
Data length: 5
Using dense features with data: tensor([ 1.2493,  0.4800,  1.1612, -1.1077,  0.7618])
Data length: 5
Using dense features with data: tensor([ 1.0365,  0.8150,  0.7954, -1.5504,  1.0968])
Data length: 5
Using dense features with data: tensor([ 0.8159,  0.4412,  0.6021, -0.9575,  1.0095])
Data length: 5
Using dense features with data: tensor([ 1.1426,  0.5190,  1.3207, -1.2066,  0.7403])
Data length: 5
Using dense features with data: tensor([ 1.1127,  0.8905,  1.0984, -1.3765,  0.8973])
Data length: 5
Using dense features with data: tensor([ 1.1684,  0.4467,  1.1508, -1.0530,  0.7410])
Data length: 5
Using dense features with data: tensor([ 1.1218,  0.5257,  1.1101, -0.9884,  0.7275])
Data length: 5
Using dense features with data: tensor([ 1.2599,  1.3732,  0.9028, -1.5873,  1.0537])
Data length: 5
Using dense features with data: tensor([ 1.1371,  0.4025,  1.2752, -0.9850,  0.6577])
Data length: 5
Using dense features with data: tensor([ 1.0133,  0.4909,  1.0043, -1.0386,  0.8022])
Data length: 5
Using dense features with data: tensor([ 1.1824,  0.5328,  0.9802, -1.0566,  0.8229])
Data length: 5
Using dense features with data: tensor([ 1.2164,  0.4852,  1.5153, -1.1524,  0.6502])
Data length: 5
Using dense features with data: tensor([ 6.4480e-01,  7.7064e-01,  7.7467e-04, -1.1607e+00,  1.5701e+00])
Data length: 5
Using dense features with data: tensor([ 1.5517,  0.7716,  1.8619, -0.4890,  0.2569])
Data length: 5
Using dense features with data: tensor([ 1.0931,  0.4893,  1.0469, -0.9964,  0.7607])
Data length: 5
Using dense features with data: tensor([ 1.2367,  0.3483,  1.3480, -1.0465,  0.6601])
Data length: 5
Using dense features with data: tensor([ 0.9745,  0.6663,  0.5642, -1.1432,  1.1123])
Data length: 5
Using dense features with data: tensor([ 1.1326,  0.6386,  1.1745, -1.3603,  0.8586])
Data length: 5
Using dense features with data: tensor([ 0.9642,  0.9634,  0.4328, -1.6327,  1.3117])
Data length: 5
Using dense features with data: tensor([ 1.2522,  0.5559,  1.3879, -1.1974,  0.7119])
Data length: 5
Using dense features with data: tensor([ 0.8842,  0.4932,  0.4092, -0.6705,  1.0228])
Data length: 5
Using dense features with data: tensor([ 1.7367, -0.5668,  1.7320, -0.0704,  0.0406])
Data length: 5
Using dense features with data: tensor([ 1.0474,  0.9382,  0.7446, -1.5959,  1.1342])
Data length: 5
Using dense features with data: tensor([ 1.3270,  0.6550,  1.5496, -1.0288,  0.5861])
Data length: 5
Using dense features with data: tensor([ 0.9453,  0.6616,  0.5338, -1.0811,  1.1121])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 41: Loss=6284.3359, Heatmap=0.6712, Dense=0.2877, Output_Max=6.0777
Using dense features with data: tensor([ 0.9339,  0.9701,  0.4467, -1.6290,  1.3031])
Data length: 5
Using dense features with data: tensor([ 0.9520,  0.1026,  1.9312, -1.1469,  0.5359])
Data length: 5
Using dense features with data: tensor([ 0.5522,  0.4809,  0.9247, -1.7071,  1.0743])
Data length: 5
Using dense features with data: tensor([ 1.0726,  0.3916,  1.2077, -1.0517,  0.7165])
Data length: 5
Using dense features with data: tensor([ 1.0127,  0.4991,  0.9286, -1.0876,  0.8641])
Data length: 5
Using dense features with data: tensor([ 1.0958,  0.3649,  1.2771, -0.8896,  0.6084])
Data length: 5
Using dense features with data: tensor([ 1.1024,  0.5328,  1.1622, -1.1358,  0.7739])
Data length: 5
Using dense features with data: tensor([ 0.8320,  1.1140,  0.5600, -1.3834,  1.1861])
Data length: 5
Using dense features with data: tensor([ 1.2106,  0.5734,  0.9648, -1.1653,  0.8792])
Data length: 5
Using dense features with data: tensor([ 0.6766,  0.7407,  0.0533, -1.1333,  1.5238])
Data length: 5
Using dense features with data: tensor([ 1.7061,  0.6530,  1.4461, -1.3582,  0.7541])
Data length: 5
Using dense features with data: tensor([ 1.2226,  0.5012,  1.2204, -1.0675,  0.7186])
Data length: 5
Using dense features with data: tensor([ 1.1897, -0.0292,  2.2538, -0.5907,  0.2563])
Data length: 5
Using dense features with data: tensor([ 0.7025,  0.6630,  0.1436, -1.2233,  1.4539])
Data length: 5
Using dense features with data: tensor([ 0.7475,  0.5710,  1.1735, -1.6194,  0.9437])
Data length: 5
Using dense features with data: tensor([ 0.8313,  0.7224,  0.4392, -1.2271,  1.2271])
Data length: 5
Using dense features with data: tensor([ 0.8236,  0.5813,  1.0586, -1.8305,  1.0465])
Data length: 5
Using dense features with data: tensor([ 0.9212,  0.4347,  1.0334, -0.9934,  0.7657])
Data length: 5
Using dense features with data: tensor([ 0.9633,  0.7388,  0.4748, -1.1472,  1.1784])
Data length: 5
Using dense features with data: tensor([ 1.0631,  0.4851,  1.1141, -1.1513,  0.8018])
Data length: 5
Using dense features with data: tensor([ 1.3423,  0.6207,  1.6941, -0.7679,  0.4256])
Data length: 5
Using dense features with data: tensor([ 1.3512, -0.3418,  1.3469,  1.0038, -0.6404])
Data length: 5
Using dense features with data: tensor([ 0.9217,  0.6810,  0.7460, -1.4284,  1.0895])
Data length: 5
Using dense features with data: tensor([ 1.8531,  0.5315,  1.5500, -1.2585,  0.6820])
Data length: 5
Using dense features with data: tensor([ 1.0494,  0.5097,  1.2229, -1.0834,  0.7250])
Data length: 5
Using dense features with data: tensor([ 1.2592,  0.4374,  1.3251, -1.1152,  0.6996])
Data length: 5
Using dense features with data: tensor([ 1.0033,  0.7154,  0.9599, -1.4503,  0.9861])
Data length: 5
Using dense features with data: tensor([ 0.9789,  1.4045,  0.3800, -1.7157,  1.3529])
Data length: 5
Using dense features with data: tensor([ 1.1522,  0.7539,  1.0692, -1.4408,  0.9324])
Data length: 5
Using dense features with data: tensor([ 0.9950,  0.8437,  0.6222, -1.5626,  1.1918])
Data length: 5
Using dense features with data: tensor([ 1.0127,  0.4991,  0.8911, -1.0827,  0.8822])
Data length: 5
Using dense features with data: tensor([ 1.1684,  0.4467,  1.1958, -0.9457,  0.6692])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 42: Loss=6277.4453, Heatmap=0.6705, Dense=0.2874, Output_Max=5.5614
Using dense features with data: tensor([ 1.0164,  0.5543,  0.5136, -0.8768,  1.0409])
Data length: 5
Using dense features with data: tensor([ 1.7687, -0.3714,  1.6396, -0.2770,  0.1674])
Data length: 5
Using dense features with data: tensor([ 1.0060,  0.9450,  0.9611, -1.6455,  1.0422])
Data length: 5
Using dense features with data: tensor([ 1.3656,  0.3746,  2.2603, -1.5115,  0.5894])
Data length: 5
Using dense features with data: tensor([ 1.0720,  0.9653,  0.4695, -2.3880,  1.3767])
Data length: 5
Using dense features with data: tensor([ 1.1171,  0.7520,  1.2119, -1.4829,  0.8856])
Data length: 5
Using dense features with data: tensor([ 1.2436,  0.4598,  1.1998, -1.1405,  0.7600])
Data length: 5
Using dense features with data: tensor([ 1.1417,  0.4857,  1.2328, -1.0613,  0.7108])
Data length: 5
Using dense features with data: tensor([ 1.1431,  0.4984,  1.4361, -1.1174,  0.6612])
Data length: 5
Using dense features with data: tensor([ 1.3005,  0.2537,  2.2506, -1.3376,  0.5362])
Data length: 5
Using dense features with data: tensor([ 1.0183,  0.8562,  0.7460, -1.6174,  1.1387])
Data length: 5
Using dense features with data: tensor([ 1.8458,  0.3765,  1.7190, -1.0736,  0.5583])
Data length: 5
Using dense features with data: tensor([ 1.2796,  0.7210,  1.2219, -1.2827,  0.8097])
Data length: 5
Using dense features with data: tensor([ 0.9537,  0.6833,  0.5338, -1.1127,  1.1235])
Data length: 5
Using dense features with data: tensor([ 1.0080,  0.8780,  0.8271, -1.5754,  1.0873])
Data length: 5
Using dense features with data: tensor([ 0.8924,  0.8010,  0.7386, -1.4888,  1.1103])
Data length: 5
Using dense features with data: tensor([ 1.1061,  0.4360,  1.2356, -1.1199,  0.7363])
Data length: 5
Using dense features with data: tensor([ 1.0689,  0.7171,  0.3301, -0.7706,  1.1661])
Data length: 5
Using dense features with data: tensor([ 1.0041,  0.5917,  0.7333, -1.1930,  1.0196])
Data length: 5
Using dense features with data: tensor([ 0.8638, -0.0508,  1.7807, -0.7773,  0.4116])
Data length: 5
Using dense features with data: tensor([ 1.6985,  0.7261,  2.1727, -0.4151,  0.1888])
Data length: 5
Using dense features with data: tensor([ 0.9702,  0.7091,  0.8367, -1.4384,  1.0440])
Data length: 5
Using dense features with data: tensor([ 1.0606,  0.5376,  0.9649, -1.2545,  0.9152])
Data length: 5
Using dense features with data: tensor([ 1.3194,  0.5050,  1.0467, -1.0668,  0.7949])
Data length: 5
Using dense features with data: tensor([ 1.2436,  0.4598,  1.2186, -1.1204,  0.7434])
Data length: 5
Using dense features with data: tensor([ 1.2320,  0.8125,  1.2689, -1.1569,  0.7393])
Data length: 5
Using dense features with data: tensor([ 1.0154,  0.0866,  2.0886, -1.2677,  0.5455])
Data length: 5
Using dense features with data: tensor([ 0.9853,  0.6224,  2.5177, -0.9367,  0.3562])
Data length: 5
Using dense features with data: tensor([ 1.7168,  0.6826,  1.3780, -1.5328,  0.8385])
Data length: 5
Using dense features with data: tensor([ 1.2937,  0.7116,  1.1772, -1.3924,  0.8689])
Data length: 5
Using dense features with data: tensor([ 1.2416,  0.4264,  1.4959, -1.1381,  0.6504])
Data length: 5
Using dense features with data: tensor([ 1.1908,  0.5658,  1.4140, -1.1424,  0.6795])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 43: Loss=6270.0723, Heatmap=0.6698, Dense=0.2870, Output_Max=6.7480
Using dense features with data: tensor([ 1.1967,  0.3633,  1.3978, -1.1303,  0.6800])
Data length: 5
Using dense features with data: tensor([ 1.2507,  0.7177,  1.3790, -1.3263,  0.7659])
Data length: 5
Using dense features with data: tensor([ 1.0899,  0.3870,  1.1912, -0.9581,  0.6774])
Data length: 5
Using dense features with data: tensor([ 1.7634,  0.4918,  1.9119, -0.0438,  0.0229])
Data length: 5
Using dense features with data: tensor([ 1.1517,  0.4522,  1.0976, -1.0551,  0.7657])
Data length: 5
Using dense features with data: tensor([ 0.9309,  0.5388,  1.4204, -1.4924,  0.8101])
Data length: 5
Using dense features with data: tensor([ 1.2522,  0.5559,  1.4291, -1.1823,  0.6912])
Data length: 5
Using dense features with data: tensor([ 1.0057,  0.6780,  0.4167, -0.8035,  1.0924])
Data length: 5
Using dense features with data: tensor([ 0.8767,  0.7137,  0.7456, -1.4202,  1.0874])
Data length: 5
Using dense features with data: tensor([ 0.6825,  0.2299,  1.4793, -1.3029,  0.7221])
Data length: 5
Using dense features with data: tensor([ 1.2730,  0.7283,  0.6272, -1.2447,  1.1040])
Data length: 5
Using dense features with data: tensor([ 1.0268,  0.8152,  0.6526, -1.5757,  1.1782])
Data length: 5
Using dense features with data: tensor([ 0.7026,  0.7120,  0.1082, -1.1272,  1.4751])
Data length: 5
Using dense features with data: tensor([ 1.0632,  0.5092,  0.9963, -1.2141,  0.8836])
Data length: 5
Using dense features with data: tensor([ 0.8144,  0.4435,  0.6761, -1.0254,  0.9879])
Data length: 5
Using dense features with data: tensor([ 1.2986,  0.7433,  1.1943, -1.2866,  0.8226])
Data length: 5
Using dense features with data: tensor([ 0.9487,  0.9769,  0.6653, -1.5711,  1.1702])
Data length: 5
Using dense features with data: tensor([ 0.9258,  0.9891,  0.6361, -1.6175,  1.1961])
Data length: 5
Using dense features with data: tensor([ 1.0164,  0.5543,  0.7591, -1.1192,  0.9748])
Data length: 5
Using dense features with data: tensor([ 0.8182,  0.8069,  0.7088, -1.3153,  1.0765])
Data length: 5
Using dense features with data: tensor([ 0.8774,  0.5318,  0.8400, -1.3236,  1.0053])
Data length: 5
Using dense features with data: tensor([ 0.7373,  0.5665,  0.3338, -1.0053,  1.2502])
Data length: 5
Using dense features with data: tensor([ 0.7229,  1.0190,  0.4349, -1.5296,  1.2938])
Data length: 5
Using dense features with data: tensor([ 1.1751,  0.7794,  1.5146, -1.0585,  0.6100])
Data length: 5
Using dense features with data: tensor([ 0.9120,  0.6185,  0.7283, -1.2432,  1.0409])
Data length: 5
Using dense features with data: tensor([ 1.1451,  0.9653,  0.4165, -1.5294,  1.3049])
Data length: 5
Using dense features with data: tensor([ 0.3224,  0.6796,  0.5414, -1.4715,  1.2182])
Data length: 5
Using dense features with data: tensor([ 1.0541,  0.3999,  1.2077, -1.0517,  0.7165])
Data length: 5
Using dense features with data: tensor([ 0.9191,  0.5291,  1.4973, -2.1852,  0.9701])
Data length: 5
Using dense features with data: tensor([ 1.0999,  1.3115,  0.0170, -1.7518,  1.5611])
Data length: 5
Using dense features with data: tensor([ 0.7914,  0.5797,  1.0711, -1.7084,  1.0108])
Data length: 5
Using dense features with data: tensor([ 1.1522,  0.5008,  1.3083, -1.1022,  0.7001])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 44: Loss=6264.0830, Heatmap=0.6691, Dense=0.2867, Output_Max=7.0114
Using dense features with data: tensor([ 0.9224,  0.1310,  1.8409, -1.2519,  0.5972])
Data length: 5
Using dense features with data: tensor([ 1.0484,  0.4778,  1.2179, -1.0890,  0.7296])
Data length: 5
Using dense features with data: tensor([ 0.9302,  0.5758,  1.3062, -1.7118,  0.9190])
Data length: 5
Using dense features with data: tensor([ 6.4333e-01,  7.9095e-01, -2.4467e-04, -1.1920e+00,  1.5710e+00])
Data length: 5
Using dense features with data: tensor([ 0.5777,  0.7499,  1.9302, -1.6480,  0.7067])
Data length: 5
Using dense features with data: tensor([ 1.0180,  0.5157,  1.0271, -1.0534,  0.7980])
Data length: 5
Using dense features with data: tensor([ 0.9377,  0.6675,  0.6805, -1.1521,  1.0373])
Data length: 5
Using dense features with data: tensor([ 0.3746,  0.6850,  0.6091, -1.4872,  1.1821])
Data length: 5
Using dense features with data: tensor([ 1.0886,  0.4270,  1.1023, -0.9921,  0.7328])
Data length: 5
Using dense features with data: tensor([ 1.0567,  0.7118,  0.1845, -0.4842,  1.2068])
Data length: 5
Using dense features with data: tensor([ 0.8328,  0.4709,  0.8053, -1.2734,  1.0069])
Data length: 5
Using dense features with data: tensor([ 0.8949,  0.8588,  0.8992, -1.3635,  0.9878])
Data length: 5
Using dense features with data: tensor([ 0.9944,  0.8458,  0.4688, -1.5145,  1.2706])
Data length: 5
Using dense features with data: tensor([ 0.9792,  0.6309,  0.7114, -1.2679,  1.0595])
Data length: 5
Using dense features with data: tensor([ 0.8348,  0.2249,  1.5146, -1.3830,  0.7400])
Data length: 5
Using dense features with data: tensor([ 1.2961,  0.6191,  1.4154, -1.3592,  0.7651])
Data length: 5
Using dense features with data: tensor([ 1.1042,  0.7005,  0.6485, -2.0430,  1.2634])
Data length: 5
Using dense features with data: tensor([ 0.9459,  1.0986,  0.9180, -1.5629,  1.0397])
Data length: 5
Using dense features with data: tensor([ 0.9506,  1.0127,  0.4438, -1.6444,  1.3072])
Data length: 5
Using dense features with data: tensor([ 1.0644,  1.0722,  1.3472, -1.4452,  0.8205])
Data length: 5
Using dense features with data: tensor([ 1.3017,  0.5109,  1.2719, -1.1680,  0.7429])
Data length: 5
Using dense features with data: tensor([ 1.1479,  0.1334,  2.3312, -1.2028,  0.4763])
Data length: 5
Using dense features with data: tensor([ 1.0190,  0.9651,  0.8902, -1.6397,  1.0734])
Data length: 5
Using dense features with data: tensor([ 1.2443,  0.6037,  1.5758, -0.4591,  0.2835])
Data length: 5
Using dense features with data: tensor([ 1.4328,  2.1716, -0.0174, -2.6948,  1.5773])
Data length: 5
Using dense features with data: tensor([ 0.7874,  0.5874,  1.1032, -1.6879,  0.9919])
Data length: 5
Using dense features with data: tensor([ 1.2243,  0.3953,  1.2824, -1.2074,  0.7553])
Data length: 5
Using dense features with data: tensor([ 1.1203,  1.2438,  0.3825, -2.5429,  1.4215])
Data length: 5
Using dense features with data: tensor([ 1.8886, -0.2210,  1.6137,  0.2797, -0.1716])
Data length: 5
Using dense features with data: tensor([ 1.2031,  1.2717,  0.2660, -1.8514,  1.4281])
Data length: 5
Using dense features with data: tensor([ 1.6884,  0.8434,  0.9766, -1.3992,  0.9615])
Data length: 5
Using dense features with data: tensor([ 0.9109,  0.7166,  0.4850, -1.1863,  1.1827])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 45: Loss=6257.4863, Heatmap=0.6685, Dense=0.2864, Output_Max=6.0253
Using dense features with data: tensor([ 1.0019,  0.9720,  0.7682, -1.7039,  1.1473])
Data length: 5
Using dense features with data: tensor([ 0.8910,  0.6811,  0.4489, -1.1883,  1.2096])
Data length: 5
Using dense features with data: tensor([ 1.1608,  0.4961,  1.0014, -1.1331,  0.8470])
Data length: 5
Using dense features with data: tensor([ 1.4219,  0.3878,  1.1383, -0.8830,  0.6598])
Data length: 5
Using dense features with data: tensor([ 1.0464,  0.5524,  1.0822, -0.9968,  0.7443])
Data length: 5
Using dense features with data: tensor([ 1.3179,  0.5280,  1.9779, -1.0348,  0.4820])
Data length: 5
Using dense features with data: tensor([ 1.0013,  0.4789,  1.0712, -0.9486,  0.7248])
Data length: 5
Using dense features with data: tensor([ 1.8486,  0.4818,  2.0625, -0.1278,  0.0619])
Data length: 5
Using dense features with data: tensor([ 0.9117,  0.7071,  0.4640, -1.0752,  1.1634])
Data length: 5
Using dense features with data: tensor([ 1.1781,  0.0964,  2.0340, -0.5092,  0.2453])
Data length: 5
Using dense features with data: tensor([ 1.8697,  0.1169,  1.8696,  0.1995, -0.1063])
Data length: 5
Using dense features with data: tensor([ 1.0753,  1.3351,  0.0390, -1.7883,  1.5490])
Data length: 5
Using dense features with data: tensor([ 0.9990,  0.4840,  0.9768, -1.0220,  0.8080])
Data length: 5
Using dense features with data: tensor([ 1.1558,  0.8269,  0.7508, -1.9098,  1.1962])
Data length: 5
Using dense features with data: tensor([ 1.2667,  0.4200,  1.4276, -1.0732,  0.6446])
Data length: 5
Using dense features with data: tensor([ 1.0406,  0.5380,  2.1183, -2.2261,  0.8102])
Data length: 5
Using dense features with data: tensor([ 0.9735,  0.4344,  1.0163, -1.0112,  0.7828])
Data length: 5
Using dense features with data: tensor([ 0.9169,  0.5200,  1.4036, -2.2466,  1.0124])
Data length: 5
Using dense features with data: tensor([ 1.0052, -0.1966,  1.9590, -0.0156,  0.0080])
Data length: 5
Using dense features with data: tensor([ 1.1882,  0.7125,  1.1308, -1.4367,  0.9040])
Data length: 5
Using dense features with data: tensor([ 0.8632,  0.4439,  0.3135, -0.4552,  0.9677])
Data length: 5
Using dense features with data: tensor([ 1.1827,  0.6171,  0.6908, -1.2031,  1.0496])
Data length: 5
Using dense features with data: tensor([ 1.0119,  0.4606,  1.0051, -1.0298,  0.7975])
Data length: 5
Using dense features with data: tensor([ 1.1316,  0.7237,  0.6722, -1.1410,  1.0384])
Data length: 5
Using dense features with data: tensor([ 1.1646,  0.7916,  0.6115, -2.1457,  1.2932])
Data length: 5
Using dense features with data: tensor([ 1.1599,  0.6046,  1.2653, -1.2655,  0.7855])
Data length: 5
Using dense features with data: tensor([ 1.0000,  0.7170,  0.2054, -0.4757,  1.1632])
Data length: 5
Using dense features with data: tensor([ 0.8310,  0.8003,  0.7057, -1.3887,  1.1006])
Data length: 5
Using dense features with data: tensor([ 1.3147,  0.5319,  1.2649, -1.2302,  0.7715])
Data length: 5
Using dense features with data: tensor([ 0.9809,  0.4275,  0.9669, -1.0034,  0.8039])
Data length: 5
Using dense features with data: tensor([ 1.2095,  0.6787,  1.3102, -1.3523,  0.8012])
Data length: 5
Using dense features with data: tensor([ 0.8131,  0.4287,  0.7895, -1.1424,  0.9660])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 46: Loss=6252.3467, Heatmap=0.6678, Dense=0.2862, Output_Max=4.7233
Using dense features with data: tensor([ 1.5780,  0.6973,  0.9891, -1.2746,  0.9109])
Data length: 5
Using dense features with data: tensor([ 1.0456,  0.6907,  0.5549, -1.1296,  1.1141])
Data length: 5
Using dense features with data: tensor([ 1.1183,  0.4808,  1.1156, -1.0307,  0.7459])
Data length: 5
Using dense features with data: tensor([ 0.8122,  0.5956,  1.0035, -1.7807,  1.0576])
Data length: 5
Using dense features with data: tensor([ 0.9315,  0.9900,  0.5682, -1.5951,  1.2286])
Data length: 5
Using dense features with data: tensor([ 1.3052,  0.7136,  1.0868, -1.3262,  0.8843])
Data length: 5
Using dense features with data: tensor([ 1.2957,  0.7742,  0.8897, -1.2614,  0.9565])
Data length: 5
Using dense features with data: tensor([ 1.3033,  0.6307,  0.9079, -1.0924,  0.8774])
Data length: 5
Using dense features with data: tensor([ 1.0004,  0.9294,  0.4480, -1.5300,  1.2860])
Data length: 5
Using dense features with data: tensor([ 1.2881,  0.6855,  1.2547, -1.3634,  0.8269])
Data length: 5
Using dense features with data: tensor([ 1.4761,  0.2244,  2.2989, -0.9966,  0.4091])
Data length: 5
Using dense features with data: tensor([ 1.3314,  0.5683,  1.8065, -0.5271,  0.2839])
Data length: 5
Using dense features with data: tensor([ 1.1494,  1.3981,  0.2286, -2.5964,  1.4830])
Data length: 5
Using dense features with data: tensor([ 1.3140,  0.6477,  1.7906, -1.9559,  0.8295])
Data length: 5
Using dense features with data: tensor([ 0.7213,  0.6244,  0.2587, -1.1326,  1.3463])
Data length: 5
Using dense features with data: tensor([ 1.2156, -0.0620,  1.3735, -0.0439,  0.0320])
Data length: 5
Using dense features with data: tensor([ 0.8159,  0.7984,  0.7057, -1.3887,  1.1006])
Data length: 5
Using dense features with data: tensor([ 1.9274, -0.2625,  1.6881,  0.2763, -0.1623])
Data length: 5
Using dense features with data: tensor([ 1.2445, -0.0082,  2.1800, -0.9241,  0.4009])
Data length: 5
Using dense features with data: tensor([ 1.1785,  0.4998,  1.0704, -1.1405,  0.8171])
Data length: 5
Using dense features with data: tensor([ 0.9786,  0.5771,  0.2223, -0.3923,  1.0552])
Data length: 5
Using dense features with data: tensor([ 0.6310,  0.8780,  0.1074, -1.2886,  1.4876])
Data length: 5
Using dense features with data: tensor([ 0.7609,  0.2123,  1.5722, -1.3172,  0.6974])
Data length: 5
Using dense features with data: tensor([ 1.2150,  0.7564,  0.8123, -1.7140,  1.1282])
Data length: 5
Using dense features with data: tensor([ 1.0506,  0.4765,  0.9989, -1.0320,  0.8017])
Data length: 5
Using dense features with data: tensor([ 1.0341,  0.5744,  0.9001, -1.1078,  0.8884])
Data length: 5
Using dense features with data: tensor([ 1.4350,  0.8778,  1.7575, -0.8647,  0.4572])
Data length: 5
Using dense features with data: tensor([ 1.3033,  0.6307,  0.8624, -1.1288,  0.9184])
Data length: 5
Using dense features with data: tensor([ 0.9688,  0.9613,  0.6617, -1.6234,  1.1838])
Data length: 5
Using dense features with data: tensor([ 1.1091,  0.4710,  1.0383, -0.9753,  0.7541])
Data length: 5
Using dense features with data: tensor([ 1.2745,  1.3633,  0.6138, -1.8689,  1.2535])
Data length: 5
Using dense features with data: tensor([ 1.2908,  0.5898,  1.1043, -1.3048,  0.8685])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 47: Loss=6245.4331, Heatmap=0.6671, Dense=0.2859, Output_Max=5.8629
Using dense features with data: tensor([ 0.8593,  0.8176,  0.6965, -1.4538,  1.1240])
Data length: 5
Using dense features with data: tensor([ 1.2202,  0.8436,  0.2371, -0.6393,  1.2156])
Data length: 5
Using dense features with data: tensor([ 1.0344,  0.4788,  0.9838, -1.0699,  0.8273])
Data length: 5
Using dense features with data: tensor([ 1.4745,  0.1736,  1.6739,  0.3170, -0.1871])
Data length: 5
Using dense features with data: tensor([ 1.4424, -0.3047,  1.7347,  1.1938, -0.6027])
Data length: 5
Using dense features with data: tensor([ 1.1311,  0.4885,  1.3667, -1.1186,  0.6859])
Data length: 5
Using dense features with data: tensor([ 1.3515,  1.2962,  0.9951, -1.5472,  0.9992])
Data length: 5
Using dense features with data: tensor([ 1.1159,  0.6286,  1.2550, -1.2757,  0.7936])
Data length: 5
Using dense features with data: tensor([ 1.4901,  1.2306,  0.7604, -1.6981,  1.1498])
Data length: 5
Using dense features with data: tensor([ 0.9665,  0.7662,  0.9103, -1.5737,  1.0464])
Data length: 5
Using dense features with data: tensor([ 1.0828,  0.4775,  1.1186, -1.0924,  0.7736])
Data length: 5
Using dense features with data: tensor([ 1.2560,  0.3981,  1.5415, -1.0790,  0.6107])
Data length: 5
Using dense features with data: tensor([ 0.9943,  0.7254,  0.9599, -1.4503,  0.9861])
Data length: 5
Using dense features with data: tensor([ 1.0532,  0.4831,  0.9989, -1.0320,  0.8017])
Data length: 5
Using dense features with data: tensor([ 1.7687, -0.3714,  1.6396, -0.2770,  0.1674])
Data length: 5
Using dense features with data: tensor([ 1.1197,  0.8729,  0.3890, -1.1920,  1.2554])
Data length: 5
Using dense features with data: tensor([ 0.5279,  0.5129,  0.9521, -1.8062,  1.0857])
Data length: 5
Using dense features with data: tensor([ 1.5400,  1.1400,  0.8506, -1.5630,  1.0724])
Data length: 5
Using dense features with data: tensor([ 0.9167,  1.0145,  0.3791, -1.7321,  1.3553])
Data length: 5
Using dense features with data: tensor([ 1.0133,  0.4909,  1.0122, -1.0310,  0.7946])
Data length: 5
Using dense features with data: tensor([ 0.8730,  0.8164,  0.6546, -1.5878,  1.1797])
Data length: 5
Using dense features with data: tensor([ 1.7599, -0.2489,  1.6650, -0.5439,  0.3157])
Data length: 5
Using dense features with data: tensor([ 0.9817,  0.7110,  0.8610, -1.4240,  1.0270])
Data length: 5
Using dense features with data: tensor([ 0.7887,  0.7686,  0.5269, -1.2775,  1.1796])
Data length: 5
Using dense features with data: tensor([ 1.1686,  1.1202,  0.2992, -1.5944,  1.3853])
Data length: 5
Using dense features with data: tensor([ 0.9855,  0.6769,  0.5098, -0.8666,  1.0391])
Data length: 5
Using dense features with data: tensor([ 1.2961,  0.6191,  1.4375, -1.3358,  0.7488])
Data length: 5
Using dense features with data: tensor([ 1.0527,  0.5030,  1.0083, -1.0115,  0.7870])
Data length: 5
Using dense features with data: tensor([ 0.8028,  0.4498,  0.6720, -1.0385,  0.9965])
Data length: 5
Using dense features with data: tensor([ 1.3394,  0.5188,  1.3097, -1.1496,  0.7204])
Data length: 5
Using dense features with data: tensor([ 1.0354,  0.6074,  0.8091, -1.3237,  1.0221])
Data length: 5
Using dense features with data: tensor([ 0.8986,  0.8046,  0.3121, -0.9565,  1.2554])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 48: Loss=6240.6914, Heatmap=0.6664, Dense=0.2857, Output_Max=5.4996
Using dense features with data: tensor([ 1.0719,  1.2994,  0.6525, -1.5947,  1.1824])
Data length: 5
Using dense features with data: tensor([ 0.9985,  0.5564,  0.8082, -1.2309,  0.9898])
Data length: 5
Using dense features with data: tensor([ 1.0494,  0.5097,  1.1726, -1.1595,  0.7798])
Data length: 5
Using dense features with data: tensor([ 0.9734,  0.5689,  0.3659, -0.7237,  1.1027])
Data length: 5
Using dense features with data: tensor([ 1.3890,  0.5738,  1.2655, -1.2314,  0.7718])
Data length: 5
Using dense features with data: tensor([ 0.8706,  0.6615,  0.3970, -0.8378,  1.1283])
Data length: 5
Using dense features with data: tensor([ 1.0967,  0.5435,  1.0014, -1.0588,  0.8132])
Data length: 5
Using dense features with data: tensor([ 0.8508,  0.8348,  0.6952, -1.3539,  1.0964])
Data length: 5
Using dense features with data: tensor([ 0.4481,  0.4401,  1.1456, -1.9481,  1.0392])
Data length: 5
Using dense features with data: tensor([ 1.0672,  0.4948,  1.0936, -1.2019,  0.8325])
Data length: 5
Using dense features with data: tensor([ 0.9937,  1.1662,  1.0358, -1.5126,  0.9704])
Data length: 5
Using dense features with data: tensor([ 1.1279,  0.7512,  1.2396, -1.4470,  0.8625])
Data length: 5
Using dense features with data: tensor([ 1.2825,  0.4724,  1.5313, -0.8163,  0.4898])
Data length: 5
Using dense features with data: tensor([ 0.7924,  0.7505,  1.5704, -1.6621,  0.8138])
Data length: 5
Using dense features with data: tensor([ 1.0372,  0.4638,  1.0518, -1.0656,  0.7919])
Data length: 5
Using dense features with data: tensor([ 0.5612,  0.4693,  1.2196, -1.3955,  0.8525])
Data length: 5
Using dense features with data: tensor([ 0.9288,  1.0296,  0.3098, -1.5193,  1.3697])
Data length: 5
Using dense features with data: tensor([ 1.1092,  0.8905,  0.9806, -1.4777,  0.9849])
Data length: 5
Using dense features with data: tensor([ 1.2346,  0.7197,  1.4792, -0.7457,  0.4670])
Data length: 5
Using dense features with data: tensor([ 0.9432,  1.0376,  0.4631, -1.6391,  1.2955])
Data length: 5
Using dense features with data: tensor([ 1.4338,  0.8060,  1.1535, -1.2886,  0.8406])
Data length: 5
Using dense features with data: tensor([ 1.0034,  0.5965,  0.6315, -1.0445,  1.0270])
Data length: 5
Using dense features with data: tensor([ 1.2503,  1.3548,  0.5858, -1.8813,  1.2689])
Data length: 5
Using dense features with data: tensor([ 1.2535,  0.6906,  1.1910, -1.4392,  0.8795])
Data length: 5
Using dense features with data: tensor([ 0.7768,  0.5008,  0.5505, -1.0505,  1.0881])
Data length: 5
Using dense features with data: tensor([ 0.8753,  0.6065,  0.6882, -1.1526,  1.0325])
Data length: 5
Using dense features with data: tensor([ 1.5426,  1.1340,  0.7974, -1.6533,  1.1214])
Data length: 5
Using dense features with data: tensor([ 1.1194,  0.3860,  1.2227, -1.0195,  0.6950])
Data length: 5
Using dense features with data: tensor([ 0.8774,  0.5318,  0.8019, -1.2392,  0.9965])
Data length: 5
Using dense features with data: tensor([ 6.5468e-01,  7.5500e-01,  7.7467e-04, -1.1607e+00,  1.5701e+00])
Data length: 5
Using dense features with data: tensor([ 1.2379, -0.1408,  1.3315,  0.1483, -0.1109])
Data length: 5
Using dense features with data: tensor([ 1.0093,  0.9422,  0.6027, -1.5043,  1.1897])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 49: Loss=6232.5459, Heatmap=0.6657, Dense=0.2853, Output_Max=6.1036
Using dense features with data: tensor([ 0.6217,  0.8446,  0.1263, -1.2196,  1.4676])
Data length: 5
Using dense features with data: tensor([ 0.3995,  0.6857,  0.5905, -1.4704,  1.1889])
Data length: 5
Using dense features with data: tensor([ 1.0370,  0.4466,  1.0334, -0.9934,  0.7657])
Data length: 5
Using dense features with data: tensor([ 1.7270, -0.7915,  1.7041,  0.0985, -0.0577])
Data length: 5
Using dense features with data: tensor([ 1.1933,  0.5199,  1.3864, -1.2609,  0.7380])
Data length: 5
Using dense features with data: tensor([ 0.8436,  0.6548,  0.7005, -1.4639,  1.1245])
Data length: 5
Using dense features with data: tensor([ 0.9818,  0.2933,  1.2080, -0.5497,  0.4271])
Data length: 5
Using dense features with data: tensor([ 1.2894,  0.4289,  1.4989, -0.9935,  0.5853])
Data length: 5
Using dense features with data: tensor([ 1.2437,  0.5423,  1.1963, -1.0826,  0.7356])
Data length: 5
Using dense features with data: tensor([ 1.2058,  0.4433,  1.2930, -1.1352,  0.7205])
Data length: 5
Using dense features with data: tensor([ 1.3577,  0.6175,  1.6715, -0.8159,  0.4541])
Data length: 5
Using dense features with data: tensor([ 0.8231,  0.2563,  1.5315, -1.3643,  0.7277])
Data length: 5
Using dense features with data: tensor([ 1.2726,  0.7128,  0.6371, -1.2441,  1.0975])
Data length: 5
Using dense features with data: tensor([ 0.7229,  1.0190,  0.5424, -1.4949,  1.2228])
Data length: 5
Using dense features with data: tensor([ 0.8752,  0.5205,  1.3117, -2.0601,  1.0038])
Data length: 5
Using dense features with data: tensor([ 0.9949,  0.9771,  0.6910, -1.7332,  1.1914])
Data length: 5
Using dense features with data: tensor([ 0.6308,  0.1835,  1.5333, -1.2746,  0.6935])
Data length: 5
Using dense features with data: tensor([ 1.2992,  0.4236,  1.3963, -1.0159,  0.6290])
Data length: 5
Using dense features with data: tensor([ 1.8697,  0.1169,  1.8624,  0.1185, -0.0636])
Data length: 5
Using dense features with data: tensor([ 1.0313,  0.4397,  1.0610, -1.0542,  0.7822])
Data length: 5
Using dense features with data: tensor([ 1.5535,  0.2323,  2.0356, -0.9042,  0.4180])
Data length: 5
Using dense features with data: tensor([ 1.0018,  0.4852,  1.0329, -1.0293,  0.7837])
Data length: 5
Using dense features with data: tensor([ 1.3194,  0.5050,  1.0621, -1.0515,  0.7804])
Data length: 5
Using dense features with data: tensor([ 0.9406,  0.7389,  0.9143, -1.4883,  1.0199])
Data length: 5
Using dense features with data: tensor([ 1.8393,  0.4164,  1.7157, -1.0788,  0.5613])
Data length: 5
Using dense features with data: tensor([ 1.1717,  0.3036,  2.4415, -0.6087,  0.2444])
Data length: 5
Using dense features with data: tensor([ 1.0678,  0.6549,  1.1553, -1.3593,  0.8664])
Data length: 5
Using dense features with data: tensor([ 1.4997,  0.7511,  0.9789, -1.6779,  1.0426])
Data length: 5
Using dense features with data: tensor([ 1.0440,  0.4893,  1.0349, -1.1000,  0.8159])
Data length: 5
Using dense features with data: tensor([ 1.2164,  0.4852,  1.5750, -1.0695,  0.5965])
Data length: 5
Using dense features with data: tensor([ 1.2265,  0.3612,  1.4569, -1.0838,  0.6396])
Data length: 5
Using dense features with data: tensor([ 0.9019,  0.5905,  0.7035, -1.2574,  1.0607])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 50: Loss=6225.9937, Heatmap=0.6650, Dense=0.2850, Output_Max=6.3493
Using dense features with data: tensor([ 1.1299, -0.0046,  2.1734, -0.9396,  0.4080])
Data length: 5
Using dense features with data: tensor([ 1.0392,  0.4398,  1.1718, -0.9964,  0.7047])
Data length: 5
Using dense features with data: tensor([ 1.0702,  0.5421,  0.9888, -1.0895,  0.8338])
Data length: 5
Using dense features with data: tensor([ 1.1358,  0.7457,  1.1455, -1.5226,  0.9258])
Data length: 5
Using dense features with data: tensor([ 0.9187,  0.5129,  0.2455, -0.4233,  1.0452])
Data length: 5
Using dense features with data: tensor([ 1.0643, -0.1903,  2.0093, -0.0169,  0.0084])
Data length: 5
Using dense features with data: tensor([ 1.0200,  0.8316,  0.7426, -1.5353,  1.1203])
Data length: 5
Using dense features with data: tensor([ 1.0046,  0.5583,  1.0064, -1.2430,  0.8902])
Data length: 5
Using dense features with data: tensor([ 0.8288,  0.4390,  1.4300, -1.2728,  0.7273])
Data length: 5
Using dense features with data: tensor([ 0.8735,  0.6737,  0.7736, -1.5171,  1.0992])
Data length: 5
Using dense features with data: tensor([ 1.1347,  0.1422,  2.3444, -1.1769,  0.4653])
Data length: 5
Using dense features with data: tensor([ 0.8738,  0.9823,  0.3885, -1.6235,  1.3359])
Data length: 5
Using dense features with data: tensor([ 0.8709,  0.6867,  0.4407, -1.2263,  1.2258])
Data length: 5
Using dense features with data: tensor([ 1.4791,  0.7245,  0.9215, -1.6836,  1.0700])
Data length: 5
Using dense features with data: tensor([ 1.8486,  0.4818,  2.0613, -0.1924,  0.0931])
Data length: 5
Using dense features with data: tensor([ 1.0206,  0.9735,  0.7066, -1.5172,  1.1349])
Data length: 5
Using dense features with data: tensor([ 0.9675,  0.7860,  2.0798, -2.3216,  0.8403])
Data length: 5
Using dense features with data: tensor([ 1.6419,  0.3275,  1.3809, -0.9846,  0.6194])
Data length: 5
Using dense features with data: tensor([ 6.4480e-01,  7.7064e-01, -2.4467e-04, -1.1920e+00,  1.5710e+00])
Data length: 5
Using dense features with data: tensor([ 1.0808,  1.3268,  0.0595, -1.7926,  1.5376])
Data length: 5
Using dense features with data: tensor([ 1.3433,  0.5241,  1.4051, -1.1037,  0.6658])
Data length: 5
Using dense features with data: tensor([ 0.7958,  0.7638,  0.4674, -1.2661,  1.2171])
Data length: 5
Using dense features with data: tensor([ 1.1151,  0.1315,  2.3028, -1.2447,  0.4955])
Data length: 5
Using dense features with data: tensor([ 1.1703,  0.0233,  1.3694, -0.1154,  0.0840])
Data length: 5
Using dense features with data: tensor([ 1.2565,  0.4868,  1.5451, -0.7557,  0.4549])
Data length: 5
Using dense features with data: tensor([ 1.0497,  0.5740,  0.9810, -1.2380,  0.9007])
Data length: 5
Using dense features with data: tensor([ 1.0763,  0.6791,  1.1067, -1.5029,  0.9361])
Data length: 5
Using dense features with data: tensor([ 1.0866,  0.7733,  1.0125, -1.4851,  0.9724])
Data length: 5
Using dense features with data: tensor([ 1.2149,  0.3792,  1.5358, -0.9354,  0.5471])
Data length: 5
Using dense features with data: tensor([ 0.9914,  0.7788,  0.9036, -1.5549,  1.0444])
Data length: 5
Using dense features with data: tensor([ 0.9546,  0.2931,  1.1784, -0.5456,  0.4336])
Data length: 5
Using dense features with data: tensor([ 1.1070,  0.4612,  1.1750, -1.0552,  0.7317])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 51: Loss=6220.2432, Heatmap=0.6644, Dense=0.2847, Output_Max=6.5344
Using dense features with data: tensor([ 1.0254,  0.5174,  0.9045, -1.1801,  0.9169])
Data length: 5
Using dense features with data: tensor([ 1.1702,  1.0579,  1.4109, -1.3407,  0.7599])
Data length: 5
Using dense features with data: tensor([ 1.0078,  0.9408,  0.9235, -1.5300,  1.0278])
Data length: 5
Using dense features with data: tensor([ 0.9070,  1.0023,  0.5222, -1.6358,  1.2618])
Data length: 5
Using dense features with data: tensor([ 0.8961,  0.9665,  0.3885, -1.6235,  1.3359])
Data length: 5
Using dense features with data: tensor([ 1.0537,  0.4146,  1.2353, -1.0192,  0.6898])
Data length: 5
Using dense features with data: tensor([ 1.6829,  0.5416,  1.2237, -1.1115,  0.7374])
Data length: 5
Using dense features with data: tensor([ 0.7204,  0.6986,  1.0659, -2.3287,  1.1415])
Data length: 5
Using dense features with data: tensor([ 1.2439,  1.3443,  0.4532, -1.9066,  1.3375])
Data length: 5
Using dense features with data: tensor([ 1.0326,  0.5599,  1.0848, -0.9762,  0.7327])
Data length: 5
Using dense features with data: tensor([ 1.0790,  0.0254,  2.4176, -0.5081,  0.2072])
Data length: 5
Using dense features with data: tensor([ 1.2531,  1.3500,  0.5858, -1.8813,  1.2689])
Data length: 5
Using dense features with data: tensor([ 0.8108,  0.2251,  1.7147, -1.3205,  0.6563])
Data length: 5
Using dense features with data: tensor([ 1.0568,  0.0848,  2.2119, -1.2736,  0.5224])
Data length: 5
Using dense features with data: tensor([ 1.8014,  0.3691,  1.7921, -1.0049,  0.5111])
Data length: 5
Using dense features with data: tensor([ 1.1630,  0.6358,  1.2033, -1.4195,  0.8676])
Data length: 5
Using dense features with data: tensor([ 1.9461, -0.0334,  1.6976,  0.2107, -0.1235])
Data length: 5
Using dense features with data: tensor([ 0.9442,  0.6759,  0.6129, -1.2680,  1.1206])
Data length: 5
Using dense features with data: tensor([ 1.2861,  0.5059,  1.3260, -1.1062,  0.6953])
Data length: 5
Using dense features with data: tensor([ 1.0091, -0.1969,  1.9084, -0.3400,  0.1763])
Data length: 5
Using dense features with data: tensor([ 1.0176,  0.6888,  0.5519, -1.1282,  1.1158])
Data length: 5
Using dense features with data: tensor([ 0.9521,  0.9561,  0.6584, -1.5600,  1.1715])
Data length: 5
Using dense features with data: tensor([ 0.5147,  0.5492,  1.2198, -1.6827,  0.9435])
Data length: 5
Using dense features with data: tensor([ 0.9982,  0.7030,  0.9044, -1.4239,  1.0049])
Data length: 5
Using dense features with data: tensor([ 1.0709,  0.7062,  0.5180, -1.1484,  1.1471])
Data length: 5
Using dense features with data: tensor([ 0.7476,  0.5650,  0.3624, -1.1296,  1.2603])
Data length: 5
Using dense features with data: tensor([ 1.1883,  0.3660,  1.4266, -1.0937,  0.6541])
Data length: 5
Using dense features with data: tensor([ 0.5101,  0.5450,  1.0919, -1.7684,  1.0177])
Data length: 5
Using dense features with data: tensor([ 1.2362,  0.8483,  0.2286, -0.6424,  1.2289])
Data length: 5
Using dense features with data: tensor([ 0.8910,  0.6811,  0.4407, -1.2263,  1.2258])
Data length: 5
Using dense features with data: tensor([ 1.1176,  0.6722,  1.1700, -1.3547,  0.8585])
Data length: 5
Using dense features with data: tensor([ 0.5196,  0.5162,  0.8978, -1.8744,  1.1241])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 52: Loss=6212.9380, Heatmap=0.6637, Dense=0.2844, Output_Max=6.1998
Using dense features with data: tensor([ 1.1967,  0.6456,  0.9039, -1.1603,  0.9090])
Data length: 5
Using dense features with data: tensor([ 1.2622,  0.7096,  1.3189, -1.3126,  0.7830])
Data length: 5
Using dense features with data: tensor([ 0.8537,  0.6265,  0.8214, -1.4341,  1.0506])
Data length: 5
Using dense features with data: tensor([ 0.9875,  0.5564,  0.8275, -1.1877,  0.9623])
Data length: 5
Using dense features with data: tensor([ 1.6876,  0.6830,  1.2212, -1.2178,  0.7840])
Data length: 5
Using dense features with data: tensor([ 0.8599,  0.4015,  0.7260, -0.9679,  0.9273])
Data length: 5
Using dense features with data: tensor([ 1.2375,  0.6098,  0.9183, -1.2375,  0.9324])
Data length: 5
Using dense features with data: tensor([ 0.8334,  0.4863,  0.7758, -1.0695,  0.9433])
Data length: 5
Using dense features with data: tensor([ 1.0366,  0.4679,  1.1193, -0.9916,  0.7250])
Data length: 5
Using dense features with data: tensor([ 0.4623,  0.3640,  1.1522, -1.7901,  0.9989])
Data length: 5
Using dense features with data: tensor([ 0.8790,  0.4733,  0.2939, -0.4937,  1.0337])
Data length: 5
Using dense features with data: tensor([ 1.0861,  0.0941,  2.2547, -1.2428,  0.5038])
Data length: 5
Using dense features with data: tensor([ 1.0222,  0.9479,  0.3679, -1.5512,  1.3379])
Data length: 5
Using dense features with data: tensor([ 0.8182,  0.8069,  0.6299, -1.3548,  1.1356])
Data length: 5
Using dense features with data: tensor([ 0.9509,  0.9412,  0.6387, -1.6691,  1.2054])
Data length: 5
Using dense features with data: tensor([ 1.1577,  0.8302,  0.1859, -0.5278,  1.2322])
Data length: 5
Using dense features with data: tensor([ 1.1714,  0.8162,  1.1613, -1.5319,  0.9221])
Data length: 5
Using dense features with data: tensor([ 1.6339,  0.8508,  1.2600, -1.3645,  0.8252])
Data length: 5
Using dense features with data: tensor([ 1.3939,  0.8423,  0.8286, -1.3498,  1.0203])
Data length: 5
Using dense features with data: tensor([ 0.9072,  0.6710,  0.5374, -1.1505,  1.1338])
Data length: 5
Using dense features with data: tensor([ 1.0606,  0.5376,  0.9876, -1.2367,  0.8969])
Data length: 5
Using dense features with data: tensor([ 0.7708,  0.5953,  1.1023, -1.6317,  0.9767])
Data length: 5
Using dense features with data: tensor([ 1.2935,  0.7126,  1.4186, -0.9763,  0.6028])
Data length: 5
Using dense features with data: tensor([ 1.3499,  0.6186,  1.3333, -1.3601,  0.7954])
Data length: 5
Using dense features with data: tensor([ 0.9299,  0.6901,  0.9547, -1.2982,  0.9367])
Data length: 5
Using dense features with data: tensor([ 0.5975,  0.2334,  1.6114, -1.2841,  0.6728])
Data length: 5
Using dense features with data: tensor([ 1.2151,  1.3244,  0.4527, -1.8826,  1.3348])
Data length: 5
Using dense features with data: tensor([ 1.0284, -0.2012,  1.9583, -0.0541,  0.0276])
Data length: 5
Using dense features with data: tensor([ 1.1790,  0.5448,  1.3122, -1.0750,  0.6864])
Data length: 5
Using dense features with data: tensor([ 0.9821,  0.6742,  0.6731, -1.1676,  1.0478])
Data length: 5
Using dense features with data: tensor([ 1.0677,  0.9219,  0.7802, -1.6761,  1.1351])
Data length: 5
Using dense features with data: tensor([ 0.9953,  0.5429,  0.5371, -0.8626,  1.0139])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 53: Loss=6206.9912, Heatmap=0.6630, Dense=0.2841, Output_Max=6.5288
Using dense features with data: tensor([ 1.0898,  0.7617,  1.0302, -1.5319,  0.9788])
Data length: 5
Using dense features with data: tensor([ 1.0527,  0.5030,  1.0094, -0.9860,  0.7737])
Data length: 5
Using dense features with data: tensor([ 1.1955,  0.5658,  1.3507, -1.2730,  0.7558])
Data length: 5
Using dense features with data: tensor([ 1.7718, -0.8222,  1.5057,  0.3828, -0.2490])
Data length: 5
Using dense features with data: tensor([ 0.7385,  0.7202,  1.4977, -1.7278,  0.8566])
Data length: 5
Using dense features with data: tensor([ 0.3645,  0.7099,  0.4666, -1.2117,  1.2032])
Data length: 5
Using dense features with data: tensor([ 1.2156, -0.0620,  1.3987, -0.0298,  0.0213])
Data length: 5
Using dense features with data: tensor([ 0.8455,  0.7812,  0.7442, -1.3907,  1.0795])
Data length: 5
Using dense features with data: tensor([ 0.9833,  0.2369,  1.1891, -0.5769,  0.4517])
Data length: 5
Using dense features with data: tensor([ 0.9293,  0.7943,  0.4725, -1.2186,  1.2009])
Data length: 5
Using dense features with data: tensor([ 1.0545,  0.8397,  0.8332, -1.5834,  1.0864])
Data length: 5
Using dense features with data: tensor([ 0.3246,  0.6513,  0.6956, -1.3766,  1.1029])
Data length: 5
Using dense features with data: tensor([ 1.3329,  0.5420,  1.4731, -0.9886,  0.5911])
Data length: 5
Using dense features with data: tensor([ 0.6575,  0.9500,  0.3421, -1.4552,  1.3399])
Data length: 5
Using dense features with data: tensor([ 0.9389,  0.6903,  0.8658, -1.3493,  1.0003])
Data length: 5
Using dense features with data: tensor([ 0.8790,  0.4733,  0.2571, -0.4164,  1.0177])
Data length: 5
Using dense features with data: tensor([ 0.9186,  1.0281,  0.3189, -1.5903,  1.3729])
Data length: 5
Using dense features with data: tensor([ 1.0893,  0.7437,  1.6874, -1.9497,  0.8574])
Data length: 5
Using dense features with data: tensor([ 1.2274,  0.7089,  1.3923, -1.4173,  0.7943])
Data length: 5
Using dense features with data: tensor([ 1.7133,  0.7401,  1.0132, -1.2970,  0.9076])
Data length: 5
Using dense features with data: tensor([ 1.1511,  0.3859,  1.2161, -0.9828,  0.6797])
Data length: 5
Using dense features with data: tensor([ 0.8328,  0.4709,  0.7501, -1.1416,  0.9895])
Data length: 5
Using dense features with data: tensor([ 0.8298,  0.4299,  0.3353, -0.4584,  0.9393])
Data length: 5
Using dense features with data: tensor([ 1.7039,  0.6974,  1.0798, -1.2476,  0.8574])
Data length: 5
Using dense features with data: tensor([ 1.4881,  0.7888,  0.9290, -1.3226,  0.9584])
Data length: 5
Using dense features with data: tensor([ 0.9176,  0.6660,  0.5374, -1.1505,  1.1338])
Data length: 5
Using dense features with data: tensor([ 1.3333,  0.6893,  0.8005, -1.7278,  1.1369])
Data length: 5
Using dense features with data: tensor([ 1.3164,  0.5997,  1.4526, -1.0602,  0.6305])
Data length: 5
Using dense features with data: tensor([ 1.1967,  0.6456,  0.9273, -1.1321,  0.8845])
Data length: 5
Using dense features with data: tensor([ 0.9800,  0.8536,  0.5907, -1.4496,  1.1838])
Data length: 5
Using dense features with data: tensor([ 1.0688,  0.3567,  1.1078, -0.9849,  0.7267])
Data length: 5
Using dense features with data: tensor([ 1.6550,  0.8013,  2.1295, -0.6103,  0.2791])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 54: Loss=6201.2090, Heatmap=0.6623, Dense=0.2839, Output_Max=5.7706
Using dense features with data: tensor([ 1.1505,  0.0059,  2.4374, -0.4027,  0.1637])
Data length: 5
Using dense features with data: tensor([ 1.0058,  0.9243,  0.6934, -1.4411,  1.1223])
Data length: 5
Using dense features with data: tensor([ 1.0795,  0.9162,  0.9993, -1.4501,  0.9674])
Data length: 5
Using dense features with data: tensor([ 0.7109,  0.7233,  0.9703, -2.5062,  1.2014])
Data length: 5
Using dense features with data: tensor([ 1.1569,  0.0628,  1.3998, -0.2798,  0.1973])
Data length: 5
Using dense features with data: tensor([ 1.0683,  0.5226,  0.9701, -1.0482,  0.8241])
Data length: 5
Using dense features with data: tensor([ 1.0892,  0.3520,  1.3592, -0.8965,  0.5831])
Data length: 5
Using dense features with data: tensor([ 1.1946,  0.4374,  1.3128, -1.1107,  0.7022])
Data length: 5
Using dense features with data: tensor([ 1.1065,  0.5289,  1.1101, -0.9884,  0.7275])
Data length: 5
Using dense features with data: tensor([ 1.0087,  0.9427,  0.7762, -1.6098,  1.1215])
Data length: 5
Using dense features with data: tensor([ 1.0506,  0.4765,  1.0083, -1.1423,  0.8476])
Data length: 5
Using dense features with data: tensor([ 1.0484,  0.4778,  1.3045, -1.1251,  0.7117])
Data length: 5
Using dense features with data: tensor([ 1.4112,  1.0523,  1.8217, -1.0727,  0.5322])
Data length: 5
Using dense features with data: tensor([ 1.0828,  0.0990,  2.2216, -1.3011,  0.5298])
Data length: 5
Using dense features with data: tensor([ 1.1103,  0.6584,  1.2783, -1.3598,  0.8163])
Data length: 5
Using dense features with data: tensor([ 1.3146,  0.5810,  1.1453, -1.2948,  0.8466])
Data length: 5
Using dense features with data: tensor([ 1.2760,  0.7024,  1.2160, -1.4396,  0.8694])
Data length: 5
Using dense features with data: tensor([ 0.7787,  0.7871,  1.4852, -2.6024,  1.0522])
Data length: 5
Using dense features with data: tensor([ 0.8198,  0.6827,  0.7258, -1.4219,  1.0988])
Data length: 5
Using dense features with data: tensor([ 1.0693,  0.5298,  1.1624, -1.1002,  0.7579])
Data length: 5
Using dense features with data: tensor([ 1.3188,  0.5068,  2.2679, -1.7124,  0.6467])
Data length: 5
Using dense features with data: tensor([ 1.2453,  0.4777,  1.1351, -1.1614,  0.7968])
Data length: 5
Using dense features with data: tensor([ 0.9675,  1.0244,  0.4872, -1.6553,  1.2845])
Data length: 5
Using dense features with data: tensor([ 1.0279,  0.4732,  1.0387, -1.0372,  0.7847])
Data length: 5
Using dense features with data: tensor([ 0.9912,  0.1889,  1.7241, -1.3827,  0.6760])
Data length: 5
Using dense features with data: tensor([ 0.9775,  0.8120,  0.5383, -1.4857,  1.2232])
Data length: 5
Using dense features with data: tensor([ 1.2145,  0.4147,  1.3536, -1.1180,  0.6904])
Data length: 5
Using dense features with data: tensor([ 0.9251,  0.9540,  0.4548, -1.5542,  1.2861])
Data length: 5
Using dense features with data: tensor([ 1.0715,  0.4805,  1.0338, -1.0125,  0.7750])
Data length: 5
Using dense features with data: tensor([ 1.1520,  0.4539,  1.3059, -1.1156,  0.7070])
Data length: 5
Using dense features with data: tensor([ 1.0664,  0.5344,  0.9878, -1.0608,  0.8210])
Data length: 5
Using dense features with data: tensor([ 1.4141,  0.2987,  2.6691, -1.2302,  0.4319])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 55: Loss=6193.1543, Heatmap=0.6617, Dense=0.2834, Output_Max=5.6751
Using dense features with data: tensor([ 1.0151,  0.5180,  0.9397, -1.0780,  0.8538])
Data length: 5
Using dense features with data: tensor([ 1.1591,  1.4364,  0.6888, -1.7525,  1.1963])
Data length: 5
Using dense features with data: tensor([ 1.3798,  1.3355,  0.7488, -1.7378,  1.1639])
Data length: 5
Using dense features with data: tensor([ 1.0157,  0.5903,  0.6759, -1.2233,  1.0660])
Data length: 5
Using dense features with data: tensor([ 0.9563,  0.2837,  1.1583, -0.5989,  0.4772])
Data length: 5
Using dense features with data: tensor([ 0.6297,  0.7458,  2.1074, -1.6385,  0.6609])
Data length: 5
Using dense features with data: tensor([ 1.4273, -0.3292,  1.6577,  1.2184, -0.6338])
Data length: 5
Using dense features with data: tensor([ 1.9046e+00,  2.8976e-01,  2.0665e+00,  4.0735e-03, -1.9712e-03])
Data length: 5
Using dense features with data: tensor([ 0.3865,  0.7078,  0.8127, -1.4410,  1.0573])
Data length: 5
Using dense features with data: tensor([ 1.1218,  0.5257,  1.0753, -1.0261,  0.7620])
Data length: 5
Using dense features with data: tensor([ 1.1338,  0.8504,  0.3154, -0.9083,  1.2365])
Data length: 5
Using dense features with data: tensor([ 0.9355,  0.7144,  0.4850, -1.1863,  1.1827])
Data length: 5
Using dense features with data: tensor([ 0.6951,  0.7199,  0.1082, -1.1272,  1.4751])
Data length: 5
Using dense features with data: tensor([ 0.6947,  0.6817,  0.0761, -1.1158,  1.5027])
Data length: 5
Using dense features with data: tensor([ 1.1527,  0.5195,  1.0205, -1.1159,  0.8301])
Data length: 5
Using dense features with data: tensor([ 0.9546,  0.2931,  1.1837, -0.5619,  0.4432])
Data length: 5
Using dense features with data: tensor([ 0.8035,  0.0416,  1.5961, -1.0729,  0.5918])
Data length: 5
Using dense features with data: tensor([ 1.3478,  0.5825,  1.7969, -0.5589,  0.3016])
Data length: 5
Using dense features with data: tensor([ 0.9586,  1.0214,  0.4873, -1.8184,  1.3089])
Data length: 5
Using dense features with data: tensor([ 1.1230,  0.4784,  1.0724, -1.0797,  0.7888])
Data length: 5
Using dense features with data: tensor([ 0.4380,  0.5100,  1.2369, -1.9180,  0.9980])
Data length: 5
Using dense features with data: tensor([ 0.5210,  0.2297,  1.0946, -1.5513,  0.9563])
Data length: 5
Using dense features with data: tensor([ 1.4538,  0.2851,  2.3905, -1.1364,  0.4438])
Data length: 5
Using dense features with data: tensor([ 0.9995,  0.8498,  0.6197, -1.5173,  1.1830])
Data length: 5
Using dense features with data: tensor([ 0.9756,  0.8832,  0.8054, -1.5447,  1.0902])
Data length: 5
Using dense features with data: tensor([ 1.7053, -0.8313,  1.4633,  0.4010, -0.2674])
Data length: 5
Using dense features with data: tensor([ 1.0001,  0.8811,  0.3623, -2.4066,  1.4214])
Data length: 5
Using dense features with data: tensor([ 0.1696,  0.6236,  0.6682, -1.5901,  1.1730])
Data length: 5
Using dense features with data: tensor([ 1.5517,  0.7716,  1.8781, -0.5173,  0.2687])
Data length: 5
Using dense features with data: tensor([ 1.1055,  1.2648,  0.0716, -1.6801,  1.5282])
Data length: 5
Using dense features with data: tensor([ 0.8012,  0.4082,  0.6126, -0.8658,  0.9550])
Data length: 5
Using dense features with data: tensor([ 1.2701,  0.8017,  0.6272, -1.2447,  1.1040])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 56: Loss=6189.6797, Heatmap=0.6610, Dense=0.2834, Output_Max=6.2831
Using dense features with data: tensor([ 0.9975,  0.6730,  0.8878, -1.3117,  0.9758])
Data length: 5
Using dense features with data: tensor([ 1.0305,  0.7851,  0.6330, -1.4763,  1.1657])
Data length: 5
Using dense features with data: tensor([ 0.9139,  0.9948,  0.5256, -1.6934,  1.2699])
Data length: 5
Using dense features with data: tensor([ 1.6876,  0.6830,  1.1725, -1.1654,  0.7824])
Data length: 5
Using dense features with data: tensor([ 0.9704,  0.6209,  0.3822, -0.7323,  1.0898])
Data length: 5
Using dense features with data: tensor([ 1.3974,  0.8263,  0.9038, -1.3349,  0.9757])
Data length: 5
Using dense features with data: tensor([ 1.4099, -0.3505,  1.5351,  1.2024, -0.6644])
Data length: 5
Using dense features with data: tensor([ 0.8854,  0.7207,  0.6413, -1.4703,  1.1595])
Data length: 5
Using dense features with data: tensor([ 1.3017,  0.5543,  1.8811, -1.8690,  0.7822])
Data length: 5
Using dense features with data: tensor([ 1.2800,  0.4651,  1.5143, -1.0440,  0.6036])
Data length: 5
Using dense features with data: tensor([ 0.9077,  0.5275,  1.5112, -2.1409,  0.9562])
Data length: 5
Using dense features with data: tensor([ 0.8101,  0.4570,  1.1679, -1.9967,  1.0415])
Data length: 5
Using dense features with data: tensor([ 1.3196,  0.6539,  0.9087, -1.6649,  1.0712])
Data length: 5
Using dense features with data: tensor([ 0.7762,  1.0687,  0.5804, -1.4043,  1.1789])
Data length: 5
Using dense features with data: tensor([ 1.1865,  0.4766,  1.2420, -1.0584,  0.7058])
Data length: 5
Using dense features with data: tensor([ 1.1517,  0.4522,  1.1799, -1.0203,  0.7130])
Data length: 5
Using dense features with data: tensor([ 0.8551,  0.5030,  0.8173, -1.2657,  0.9974])
Data length: 5
Using dense features with data: tensor([ 1.6048,  1.0105,  1.1015, -1.3901,  0.9007])
Data length: 5
Using dense features with data: tensor([ 0.9983,  0.5365,  0.9619, -1.2777,  0.9255])
Data length: 5
Using dense features with data: tensor([ 0.5109,  0.6971,  1.6467, -1.8886,  0.8537])
Data length: 5
Using dense features with data: tensor([ 1.1195,  0.8051,  1.0444, -1.4237,  0.9379])
Data length: 5
Using dense features with data: tensor([ 0.9212,  0.4347,  1.0884, -0.9780,  0.7320])
Data length: 5
Using dense features with data: tensor([ 1.0313,  0.4397,  1.0488, -1.0474,  0.7848])
Data length: 5
Using dense features with data: tensor([ 1.1544,  0.4118,  2.4688, -0.6192,  0.2457])
Data length: 5
Using dense features with data: tensor([ 1.0281,  0.5336,  0.8723, -1.1093,  0.9044])
Data length: 5
Using dense features with data: tensor([ 1.7291e+00,  1.0866e-03,  1.4892e+00, -7.9849e-01,  4.9219e-01])
Data length: 5
Using dense features with data: tensor([ 1.2296,  0.4359,  1.4989, -1.1146,  0.6394])
Data length: 5
Using dense features with data: tensor([ 1.2909,  0.4943,  1.2408, -1.2178,  0.7760])
Data length: 5
Using dense features with data: tensor([ 0.6453,  0.2898,  1.2041, -1.4280,  0.8703])
Data length: 5
Using dense features with data: tensor([ 0.5754,  0.6030,  1.6249, -1.2958,  0.6732])
Data length: 5
Using dense features with data: tensor([ 1.0875,  0.9317,  0.8892, -1.5249,  1.0429])
Data length: 5
Using dense features with data: tensor([ 0.7254,  0.6177,  0.2247, -1.1398,  1.3761])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 57: Loss=6181.3604, Heatmap=0.6603, Dense=0.2829, Output_Max=5.2965
Using dense features with data: tensor([ 1.1400,  0.3213,  2.4863, -0.6042,  0.2384])
Data length: 5
Using dense features with data: tensor([ 0.9846,  0.8541,  0.6521, -1.5504,  1.1727])
Data length: 5
Using dense features with data: tensor([ 0.5074,  0.5411,  0.9998, -1.8220,  1.0689])
Data length: 5
Using dense features with data: tensor([ 1.1864,  1.2713,  0.3411, -1.8313,  1.3867])
Data length: 5
Using dense features with data: tensor([ 1.0080,  0.6045,  0.7682, -1.2213,  1.0093])
Data length: 5
Using dense features with data: tensor([ 0.8012,  0.4082,  0.5110, -0.6766,  0.9239])
Data length: 5
Using dense features with data: tensor([ 0.7986,  0.5877,  1.0758, -1.7035,  1.0075])
Data length: 5
Using dense features with data: tensor([ 1.0403,  0.2759,  1.2711, -0.5098,  0.3814])
Data length: 5
Using dense features with data: tensor([ 0.9706,  0.5162,  0.3481, -0.5936,  1.0405])
Data length: 5
Using dense features with data: tensor([ 1.0426,  0.4265,  1.1599, -0.9739,  0.6985])
Data length: 5
Using dense features with data: tensor([ 1.1685,  1.0503,  0.3768, -1.6623,  1.3479])
Data length: 5
Using dense features with data: tensor([ 0.7386,  0.5299,  1.0362, -1.6186,  1.0014])
Data length: 5
Using dense features with data: tensor([ 0.9294,  0.8615,  0.7902, -1.5597,  1.1019])
Data length: 5
Using dense features with data: tensor([ 1.2375,  0.6098,  0.9183, -1.2375,  0.9324])
Data length: 5
Using dense features with data: tensor([ 0.6527,  0.9296,  0.2926, -1.4426,  1.3707])
Data length: 5
Using dense features with data: tensor([ 0.7622,  0.5353,  0.5410, -1.0563,  1.0974])
Data length: 5
Using dense features with data: tensor([ 1.3499,  0.6186,  1.3333, -1.3601,  0.7954])
Data length: 5
Using dense features with data: tensor([ 0.4492,  0.4602,  1.1417, -1.9682,  1.0452])
Data length: 5
Using dense features with data: tensor([ 1.0861,  0.5025,  1.1308, -1.0908,  0.7674])
Data length: 5
Using dense features with data: tensor([ 0.7191,  0.5946,  0.3028, -1.0507,  1.2902])
Data length: 5
Using dense features with data: tensor([ 1.0228,  0.5006,  0.9587, -1.0273,  0.8199])
Data length: 5
Using dense features with data: tensor([ 0.9888,  0.9435,  0.7749, -1.4239,  1.0724])
Data length: 5
Using dense features with data: tensor([ 1.4504, -0.2652,  1.7347,  1.1938, -0.6027])
Data length: 5
Using dense features with data: tensor([ 0.8095, -0.0499,  1.7706, -0.8001,  0.4244])
Data length: 5
Using dense features with data: tensor([ 1.0739,  0.4981,  1.0069, -0.9262,  0.7437])
Data length: 5
Using dense features with data: tensor([ 1.3896,  2.1280, -0.0458, -2.6973,  1.5878])
Data length: 5
Using dense features with data: tensor([ 1.2101,  0.5073,  1.3412, -1.1152,  0.6937])
Data length: 5
Using dense features with data: tensor([ 1.8247, -0.6717,  1.6101,  0.4279, -0.2598])
Data length: 5
Using dense features with data: tensor([ 1.2265,  0.3612,  1.4634, -1.0750,  0.6335])
Data length: 5
Using dense features with data: tensor([ 1.0027,  1.4703,  0.4718, -1.7519,  1.3077])
Data length: 5
Using dense features with data: tensor([ 1.2338,  0.5472,  1.2523, -1.1916,  0.7605])
Data length: 5
Using dense features with data: tensor([ 1.1013,  0.8202,  1.0172, -1.5532,  0.9910])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 58: Loss=6176.7227, Heatmap=0.6597, Dense=0.2828, Output_Max=4.6814
Using dense features with data: tensor([ 1.9251,  0.1822,  1.7058,  0.1276, -0.0746])
Data length: 5
Using dense features with data: tensor([ 1.0819,  0.8158,  1.0172, -1.5532,  0.9910])
Data length: 5
Using dense features with data: tensor([ 0.8790,  0.6678,  0.4716, -0.9682,  1.1175])
Data length: 5
Using dense features with data: tensor([ 0.8630,  0.7357,  0.8083, -1.4543,  1.0635])
Data length: 5
Using dense features with data: tensor([ 1.0758,  0.3975,  1.1599, -0.9739,  0.6985])
Data length: 5
Using dense features with data: tensor([ 1.0756,  0.5462,  1.0440, -1.1314,  0.8256])
Data length: 5
Using dense features with data: tensor([ 1.0029,  0.5170,  0.8876, -1.0750,  0.8806])
Data length: 5
Using dense features with data: tensor([ 1.0911,  1.4746,  0.5839, -1.7961,  1.2565])
Data length: 5
Using dense features with data: tensor([ 1.1621,  0.7142,  1.2934, -1.3916,  0.8220])
Data length: 5
Using dense features with data: tensor([ 1.0763,  0.5523,  1.0597, -1.0715,  0.7909])
Data length: 5
Using dense features with data: tensor([ 1.2340,  0.5194,  1.2204, -1.0675,  0.7186])
Data length: 5
Using dense features with data: tensor([ 1.5575,  0.7470,  0.9667, -1.2907,  0.9279])
Data length: 5
Using dense features with data: tensor([ 1.3423,  0.6207,  1.7199, -0.7084,  0.3907])
Data length: 5
Using dense features with data: tensor([ 1.1691,  1.0986,  0.3243, -1.5961,  1.3703])
Data length: 5
Using dense features with data: tensor([ 0.9460,  0.7186,  0.5462, -1.0749,  1.1007])
Data length: 5
Using dense features with data: tensor([ 1.5708,  0.9539,  1.1625, -1.4485,  0.8945])
Data length: 5
Using dense features with data: tensor([ 1.2689,  0.7708,  1.3997, -0.9947,  0.6179])
Data length: 5
Using dense features with data: tensor([ 1.1146, -0.0076,  2.0385, -0.3266,  0.1589])
Data length: 5
Using dense features with data: tensor([ 1.1722,  0.8284,  1.0946, -1.5802,  0.9650])
Data length: 5
Using dense features with data: tensor([ 1.0949,  1.2960,  0.1032, -1.6891,  1.5098])
Data length: 5
Using dense features with data: tensor([ 1.0991,  0.4874,  1.1004, -1.0441,  0.7592])
Data length: 5
Using dense features with data: tensor([ 0.8702,  0.6695,  0.7499, -1.4757,  1.1006])
Data length: 5
Using dense features with data: tensor([ 0.7171,  0.7610,  2.3498, -1.5616,  0.5865])
Data length: 5
Using dense features with data: tensor([ 0.9983,  0.5365,  0.9129, -1.3132,  0.9633])
Data length: 5
Using dense features with data: tensor([ 0.7647,  0.7601,  2.4935, -1.4055,  0.5133])
Data length: 5
Using dense features with data: tensor([ 1.3733,  0.5988,  1.2882, -1.2857,  0.7844])
Data length: 5
Using dense features with data: tensor([ 1.0599,  0.3310,  1.2768, -0.9084,  0.6184])
Data length: 5
Using dense features with data: tensor([ 1.4116,  0.5137,  1.6235, -0.2674,  0.1633])
Data length: 5
Using dense features with data: tensor([ 1.2306,  0.3549,  1.3262, -0.9731,  0.6330])
Data length: 5
Using dense features with data: tensor([ 1.1236,  1.2797,  0.2520, -1.8075,  1.4323])
Data length: 5
Using dense features with data: tensor([ 1.1350,  0.4221,  1.2710, -1.0658,  0.6978])
Data length: 5
Using dense features with data: tensor([ 0.8696,  0.7310,  0.8110, -1.4102,  1.0489])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 59: Loss=6168.9380, Heatmap=0.6590, Dense=0.2824, Output_Max=5.4393
Using dense features with data: tensor([ 1.1501,  0.5999,  1.3530, -1.2997,  0.7653])
Data length: 5
Using dense features with data: tensor([ 1.1911,  0.8449,  1.0167, -1.5491,  0.9900])
Data length: 5
Using dense features with data: tensor([ 0.9646,  0.8385,  0.5501, -1.4655,  1.2117])
Data length: 5
Using dense features with data: tensor([ 1.2212,  0.4880,  1.1043, -1.1818,  0.8193])
Data length: 5
Using dense features with data: tensor([ 1.0394,  0.9935,  0.5031, -2.5547,  1.3764])
Data length: 5
Using dense features with data: tensor([ 1.1595,  0.5457,  1.2105, -1.0944,  0.7351])
Data length: 5
Using dense features with data: tensor([ 0.9051,  0.7889,  0.8613, -1.4213,  1.0260])
Data length: 5
Using dense features with data: tensor([ 1.2634,  0.5979,  0.7666, -1.1508,  0.9831])
Data length: 5
Using dense features with data: tensor([ 1.3177,  0.5819,  1.3199, -1.2370,  0.7530])
Data length: 5
Using dense features with data: tensor([ 1.1847,  0.6842,  1.3206, -1.3404,  0.7928])
Data length: 5
Using dense features with data: tensor([ 0.8893,  0.7008,  0.7326, -1.4140,  1.0927])
Data length: 5
Using dense features with data: tensor([ 0.5016,  0.2569,  1.1104, -1.5401,  0.9461])
Data length: 5
Using dense features with data: tensor([ 1.1767,  0.4613,  1.2760, -1.0887,  0.7064])
Data length: 5
Using dense features with data: tensor([ 0.9825,  0.5686,  0.7725, -1.1526,  0.9803])
Data length: 5
Using dense features with data: tensor([ 1.0960,  0.2143,  2.4667, -0.4967,  0.1987])
Data length: 5
Using dense features with data: tensor([ 1.4421,  1.2909,  0.7604, -1.6981,  1.1498])
Data length: 5
Using dense features with data: tensor([ 1.0013,  0.5778,  0.7417, -1.1868,  1.0123])
Data length: 5
Using dense features with data: tensor([ 1.2926,  0.6985,  1.1386, -1.2820,  0.8446])
Data length: 5
Using dense features with data: tensor([ 1.6271,  0.2482,  1.1893, -0.7463,  0.5604])
Data length: 5
Using dense features with data: tensor([ 1.1177,  0.6310,  1.2550, -1.2757,  0.7936])
Data length: 5
Using dense features with data: tensor([ 1.3467,  0.5389,  1.8709, -0.5087,  0.2655])
Data length: 5
Using dense features with data: tensor([ 1.0101,  0.5537,  0.9322, -1.1861,  0.9047])
Data length: 5
Using dense features with data: tensor([ 1.0320,  0.7005,  1.0696, -1.4857,  0.9468])
Data length: 5
Using dense features with data: tensor([ 0.4709,  0.6471,  1.4858, -1.8858,  0.9035])
Data length: 5
Using dense features with data: tensor([ 0.8640, -0.1123,  1.8983, -0.6366,  0.3235])
Data length: 5
Using dense features with data: tensor([ 0.9833,  0.2369,  1.1857, -0.5637,  0.4438])
Data length: 5
Using dense features with data: tensor([ 0.8952,  0.6992,  0.7361, -1.4415,  1.0987])
Data length: 5
Using dense features with data: tensor([ 0.9702,  0.9061,  0.5467, -1.5861,  1.2389])
Data length: 5
Using dense features with data: tensor([ 1.1034,  0.7394,  0.6100, -1.1592,  1.0864])
Data length: 5
Using dense features with data: tensor([ 1.2174,  0.4183,  1.3177, -1.1612,  0.7223])
Data length: 5
Using dense features with data: tensor([ 1.0886,  0.4841,  1.0069, -0.9262,  0.7437])
Data length: 5
Using dense features with data: tensor([ 1.0557,  0.8562,  1.4181, -1.2125,  0.7074])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 60: Loss=6162.4365, Heatmap=0.6583, Dense=0.2821, Output_Max=4.6499
Using dense features with data: tensor([ 1.2914,  0.6535,  1.1809, -1.3155,  0.8393])
Data length: 5
Using dense features with data: tensor([ 1.0708, -0.1091,  2.0616, -0.1084,  0.0525])
Data length: 5
Using dense features with data: tensor([ 0.7599,  0.2228,  1.5859, -1.3147,  0.6922])
Data length: 5
Using dense features with data: tensor([ 0.9096,  0.9859,  0.5143, -1.6603,  1.2704])
Data length: 5
Using dense features with data: tensor([ 1.0983,  0.1374,  2.4561, -0.4982,  0.2001])
Data length: 5
Using dense features with data: tensor([ 0.7953,  0.4831,  1.2053, -1.5721,  0.9167])
Data length: 5
Using dense features with data: tensor([ 1.1176,  0.8254,  1.5146, -1.0585,  0.6100])
Data length: 5
Using dense features with data: tensor([ 1.6371,  0.6462,  1.0693, -1.2345,  0.8570])
Data length: 5
Using dense features with data: tensor([ 1.0299,  0.4898,  0.9963, -1.0401,  0.8069])
Data length: 5
Using dense features with data: tensor([ 1.4885,  1.2314,  0.7567, -1.6723,  1.1459])
Data length: 5
Using dense features with data: tensor([ 1.3245,  0.6683,  0.8612, -1.1805,  0.9405])
Data length: 5
Using dense features with data: tensor([ 1.7893,  0.5239,  1.5515, -1.2566,  0.6808])
Data length: 5
Using dense features with data: tensor([ 1.1098,  0.7054,  1.6656, -1.9300,  0.8588])
Data length: 5
Using dense features with data: tensor([ 1.0224,  0.8192,  0.6678, -1.1937,  1.0608])
Data length: 5
Using dense features with data: tensor([ 1.3437,  0.4483,  2.2587, -1.6540,  0.6321])
Data length: 5
Using dense features with data: tensor([ 0.8976,  0.7182,  0.3097, -0.7686,  1.1878])
Data length: 5
Using dense features with data: tensor([ 1.2818,  0.6161,  0.8182, -1.1163,  0.9383])
Data length: 5
Using dense features with data: tensor([ 1.2511,  0.7581,  1.3454, -1.0371,  0.6567])
Data length: 5
Using dense features with data: tensor([ 1.2363,  0.4460,  1.3128, -1.1107,  0.7022])
Data length: 5
Using dense features with data: tensor([ 1.0504,  0.9721,  0.6847, -1.6832,  1.1844])
Data length: 5
Using dense features with data: tensor([ 1.2336,  1.1096,  1.4436, -1.3475,  0.7510])
Data length: 5
Using dense features with data: tensor([ 0.9163,  0.7631,  0.3097, -0.7686,  1.1878])
Data length: 5
Using dense features with data: tensor([ 1.8132, -0.7488,  1.5835,  0.3468, -0.2156])
Data length: 5
Using dense features with data: tensor([ 1.1128,  0.0993,  2.4262, -0.4584,  0.1867])
Data length: 5
Using dense features with data: tensor([ 0.9365,  0.9895,  0.6161, -1.5316,  1.1884])
Data length: 5
Using dense features with data: tensor([ 0.1772,  0.6171,  0.8028, -1.3799,  1.0438])
Data length: 5
Using dense features with data: tensor([ 0.8682,  0.7136,  0.8977, -1.3567,  0.9863])
Data length: 5
Using dense features with data: tensor([ 0.9823,  0.8524,  0.3139, -2.4134,  1.4415])
Data length: 5
Using dense features with data: tensor([ 0.8853,  0.6986,  0.8242, -1.3930,  1.0365])
Data length: 5
Using dense features with data: tensor([ 1.0075,  0.6824,  0.8037, -1.2997,  1.0169])
Data length: 5
Using dense features with data: tensor([ 1.3140,  0.4606,  1.4049, -1.0319,  0.6335])
Data length: 5
Using dense features with data: tensor([ 1.4927,  0.3153,  1.2141, -0.7951,  0.5798])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 61: Loss=6156.8252, Heatmap=0.6576, Dense=0.2818, Output_Max=6.1619
Using dense features with data: tensor([ 1.1250,  0.3856,  1.2777, -1.1127,  0.7165])
Data length: 5
Using dense features with data: tensor([ 0.4908,  0.6741,  1.6037, -1.8592,  0.8590])
Data length: 5
Using dense features with data: tensor([ 1.0763,  0.5523,  1.0678, -1.0633,  0.7833])
Data length: 5
Using dense features with data: tensor([ 1.5890,  0.7772,  1.0387, -1.7021,  1.0229])
Data length: 5
Using dense features with data: tensor([ 0.4546,  0.5905,  1.3047, -2.0271,  0.9989])
Data length: 5
Using dense features with data: tensor([ 1.1834,  0.3118,  1.4228, -1.1583,  0.6833])
Data length: 5
Using dense features with data: tensor([ 1.0396,  0.8974,  1.0372, -1.5987,  0.9953])
Data length: 5
Using dense features with data: tensor([ 1.6575,  0.2601,  1.9056, -0.8937,  0.4385])
Data length: 5
Using dense features with data: tensor([ 1.0095,  0.6677,  0.6218, -1.1957,  1.0913])
Data length: 5
Using dense features with data: tensor([ 0.9107,  0.4693,  0.3028, -0.4623,  0.9909])
Data length: 5
Using dense features with data: tensor([ 1.0057,  0.5399,  0.9238, -1.1756,  0.9048])
Data length: 5
Using dense features with data: tensor([ 0.7928,  0.5213,  1.1724, -2.0299,  1.0470])
Data length: 5
Using dense features with data: tensor([ 0.7566,  0.5197,  1.0855, -1.6325,  0.9840])
Data length: 5
Using dense features with data: tensor([ 1.1686,  0.7287,  1.0692, -1.4408,  0.9324])
Data length: 5
Using dense features with data: tensor([ 1.1905,  0.2000,  2.3334, -1.2387,  0.4880])
Data length: 5
Using dense features with data: tensor([ 1.1458,  0.5254,  1.0284, -1.0543,  0.7978])
Data length: 5
Using dense features with data: tensor([ 1.0104,  0.2767,  1.2468, -0.5442,  0.4116])
Data length: 5
Using dense features with data: tensor([ 1.0958,  0.3649,  1.2665, -0.9046,  0.6202])
Data length: 5
Using dense features with data: tensor([ 0.9797,  0.6984,  0.2047, -0.4760,  1.1648])
Data length: 5
Using dense features with data: tensor([ 0.9712,  0.2493,  1.2229, -0.5336,  0.4114])
Data length: 5
Using dense features with data: tensor([ 1.1824,  0.5328,  0.9648, -1.1653,  0.8792])
Data length: 5
Using dense features with data: tensor([ 0.8923,  0.6611,  0.4129, -0.8470,  1.1172])
Data length: 5
Using dense features with data: tensor([ 1.0005,  0.5847,  0.7295, -1.1854,  1.0191])
Data length: 5
Using dense features with data: tensor([ 1.1500,  0.4260,  1.4107, -1.0778,  0.6524])
Data length: 5
Using dense features with data: tensor([ 0.8607,  0.6471,  0.4716, -0.9682,  1.1175])
Data length: 5
Using dense features with data: tensor([ 1.0963,  0.5047,  1.0900, -1.1317,  0.8042])
Data length: 5
Using dense features with data: tensor([ 1.1927,  0.7195,  1.2030, -1.3768,  0.8527])
Data length: 5
Using dense features with data: tensor([ 1.2075,  0.6939,  1.2012, -1.4500,  0.8790])
Data length: 5
Using dense features with data: tensor([ 1.0511,  0.4619,  0.9683, -1.0373,  0.8198])
Data length: 5
Using dense features with data: tensor([ 1.0211,  0.4840,  0.9838, -1.0699,  0.8273])
Data length: 5
Using dense features with data: tensor([ 1.2502,  0.3775,  1.5690, -1.0387,  0.5848])
Data length: 5
Using dense features with data: tensor([ 0.8528,  0.6406,  0.6094, -1.2088,  1.1038])
Data length: 5
Output Shape: torch.Size([32, 64, 64, 4])
GT Heatmap Shape: torch.Size([32, 64, 64, 1])
GT Dense Shape: torch.Size([32, 64, 64, 3])
Batch 62: Loss=6150.0176, Heatmap=0.6569, Dense=0.2815, Output_Max=5.8204
Using dense features with data: tensor([ 1.1935,  0.7925,  1.3456, -1.4323,  0.8166])
Data length: 5
Using dense features with data: tensor([ 0.9173,  0.5306,  1.5447, -2.1572,  0.9494])
Data length: 5
Using dense features with data: tensor([ 1.2318,  0.5866,  0.7986, -1.1111,  0.9476])
Data length: 5
Using dense features with data: tensor([ 1.1262,  0.6194,  1.3528, -1.1715,  0.7137])
Data length: 5
Using dense features with data: tensor([ 0.9875,  0.8750,  0.8054, -1.5447,  1.0902])
Data length: 5
Using dense features with data: tensor([ 0.8632,  0.4439,  0.3201, -0.4692,  0.9721])
Data length: 5
Using dense features with data: tensor([ 0.4334,  0.4610,  1.2085, -1.9657,  1.0196])
Data length: 5
Using dense features with data: tensor([ 1.3036,  0.7662,  0.8707, -1.2205,  0.9511])
Data length: 5
Using dense features with data: tensor([ 1.0177,  0.6257,  0.9334, -1.1076,  0.8706])
Data length: 5
Using dense features with data: tensor([ 1.1624,  0.8822,  1.1729, -1.3136,  0.8419])
Data length: 5
Using dense features with data: tensor([ 1.6568,  0.7420,  1.3857, -1.2366,  0.7286])
Data length: 5
Using dense features with data: tensor([ 0.4677,  0.6265,  1.3361, -1.9947,  0.9806])
Data length: 5
Using dense features with data: tensor([ 1.1316,  0.7237,  0.7807, -1.1210,  0.9625])
Data length: 5
Using dense features with data: tensor([ 1.3084, -0.2971,  1.5069,  0.6824, -0.4252])
Data length: 5
Using dense features with data: tensor([ 1.8500, -0.4329,  1.5447,  0.3867, -0.2453])
Data length: 5
Using dense features with data: tensor([ 0.9794,  0.2525,  1.0357, -0.7012,  0.5952])
Data length: 5
Using dense features with data: tensor([ 1.2236,  0.7874,  1.1789, -1.5069,  0.9069])
Data length: 5
Using dense features with data: tensor([ 0.2855,  0.5222,  1.2550, -1.6707,  0.9265])
Data length: 5
Using dense features with data: tensor([ 1.5258,  0.9140,  2.0463, -0.8893,  0.4099])
Data length: 5
Using dense features with data: tensor([ 1.3226,  0.5128,  1.3780, -1.1005,  0.6739])
Data length: 5
Using dense features with data: tensor([ 1.1390,  0.6599,  1.1143, -1.4101,  0.9020])
Data length: 5
Using dense features with data: tensor([ 0.8592,  0.7273,  2.3710, -1.3283,  0.5107])
Data length: 5
Using dense features with data: tensor([ 1.1989,  0.8732,  0.1765, -0.5311,  1.2499])
Data length: 5
Using dense features with data: tensor([ 1.0110,  0.7459,  1.4666, -2.1207,  0.9657])
Data length: 5
Using dense features with data: tensor([ 0.9132,  0.3439,  0.8429, -0.8805,  0.8072])
Data length: 5
Using dense features with data: tensor([ 0.6217,  0.8446,  0.0856, -1.2903,  1.5045])
Data length: 5
Using dense features with data: tensor([ 0.2118,  0.6410,  0.8778, -1.3886,  1.0071])
Data length: 5
Using dense features with data: tensor([ 1.0819,  0.6728,  1.1206, -1.4908,  0.9262])
Data length: 5
Using dense features with data: tensor([ 1.1248,  0.7375,  2.3932, -1.9097,  0.6735])
Data length: 5
Using dense features with data: tensor([ 1.1511,  0.3859,  1.2232, -0.9739,  0.6724])
Data length: 5
Output Shape: torch.Size([30, 64, 64, 4])
GT Heatmap Shape: torch.Size([30, 64, 64, 1])
GT Dense Shape: torch.Size([30, 64, 64, 3])
Batch 63: Loss=6143.9233, Heatmap=0.6563, Dense=0.2812, Output_Max=5.9760
Epoch 0 completed!
Average Loss: 6344.6041
Heatmap Loss: 0.6776
Dense Loss: 0.2904
Learning Rate: 0.000500
Model saved at epoch 0

=== Training Summary ===
Initial Loss: 6344.6041
Final Loss: 6344.6041
Total Improvement: 0.00%
conv1.weight
conv1.bias
bn1.weight
bn1.bias
conv2.weight
conv2.bias
bn2.weight
bn2.bias
deconv1.weight
deconv1.bias
deconv2.weight
deconv2.bias
bn4.weight
bn4.bias
bn3.weight
bn3.bias
Using dense features with data: tensor([ 1.3461,  1.0698,  1.6011, -1.1909,  0.6395])
Data length: 5
Using dense features with data: tensor([ 0.9644,  0.8669,  0.3736, -1.5564,  1.3352])
Data length: 5
Using dense features with data: tensor([ 0.8924,  0.8010,  0.7386, -1.4888,  1.1103])
Data length: 5
Using dense features with data: tensor([ 1.2722,  0.4755,  1.5474, -0.7854,  0.4697])
Data length: 5
Using dense features with data: tensor([ 1.1248,  0.7375,  2.3932, -1.9097,  0.6735])
Data length: 5
Using dense features with data: tensor([ 0.4972,  0.2875,  1.1324, -1.5779,  0.9483])
Data length: 5
Using dense features with data: tensor([ 1.2940,  0.6853,  1.2550, -1.3685,  0.8286])
Data length: 5
Using dense features with data: tensor([ 1.0682,  0.8841,  0.9398, -1.7259,  1.0722])
Data length: 5
Using dense features with data: tensor([ 1.0236,  0.7274,  0.5555, -1.1264,  1.1126])
Data length: 5
Using dense features with data: tensor([ 1.7321,  0.2778,  1.8852, -0.8950,  0.4433])
Data length: 5
Using dense features with data: tensor([ 0.6217,  0.8446,  0.0856, -1.2903,  1.5045])
Data length: 5
Using dense features with data: tensor([ 1.0394,  0.9935,  0.5031, -2.5547,  1.3764])
Data length: 5
Using dense features with data: tensor([ 1.0702,  0.5421,  0.9888, -1.0895,  0.8338])
Data length: 5
Using dense features with data: tensor([ 0.5728,  0.4494,  1.1856, -1.4245,  0.8767])
Data length: 5
Using dense features with data: tensor([ 1.1650,  1.4458,  0.6888, -1.7525,  1.1963])
Data length: 5
Using dense features with data: tensor([ 0.8205,  0.7495,  1.6318, -1.6017,  0.7761])
Data length: 5
Using dense features with data: tensor([ 1.3467,  0.5389,  1.8231, -0.4727,  0.2537])
Data length: 5
Using dense features with data: tensor([ 1.0203,  0.4767,  0.9273, -1.0363,  0.8409])
Data length: 5
Using dense features with data: tensor([ 1.0141,  0.4948,  0.8831, -1.0468,  0.8700])
Data length: 5
Using dense features with data: tensor([ 1.2926,  0.6985,  1.1386, -1.2820,  0.8446])
Data length: 5
Using dense features with data: tensor([ 1.0795,  0.4971,  2.5133, -0.7716,  0.2979])
Data length: 5
Using dense features with data: tensor([ 1.4800,  0.0416,  1.5890,  0.4559, -0.2794])
Data length: 5
Using dense features with data: tensor([ 1.2825,  0.4724,  1.5313, -0.8163,  0.4898])
Data length: 5
Using dense features with data: tensor([ 1.2177,  1.2679,  0.3600, -1.8588,  1.3795])
Data length: 5
Using dense features with data: tensor([ 1.0626,  1.2865,  0.5491, -1.6472,  1.2490])
Data length: 5
Using dense features with data: tensor([ 1.7270, -0.7915,  1.7041,  0.0985, -0.0577])
Data length: 5
Using dense features with data: tensor([ 1.0758,  0.3871,  1.1979, -1.0474,  0.7184])
Data length: 5
Using dense features with data: tensor([ 0.9315,  0.9900,  0.5682, -1.5951,  1.2286])
Data length: 5
Using dense features with data: tensor([ 1.2320,  0.8125,  1.2689, -1.1569,  0.7393])
Data length: 5
Using dense features with data: tensor([ 1.5385,  0.2725,  1.2141, -0.7951,  0.5798])
Data length: 5
Using dense features with data: tensor([ 1.0278,  0.9573,  0.4838, -2.5351,  1.3822])
Data length: 5
Using dense features with data: tensor([ 0.9675,  1.0244,  0.4872, -1.6553,  1.2845])
Data length: 5
Elapsed time: 2.6132460006920155 ms
Input Shape: torch.Size([32, 6, 64, 64])
Output Shape: torch.Size([32, 4, 64, 64])
Using dense features with data: tensor([ 0.3564,  0.5450,  1.4401, -1.4734,  0.7968])
Data length: 5
Using dense features with data: tensor([ 0.9797,  0.6984,  0.2047, -0.4760,  1.1648])
Data length: 5
Using dense features with data: tensor([ 1.0067,  0.5417,  0.7891, -1.1835,  0.9827])
Data length: 5
Using dense features with data: tensor([ 1.3164,  0.5997,  1.4526, -1.0602,  0.6305])
Data length: 5
Using dense features with data: tensor([ 1.1686,  0.7287,  1.0692, -1.4408,  0.9324])
Data length: 5
Using dense features with data: tensor([ 1.0464,  0.5524,  1.0822, -0.9968,  0.7443])
Data length: 5
Using dense features with data: tensor([ 1.3698,  0.4254,  2.2320, -1.6376,  0.6330])
Data length: 5
Using dense features with data: tensor([ 1.0456,  0.6907,  0.5549, -1.1296,  1.1141])
Data length: 5
Using dense features with data: tensor([ 1.2437,  0.5423,  1.1313, -1.1505,  0.7938])
Data length: 5
Using dense features with data: tensor([ 0.3729,  0.5442,  1.5333, -1.3503,  0.7220])
Data length: 5
Using dense features with data: tensor([ 0.6234,  0.7472,  2.0510, -1.5215,  0.6383])
Data length: 5
Using dense features with data: tensor([ 1.1946,  0.4374,  1.3128, -1.1107,  0.7022])
Data length: 5
Using dense features with data: tensor([ 1.0763,  0.5523,  1.0597, -1.0715,  0.7909])
Data length: 5
Using dense features with data: tensor([ 1.8458,  0.3765,  1.7190, -1.0736,  0.5583])
Data length: 5
Using dense features with data: tensor([ 0.8483,  0.7909,  0.7442, -1.3907,  1.0795])
Data length: 5
Using dense features with data: tensor([ 0.7229,  1.0190,  0.5424, -1.4949,  1.2228])
Data length: 5
Using dense features with data: tensor([ 0.9923,  0.2361,  1.1575, -0.5744,  0.4606])
Data length: 5
Using dense features with data: tensor([ 1.0914,  0.6728,  1.1172, -1.4282,  0.9070])
Data length: 5
Using dense features with data: tensor([ 0.8212,  0.6021,  1.1304, -1.7030,  0.9848])
Data length: 5
Using dense features with data: tensor([ 1.7314, -0.5830,  1.7459, -0.0944,  0.0540])
Data length: 5
Using dense features with data: tensor([ 1.3177,  0.5819,  1.3199, -1.2370,  0.7530])
Data length: 5
Using dense features with data: tensor([ 1.1970,  0.4113,  1.3658, -1.0432,  0.6523])
Data length: 5
Using dense features with data: tensor([ 0.8986,  0.8046,  0.3121, -0.9565,  1.2554])
Data length: 5
Using dense features with data: tensor([ 0.9258,  0.9891,  0.6361, -1.6175,  1.1961])
Data length: 5
Using dense features with data: tensor([ 1.1061,  0.4360,  1.2356, -1.1199,  0.7363])
Data length: 5
Using dense features with data: tensor([ 1.2365,  0.7053,  2.5959, -1.6233,  0.5588])
Data length: 5
Using dense features with data: tensor([ 0.9176,  0.6660,  0.5374, -1.1505,  1.1338])
Data length: 5
Using dense features with data: tensor([ 1.0001,  0.9504,  0.7458, -1.4838,  1.1050])
Data length: 5
Using dense features with data: tensor([ 1.0331,  0.6069,  0.9457, -1.0995,  0.8604])
Data length: 5
Using dense features with data: tensor([ 1.1417,  0.4857,  1.2328, -1.0613,  0.7108])
Data length: 5
Using dense features with data: tensor([ 0.6976,  0.7283,  1.1062, -2.4492,  1.1466])
Data length: 5
Using dense features with data: tensor([ 1.0778,  1.1032,  0.4408, -2.5195,  1.3976])
Data length: 5
Using dense features with data: tensor([ 0.8313,  0.7224,  0.4173, -1.2347,  1.2449])
Data length: 5
Elapsed time: 1.201357001264114 ms
Using dense features with data: tensor([ 0.3564,  0.5450,  1.4401, -1.4734,  0.7968])
Data length: 5
Using dense features with data: tensor([ 1.1929,  0.4883,  1.1808, -1.1010,  0.7505])
Data length: 5
Using dense features with data: tensor([ 1.0537,  0.4146,  1.2353, -1.0192,  0.6898])
Data length: 5
Using dense features with data: tensor([ 1.1559,  0.4971,  1.2455, -1.2507,  0.7875])
Data length: 5
Using dense features with data: tensor([ 1.0532,  0.4831,  0.9989, -1.0320,  0.8017])
Data length: 5
Using dense features with data: tensor([ 1.0751,  0.5577,  2.4794, -0.8744,  0.3390])
Data length: 5
Using dense features with data: tensor([ 0.9518,  1.4465,  0.3022, -1.6955,  1.3944])
Data length: 5
Using dense features with data: tensor([ 0.8086,  0.7463,  0.4249, -1.1930,  1.2286])
Data length: 5
Using dense features with data: tensor([ 0.8752,  0.5205,  1.3117, -2.0601,  1.0038])
Data length: 5
Using dense features with data: tensor([ 1.3527,  1.2760,  1.0532, -1.5083,  0.9613])
Data length: 5
Using dense features with data: tensor([ 1.0527,  0.5030,  1.0094, -0.9860,  0.7737])
Data length: 5
Using dense features with data: tensor([ 0.6804,  0.7183,  0.0799, -1.1429,  1.5010])
Data length: 5
Using dense features with data: tensor([ 1.5548,  0.6923,  1.0316, -1.2404,  0.8770])
Data length: 5
Using dense features with data: tensor([ 1.6606,  0.6337,  1.8883, -0.3030,  0.1591])
Data length: 5
Using dense features with data: tensor([ 0.9282,  0.5285,  0.2992, -0.5143,  1.0439])
Data length: 5
Using dense features with data: tensor([ 0.9606,  0.2690,  1.1789, -0.5572,  0.4415])
Data length: 5
Using dense features with data: tensor([ 1.0426,  0.4265,  1.1599, -0.9739,  0.6985])
Data length: 5
Using dense features with data: tensor([ 1.2362,  0.8483,  0.2286, -0.6424,  1.2289])
Data length: 5
Using dense features with data: tensor([ 0.9120,  0.6185,  0.6627, -1.1624,  1.0526])
Data length: 5
Using dense features with data: tensor([ 1.0672,  0.4948,  1.1388, -1.1592,  0.7943])
Data length: 5
Using dense features with data: tensor([ 1.6606,  0.6337,  1.8883, -0.3030,  0.1591])
Data length: 5
Using dense features with data: tensor([ 1.0886,  0.4270,  1.1443, -0.9423,  0.6889])
Data length: 5
Using dense features with data: tensor([ 1.3294,  0.6933,  0.8218, -1.7916,  1.1408])
Data length: 5
Using dense features with data: tensor([ 0.8012,  0.4082,  0.6126, -0.8658,  0.9550])
Data length: 5
Using dense features with data: tensor([ 0.9315,  0.9900,  0.5682, -1.5951,  1.2286])
Data length: 5
Using dense features with data: tensor([ 1.0991,  0.4874,  1.1004, -1.0441,  0.7592])
Data length: 5
Using dense features with data: tensor([ 1.9274, -0.2625,  1.6881,  0.2763, -0.1623])
Data length: 5
Using dense features with data: tensor([ 1.3196,  0.6539,  0.9087, -1.6649,  1.0712])
Data length: 5
Using dense features with data: tensor([ 0.3246,  0.6513,  0.6956, -1.3766,  1.1029])
Data length: 5
Using dense features with data: tensor([ 1.1176,  0.8254,  1.4512, -1.2179,  0.6982])
Data length: 5
Using dense features with data: tensor([ 1.4099, -0.3505,  1.5488,  1.1847, -0.6530])
Data length: 5
Using dense features with data: tensor([ 1.5385,  0.2725,  1.2141, -0.7951,  0.5798])
Data length: 5
Using dense features with data: tensor([ 1.0758,  0.3975,  1.1599, -0.9739,  0.6985])
Data length: 5
Elapsed time: 1.4677840008516796 ms
Input Shape: torch.Size([32, 6, 64, 64])
Output Shape: torch.Size([32, 4, 64, 64])
Using dense features with data: tensor([ 0.3564,  0.5450,  1.4401, -1.4734,  0.7968])
Data length: 5
Using dense features with data: tensor([ 1.0397,  0.7141,  0.5519, -1.1282,  1.1158])
Data length: 5
Using dense features with data: tensor([ 0.9825,  0.5686,  0.7725, -1.1526,  0.9803])
Data length: 5
Using dense features with data: tensor([ 1.1340, -0.0308,  2.2460, -0.6199,  0.2693])
Data length: 5
Using dense features with data: tensor([ 1.2881,  0.6855,  1.2547, -1.3634,  0.8269])
Data length: 5
Using dense features with data: tensor([ 1.1935,  0.7925,  1.3456, -1.4323,  0.8166])
Data length: 5
Using dense features with data: tensor([ 1.2054,  0.8310,  1.1141, -1.4964,  0.9308])
Data length: 5
Using dense features with data: tensor([ 1.0224,  0.8192,  0.6678, -1.1937,  1.0608])
Data length: 5
Using dense features with data: tensor([ 1.1431,  0.4984,  1.4361, -1.1174,  0.6612])
Data length: 5
Using dense features with data: tensor([ 1.1044,  0.5362,  1.0006, -1.0587,  0.8136])
Data length: 5
Using dense features with data: tensor([ 1.6419,  0.3275,  1.3809, -0.9846,  0.6194])
Data length: 5
Using dense features with data: tensor([ 1.2174,  0.4183,  1.3177, -1.1612,  0.7223])
Data length: 5
Using dense features with data: tensor([ 1.0460,  0.4912,  1.1870, -1.1501,  0.7696])
Data length: 5
Using dense features with data: tensor([ 0.9925,  0.6581,  0.5074, -1.1695,  1.1615])
Data length: 5
Using dense features with data: tensor([ 0.9520,  0.7472,  0.4150, -0.9468,  1.1577])
Data length: 5
Using dense features with data: tensor([ 0.7731,  1.0627,  0.4982, -1.4356,  1.2368])
Data length: 5
Using dense features with data: tensor([ 0.9117,  0.9803,  0.3851, -1.6734,  1.3446])
Data length: 5
Using dense features with data: tensor([ 1.2944,  1.3829,  0.6919, -1.7768,  1.1994])
Data length: 5
Using dense features with data: tensor([ 1.3698,  0.4254,  2.2320, -1.6376,  0.6330])
Data length: 5
Using dense features with data: tensor([ 1.0281,  0.5336,  0.8723, -1.1093,  0.9044])
Data length: 5
Using dense features with data: tensor([ 1.7270, -0.7915,  1.7041,  0.0985, -0.0577])
Data length: 5
Using dense features with data: tensor([ 1.3226,  0.5128,  1.3780, -1.1005,  0.6739])
Data length: 5
Using dense features with data: tensor([ 1.0758,  0.3871,  1.1979, -1.0474,  0.7184])
Data length: 5
Using dense features with data: tensor([ 0.9204,  1.0129,  0.3862, -1.6534,  1.3413])
Data length: 5
Using dense features with data: tensor([ 1.0816,  0.4546,  1.2463, -1.0213,  0.6865])
Data length: 5
Using dense features with data: tensor([ 1.2097,  1.2744,  0.3670, -1.8813,  1.3781])
Data length: 5
Using dense features with data: tensor([ 1.4338,  0.8060,  1.1535, -1.2886,  0.8406])
Data length: 5
Using dense features with data: tensor([ 1.0963,  0.5047,  1.0900, -1.1317,  0.8042])
Data length: 5
Using dense features with data: tensor([ 1.0828,  0.0990,  2.2216, -1.3011,  0.5298])
Data length: 5
Using dense features with data: tensor([ 0.4334,  0.4610,  1.2085, -1.9657,  1.0196])
Data length: 5
Using dense features with data: tensor([ 1.1316,  0.7237,  0.6722, -1.1410,  1.0384])
Data length: 5
Using dense features with data: tensor([ 1.7718, -0.8222,  1.5057,  0.3828, -0.2490])
Data length: 5
Using dense features with data: tensor([ 1.4535,  0.3853,  1.7187, -0.1784,  0.1034])
Data length: 5
Input Shape: torch.Size([32, 6, 64, 64])
Output Shape: torch.Size([32, 4, 64, 64])
Using dense features with data: tensor([ 0.3564,  0.5450,  1.4401, -1.4734,  0.7968])
Data length: 5
Elapsed time: 3.7246390002110275 ms
torch.Size([1, 4, 64, 64])
Using dense features with data: tensor([ 1.2469,  0.5807,  0.8537, -1.0878,  0.9054])
Data length: 5
/tmp/ipykernel_106891/1724336391.py:7: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.
  output[0,0] = F.softmax(output[0,0])
tensor([ 1.2469,  0.5807,  0.8537, -1.0878,  0.9054])
Output: Heatmap
GT: 0.8536706566810608
Output: -0.2911449372768402
Maximum value in image slice 1: 5.06003999710083
Minimum value in image slice 1: -2.273782968521118
GT: -1.087767481803894
Output: -2.8430416584014893
Maximum value in image slice 2: 2.5580573081970215
Minimum value in image slice 2: -4.648737907409668
GT: 0.905397891998291
Output: 4.351894378662109
Maximum value in image slice 3: 4.402462959289551
Minimum value in image slice 3: -2.9187357425689697
